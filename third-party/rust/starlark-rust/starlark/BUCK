load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "export_file", "rust_library")

# This file serves as the preamble to generated starlark targets.
# The actual targets are generated in the same manner as third-party
# dependencies, but are copied from buck2 instead of fbsource/third-party

export_file(
    name = "src/syntax/grammar.lalrpop",
)

buck_genrule(
    name = "grammar",
    out = ".",
    cmd = """
        cd $TMP
        mkdir -p src/syntax
        cp $(location :src/syntax/grammar.lalrpop) ./src/syntax/
        $(exe //third-party/rust:lalrpop-lalrpop) --out-dir $OUT ./src/syntax/grammar.lalrpop
    """,
)

rust_library(
    name = "starlark",
    srcs = [
        "src/analysis/bind.rs",
        "src/analysis/dubious.rs",
        "src/analysis/exported.rs",
        "src/analysis/flow.rs",
        "src/analysis/incompatible.rs",
        "src/analysis/mod.rs",
        "src/analysis/names.rs",
        "src/analysis/performance.rs",
        "src/analysis/types.rs",
        "src/assert/assert.rs",
        "src/assert/conformance.rs",
        "src/assert/mod.rs",
        "src/codemap.rs",
        "src/collections/alloca.rs",
        "src/collections/hash.rs",
        "src/collections/idhasher.rs",
        "src/collections/mod.rs",
        "src/collections/small_map.rs",
        "src/collections/small_set.rs",
        "src/collections/stack.rs",
        "src/collections/symbol_map.rs",
        "src/collections/vec_map.rs",
        "src/debug/breakpoint.rs",
        "src/debug/evaluate.rs",
        "src/debug/inspect.rs",
        "src/debug/mod.rs",
        "src/environment/globals.rs",
        "src/environment/mod.rs",
        "src/environment/modules.rs",
        "src/environment/names.rs",
        "src/environment/slots.rs",
        "src/errors/did_you_mean.rs",
        "src/errors/mod.rs",
        "src/eval/compiler/mod.rs",
        "src/eval/compiler/scope.rs",
        "src/eval/fragment/call.rs",
        "src/eval/fragment/compr.rs",
        "src/eval/fragment/def.rs",
        "src/eval/fragment/expr.rs",
        "src/eval/fragment/known.rs",
        "src/eval/fragment/mod.rs",
        "src/eval/fragment/module.rs",
        "src/eval/fragment/stmt.rs",
        "src/eval/mod.rs",
        "src/eval/runtime/arguments.rs",
        "src/eval/runtime/call_stack.rs",
        "src/eval/runtime/evaluator.rs",
        "src/eval/runtime/file_loader.rs",
        "src/eval/runtime/flame_profile.rs",
        "src/eval/runtime/heap_profile.rs",
        "src/eval/runtime/mod.rs",
        "src/eval/runtime/slots.rs",
        "src/eval/runtime/stmt_profile.rs",
        "src/eval/tests/basic.rs",
        "src/eval/tests/before_stmt.rs",
        "src/eval/tests/call.rs",
        "src/eval/tests/comprehension.rs",
        "src/eval/tests/def.rs",
        "src/eval/tests/docstring.rs",
        "src/eval/tests/go.rs",
        "src/eval/tests/interop.rs",
        "src/eval/tests/mod.rs",
        "src/eval/tests/runtime.rs",
        "src/eval/tests/type_is.rs",
        "src/lib.rs",
        "src/macros/mod.rs",
        "src/stdlib/breakpoint.rs",
        "src/stdlib/dict.rs",
        "src/stdlib/enumeration.rs",
        "src/stdlib/extra.rs",
        "src/stdlib/funcs.rs",
        "src/stdlib/list.rs",
        "src/stdlib/mod.rs",
        "src/stdlib/record.rs",
        "src/stdlib/string.rs",
        "src/stdlib/structs.rs",
        "src/stdlib/util.rs",
        "src/syntax/ast.rs",
        "src/syntax/cursors.rs",
        "src/syntax/dialect.rs",
        "src/syntax/grammar_tests.rs",
        "src/syntax/lexer.rs",
        "src/syntax/lexer_tests.rs",
        "src/syntax/mod.rs",
        "src/syntax/parser.rs",
        "src/syntax/payload_map.rs",
        "src/syntax/testcases.rs",
        "src/syntax/uniplate.rs",
        "src/syntax/validate.rs",
        "src/values/alloc_value.rs",
        "src/values/comparison.rs",
        "src/values/docs.rs",
        "src/values/error.rs",
        "src/values/fast_string.rs",
        "src/values/frozen_ref.rs",
        "src/values/index.rs",
        "src/values/interpolation.rs",
        "src/values/iter.rs",
        "src/values/layout/arena.rs",
        "src/values/layout/avalue.rs",
        "src/values/layout/constant.rs",
        "src/values/layout/heap.rs",
        "src/values/layout/mod.rs",
        "src/values/layout/pointer.rs",
        "src/values/layout/pointer_i32.rs",
        "src/values/layout/value.rs",
        "src/values/layout/value_captured.rs",
        "src/values/mod.rs",
        "src/values/owned.rs",
        "src/values/stack_guard.rs",
        "src/values/traits.rs",
        "src/values/types/any.rs",
        "src/values/types/bool.rs",
        "src/values/types/dict.rs",
        "src/values/types/enumeration.rs",
        "src/values/types/function.rs",
        "src/values/types/int.rs",
        "src/values/types/list.rs",
        "src/values/types/mod.rs",
        "src/values/types/none.rs",
        "src/values/types/range.rs",
        "src/values/types/record.rs",
        "src/values/types/string.rs",
        "src/values/types/structs.rs",
        "src/values/types/tuple.rs",
        "src/values/typing.rs",
        "src/values/unpack.rs",
    ],
    crate = None,
    crate_root = "src/lib.rs",
    edition = "2018",
    env = {
        "OUT_DIR": "$(location :grammar)/src",
    },
    features = [],
    mapped_srcs = {
    },
    named_deps = {
    },
    proc_macro = False,
    rustc_flags = [
        "-Aunused_braces",
        "-Wbare_trait_objects",
        "-Wellipsis_inclusive_range_patterns",
        "-Dnon_fmt_panics",
        "-Dunconditional_recursion",
    ],
    unittests = False,
    deps = [
        "//third-party/rust:annotate-snippets",
        "//third-party/rust:anyhow",
        "//third-party/rust:bumpalo",
        "//third-party/rust:derivative",
        "//third-party/rust:either",
        "//third-party/rust:hashbrown",
        "//third-party/rust:indexmap",
        "//third-party/rust:itertools",
        "//third-party/rust:lalrpop-util",
        "//third-party/rust:logos",
        "//third-party/rust:maplit",
        "//third-party/rust:once_cell",
        "//third-party/rust:paste",
        "//third-party/rust:regex",
        "//third-party/rust:rustyline",
        "//third-party/rust:serde",
        "//third-party/rust:static_assertions",
        "//third-party/rust:strsim",
        "//third-party/rust:textwrap",
        "//third-party/rust:thiserror",
        "//third-party/rust/gazebo/gazebo:gazebo",
        "//third-party/rust/starlark-rust/starlark_derive:starlark_derive",
    ],
)
# @generated
