# Default rustc flags added to all rules
rustc_flags = [
  "--cap-lints=allow", # we don't want 3rd-party builds breaking just because of some lint
]

# Parse Rust code to work out the precise set of source files for each crate
# This uses `srcfiles` which only works on Rust 2018 and without some macro constructions.
# It works in almost all cases, but you may need to have a fixups.toml adding extra srcs if
# it fails.
precise_srcs = true

# Possible patterns for license files - lots of packages have them without
# registering them in the Cargo metadata, or have more than the single file
# it allows. Just look in the top-level dir for now.
license_patterns = [
  "LICENSE*",
  "COPYING*",
  "UNLICENSE*",
]

# If a fixups.toml file is needed (eg, the package has a build.rs), then generate a template
# fixups.toml to be edited.
fixup_templates = true

# Emit Cargo pkg metadata into rules (experimental, not used)
emit_metadata = false

# Include an explicit public top-level target which depends on all other library targets,
# so that you can to a test/check build.
include_top_level = true

# Include targets for binary and cdylib-only packages (that is packages which can't directly
# be depended-on by Rust)
extra_top_levels = true

# Configuration for vendoring
[vendor]
# Exclude files listed in the .gitignore in this directory
gitignore_checksum_exclude = [".gitignore"]
# Additional globs to ignore (prefer .gitignore for consistentcy with source control)
checksum_exclude = []

# Configuration for rustsec auditing
[audit]
# Name of a package which is expected to always have an advisory to make sure the
# mechanism is working.
never_autofix = [
  "rustsec-example-crate", # never fix because this is a canary
]

# Platforms we want to support.
#
# A Reindeer platform is a collection of predicates, which are closely related to
# rustc/cargo's notion of a platform. If a conditional dependency matches against a
# platform's predicates, then it is included in the platform-specific dependencies
# in the rule.
#
# These same platforms and predicates are used in fixups.toml files, for platform-specific
# fixups (such as additional dependencies, extra sources, options, etc).
#
# Listed properties are a set of values, any of which can match a predicate. These
# match specific configurations of rustc, as shown with `rustc --target <TARGET> --print cfg`.
# Unlisted properties are "don't care" or "match anything"
#
# The platform key sets the name of the platform in `platform_deps`/`named_platform_deps`.
# If it is "DEFAULT" then the platform's dependencies are put into the normal
# `deps`/`named_deps`.

# x86_64-unknown-linux-gnu
[platform.linux-x86_64]
feature = [] # in case anyone is doing `cfg(feature = "foo")`, which never works
target_arch = ["x86_64"]
target_env = ["gnu"]
target_family = ["unix"]
target_os = ["linux"]
x86_64-unknown-linux-gnu = [] # true for a boolean test

[cargo]
# Directories for vendored directories always have version numbers (by default they
# only have versions if there's a name collision, such as multiple versions of the
# same package). This option can speed up `cargo vendor` when there are lots
# packages being managed.
versioned_dirs = true

# Configuration for generated BUCK file
[buck]
file_name = "BUCK"

# Rules used for various kinds of targets
# These rules don't directly correspond with BUCK rules - they have extra attributes
# such as per-platform settings. The intent is that you provide a set of macro definitions
# which resolve them to appropriate underlying rules suitable for your environment.
# (This may also work for Buck-like build systems such as Bazel.)
buildscript_genrule_args = "rust_buildscript_genrule_filter" # A genrule for rustc args from a build script
buildscript_genrule_srcs = "rust_buildscript_genrule_srcs" # A genrule for generated sources from a build script
cxx_library = "third_party_rust_cxx_library" # A C++ library (mostly for Rust -> C dependencies)
prebuilt_cxx_library = "third_party_rust_prebuilt_cxx_library" # A prebuilt library (mostly for Rust -> C dependencies)
rust_binary = "third_party_rust_binary" # A Rust executable
rust_library = "third_party_rust_library" # A plain Rust library

# Banner comment for the generated BUCK File.
generated_file_header = """
##
## \u0040generated by reindeer
## Do not edit by hand.
##
## See third-party/README.md for directions on how to update this.
##
"""

# Load the macros to which the rules above will resolve.
buckfile_imports = """
load(
    ":defs.bzl",
    "third_party_rust_library",
    "third_party_rust_binary",
    "third_party_rust_cxx_library",
    "third_party_rust_prebuilt_cxx_library",
    "rust_buildscript_genrule_filter",
    "rust_buildscript_genrule_srcs",
)

load("//antlir/bzl:oss_shim.bzl", "export_file", "python_binary")

export_file(name = "Cargo.lock")
export_file(name = "cargo_cfgs.awk")
export_file(name = "buildrs_rustc_flags.py")

python_binary(
    name = "download",
    srcs = ["download.py"],
    main_module = "third-party.rust.download",
    deps = [
        "//third-party/python:requests",
        "//third-party/python:toml",
    ],
)
"""
