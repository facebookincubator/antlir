# (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/bzl:build_defs.bzl", "export_file")
load("//antlir/bzl:third_party.bzl", "third_party")

# NOTE: this build script is similar to the one in public_tld
# but it uses the gcc-toolset-9-binutils linker which is 2.32.
# The default linker for c8 is 2.30 which has incompatible format for archives.
# This is required for libffi coming from TP2 which uses ld 2.32

oncall("antlir")

export_file(name = "00_configure")

third_party.build(
    name = "swtpm",
    src = third_party.source("swtpm"),
    compatible_with = [
        "//antlir/antlir2/os:centos8",
        "//antlir/antlir2/os:centos9",
    ],
    features = [
        feature.rpms_install(rpms = [
            # build deps
            "autoconf",
            "autoconf-archive",
            "expect",
            "file",
            "findutils",
            "gcc",
            "libtasn1-devel",  # required but not for swtpm binary (ok with shared here)
            "libtool",
            "make",
            "net-tools",
            "openssl-devel",
            "patch",
            "rpm",
            "socat",
            "tpm-tools",

            # static deps
            "glibc-static",
            "glib2-static",
            "pcre-static",
        ]),
        feature.rpms_install(
            subjects = select({
                "//antlir/antlir2/os:centos8": [
                    "gcc-toolset-9-binutils",
                    "python38",
                ],
                "//antlir/antlir2/os:centos9": [
                    "python3",
                ],
            }),
        ),
    ],
    script = third_party.script(
        build = """
cd src/swtpm
# swtpm doesnt support static linkage by itself, so convince it
make LDFLAGS="${LDFLAGS} -all-static" LIBS="-ldl"
        """,
        install = """
strip swtpm
make install
        """,
        patches = [":00_configure"],
        # TODO: Dynamically build the LDFLAGS + CLFAGS env vars based on the provided deps
        prepare = """
export CFLAGS="-B/opt/rh/gcc-toolset-9/root/bin \
    -I/third-party-build/deps/libffi/include \
    -I/third-party-build/deps/json-glib/include/json-glib-1.0 \
    -I/third-party-build/deps/libcrypto/include \
    -I/usr/include/glib-2.0 \
    -I/usr/lib64/glib-2.0/include \
    -I/third-party-build/deps/libtpms/include \
    -Wno-deprecated-declarations"
export LDFLAGS="-L/third-party-build/deps/libtpms/lib \
    -L/third-party-build/deps/libffi/lib/../lib64 \
    -L/third-party-build/deps/json-glib/lib64 \
    -L/third-party-build/deps/libcrypto/lib \
    -ldl -lpthread"

./autogen.sh --prefix="${OUTPUT}" --with-openssl --without-gnutls --without-selinux --without-cuse --without-seccomp
        """,
    ),
    visibility = [
        "//antlir/third-party/...",
        "//antlir/vm/...",
        "//third-party/antlir/...",
    ],
    deps = [
        third_party.library(
            "libffi",
        ),
        third_party.library(
            "json-glib",
            lib_path = "lib64",
        ),
        third_party.library("libtpms"),
        third_party.library("libcrypto"),
    ],
)
