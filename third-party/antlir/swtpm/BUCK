# (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

load("//antlir/bzl:third_party.bzl", "third_party")
load("//antlir/bzl/image/feature:defs.bzl", "feature")

# NOTE: this build script is similar to the one in public_tld
# but it uses the gcc-toolset-9-binutils linker which is 2.32.
# The default linker for c8 is 2.30 which has incompatible format for archives.
# This is required for libffi coming from TP2 which uses ld 2.32

oncall("twimage")

third_party.build(
    name = "swtpm",
    src = third_party.source("swtpm"),
    features = [
        feature.rpms_install([
            # build deps
            "gcc",
            "gcc-toolset-9-binutils",
            "autoconf",
            "autoconf-archive",
            "libtool",
            "make",
            "findutils",
            "net-tools",
            "tpm-tools",
            "expect",
            "socat",
            "python38",
            "openssl-devel",
            # static deps
            "glibc-static",
            "glib2-static",
            "pcre-static",
            "libtasn1-devel",  # required but seemingly unused (ok with shared here)
        ]),
    ],
    script = third_party.script(
        build = """
# swtpm doesnt support static linkage by itself, so convince it
make LDFLAGS="${LDFLAGS} -all-static"
        """,
        install = """
make install

# swtpm creates a root only folder to keep CA files, and it's not copyable
# from outside the container, since we don't need it, delete
rm -rf "${OUTPUT}/var"
        """,
        # TODO: Dynamically build the LDFLAGS + CLFAGS env vars based on the provided deps
        prepare = """
export CFLAGS="-B/opt/rh/gcc-toolset-9/root/bin -I/third-party-build/deps/libffi/include -I/third-party-build/deps/json-glib/include/json-glib-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/third-party-build/deps/libtpms/include"
export LDFLAGS="-L/third-party-build/deps/libtpms/lib -L/third-party-build/deps/libffi/lib/../lib64 -L/third-party-build/deps/json-glib/lib64 -lcrypto -ldl -lpthread"

./autogen.sh --prefix="${OUTPUT}" --with-openssl --without-gnutls --without-selinux --without-cuse --without-seccomp
        """,
    ),
    visibility = ["//antlir/vm/..."],
    deps = [
        third_party.library(
            "libffi",
        ),
        third_party.library(
            "json-glib",
            lib_path = "lib64",
        ),
        third_party.library("libtpms"),
    ],
)
