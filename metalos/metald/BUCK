load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//metalos:defs.bzl", "rust_binary")
# @oss-disable: load("//metalos/metald/src/facebook:deps.bzl", "deps") 

rust_binary(
    name = "metald",
    srcs = glob(["src/**/*.rs"]),
    named_deps = {
        "plain_systemd": "systemd",
    },
    deps = [
        "anyhow",
        "async-trait",
        "clap",
        "slog",
        "slog_glog_fmt",
        "//common/rust/shed/fbinit:fbinit",
        "//common/rust/shed/fbinit:fbinit-tokio",
        "//metalos/host_configs/lifecycle:lifecycle",
        "//metalos/host_configs/rust:metalos_host_configs",
        "//metalos/host_configs:Metalctl-metadata-sys",
        "//metalos/host_configs:api-rust",
        "//metalos/lib/package_download:package_download",
        "//metalos/lib/service:service",
        "//metalos/lib/state:state",
        "//metalos/lib/systemd:systemd",
        "//metalos/lib/thrift_wrapper:thrift_wrapper",
        "thiserror",
        "//common/rust/aclchecker:aclchecker",
        "//common/rust/fbwhoami:fbwhoami",
        "//common/rust/identity:identity",
        "//common/rust/srserver:srserver",
        "//metalos/metald/src/lib/acl_checker:acl_checker",
        "//metalos/metald/src/lib/permission_checker:permission_checker",
    ] + (
        # @oss-disable: deps 
        # @oss-enable []
    ),
)

# TODO(vmagro) this will also be packaged as a native service, but for now we
# need it in the rootfs ASAP
feature.new(
    name = "features",
    features = [
        systemd.install_unit("metald.service"),
        systemd.install_unit("metald.socket"),
        systemd.enable_unit("metald.socket"),
        feature.install_buck_runnable(
            ":metald",
            "/usr/lib/metalos/metald",
        ),
    ],
    visibility = ["//metalos/os/..."],
)
