load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//metalos:defs.bzl", "rust_binary")
load("//metalos/bzl/service:service.bzl", "native_service")
load("//metalos/bzl/service:service.shape.bzl", "cmd_t", "dependency_t", "exec_t", "restart_settings_t", "service_t")
# @oss-disable: load("//metalos/metald/src/facebook:deps.bzl", "deps") 

rust_binary(
    name = "metald",
    srcs = glob(["src/**/*.rs"]),
    named_deps = {
        "plain_systemd": "systemd",
    },
    deps = [
        "anyhow",
        "async-trait",
        "clap",
        "slog",
        "slog_glog_fmt",
        "//common/rust/shed/fbinit:fbinit",
        "//common/rust/shed/fbinit:fbinit-tokio",
        "//metalos/host_configs/lifecycle:lifecycle",
        "//metalos/host_configs/rust:metalos_host_configs",
        "//metalos/host_configs:Metalctl-metadata-sys",
        "//metalos/host_configs:api-rust",
        "//metalos/lib/package_download:package_download",
        "//metalos/lib/service:service",
        "//metalos/lib/state:state",
        "//metalos/lib/systemd:systemd",
        "//metalos/lib/thrift_wrapper:thrift_wrapper",
        "thiserror",
        "//common/rust/aclchecker:aclchecker",
        "//common/rust/fbwhoami:fbwhoami",
        "//common/rust/identity:identity",
        "//common/rust/srserver:srserver",
        "//metalos/metald/src/lib/acl_checker:acl_checker",
        "//metalos/metald/src/lib/permission_checker:permission_checker",
        "//metalos/metald/src/lib/fallback_identity_checker:fallback_identity_checker",
    ] + (
        # @oss-disable: deps 
        # @oss-enable []
    ),
)

feature.new(
    name = "features",
    features = [
        # metald.service still needed as placeholder to allow metald.socket to activate.
        # The native_service version will take precedence.
        systemd.install_unit("metalos.metald.service"),
        systemd.install_unit("metalos.metald.socket"),
        systemd.enable_unit("metalos.metald.socket"),
        feature.install_buck_runnable(
            ":metald",
            "/usr/lib/metalos/metald",
        ),
    ],
    visibility = ["//metalos/os/..."],
)

native_service(
    extra_features = [
        feature.ensure_subdirs_exist(
            "/usr/lib/",
            "metald/metald_allowed_identities",
        ),
        feature.install(
            "src/facebook/metald_allowed_identities",
            "/usr/lib/metald/metald_allowed_identities/default",
            mode = 0o644,
        ),
    ],
    service = service_t(
        name = "metalos.metald",
        dependencies = [
            dependency_t(
                mode = "after-only",
                unit = "network-online.target",
            ),
            dependency_t(
                mode = "after-only",
                unit = "metalos.metald.socket",
            ),
        ],
        exec_info = exec_t(
            restart = restart_settings_t(
                mode = "always",
            ),
            run = [
                cmd_t(
                    args = [
                        "--systemd-socket",
                    ],
                    binary = "//metalos/metald:metald",
                ),
            ],
            service_type = "simple",
        ),
    ),
    visibility = ["//metalos/os/..."],
)
