load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//metalos:defs.bzl", "rust_library")
load("//metalos:metalos_tests.shape.bzl", "container_unittest_opts_t", "unittest_opts_t")

image.layer(
    name = "test-layer",
    parent_layer = "//metalos/os:metalos",
    features = [
        # otherwise we have to wait for this to timeout
        systemd.mask_units(["systemd-networkd-wait-online.service"]),
    ],
)

rust_library(
    name = "systemd",
    srcs = glob(["src/**/*.rs"]),
    test_deps = [
        "byteorder",
        "itertools",
        "os_pipe",
        "slog_glog_fmt",
    ],
    unittest_opts = shape.new(
        unittest_opts_t,
        container = shape.new(
            container_unittest_opts_t,
            boot = True,
            layer = ":test-layer",
        ),
    ),
    unittests = [
        "plain",
        "container",
    ],
    visibility = [
        "PUBLIC",
    ],
    deps = [
        "anyhow",
        "async-trait",
        "bitflags",
        "derive_builder",
        "futures",
        "maplit",
        "nix",
        "once_cell",
        "regex",
        "serde",
        "slog",
        "thiserror",
        "tokio",
        "tokio-stream",
        "uuid",
        "zbus",
        "zvariant",
        ":macros",
    ],
)

rust_library(
    name = "macros",
    srcs = ["macros.rs"],
    crate = "systemd_macros",
    proc_macro = True,
    unittests = False,
    deps = [
        "convert_case",
        "paste",
        "proc-macro2",
        "quote",
        "syn",
    ],
)
