load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "thrift_library")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//metalos:defs.bzl", "default_test_layer", "rust_library")
load("//metalos:metalos_tests.shape.bzl", "container_unittest_opts_t", "unittest_opts_t")

rust_library(
    name = "service",
    srcs = glob(["src/*.rs"]),
    test_deps = [
        "pretty_assertions",
        "slog_glog_fmt",
    ],
    unittest_opts = shape.new(
        unittest_opts_t,
        container = shape.new(
            container_unittest_opts_t,
            boot = True,
            layer = "//metalos/lib/service:test-layer",
        ),
    ),
    unittests = [
        "plain",
        "container",
    ],
    deps = [
        "anyhow",
        "futures",
        "itertools",
        "maplit",
        "nix",
        "serde",
        "serde_json",
        "serde_with",
        "slog",
        "systemd-parser",
        "uuid",
        "zbus",
        "zvariant",
        ":service_config_generator_if-rust",
        "//metalos/lib/generator:generator",
        "//metalos/lib/metalos_paths:metalos_paths",
        "//metalos/lib/serde_systemd:serde_systemd",
        "//metalos/lib/state:state",
        "//metalos/lib/systemd:systemd",
    ],
)

thrift_library(
    name = "service_config_generator_if",
    languages = ["rust"],
    thrift_srcs = {"service_config_generator.thrift": None},
)

image.layer(
    name = "test-layer",
    parent_layer = default_test_layer(),
    features = [
        image.layer_mount("//metalos/lib/service/tests/demo_service:layer", "/demo-service"),
        systemd.install_dropin("snapshot-demo-service.conf", "snapshot-test-control.service"),
    ],
    visibility = ["//metalos/lib/service/..."],
)
