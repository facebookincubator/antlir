load("@bazel_skylib//lib:paths.bzl", "paths")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "third_party", "thrift_library")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//metalos:defs.bzl", "rust_binary", "rust_library")

# @oss-disable: oss = False 

oss = True # @oss-enable

# Introduce a buckconfig option that will be used only at query time so that we
# can control the target graph before running shipit at all.
# If this becomes used by more than this one TARGETS file (and it really should
# not), it should be extracted to REPO_CFG.
oss_ci = read_config("antlir", "oss-ci-query", "") != ""

thrift_library(
    name = "host",
    languages = ["rust"],
    rust_crate_name = "host",
    rust_deps = ["//metalos/metalos_macros:metalos_macros"] + third_party.libraries(
        [
            "derive_builder",
            "paste",
            "starlark",
            "starlark_derive",
        ],
        platform = "rust",
    ),
    rust_features = [
        # @oss-disable: "facebook", 
    ],
    rust_include_srcs = ["host_thrift.rs"],
    rust_unittests = True,
    thrift_rust_options = "serde",
    thrift_srcs = {"host.thrift": None},
    deps = [
        "//metalos/host_configs/facebook:host-facebook",
    ] if not (oss or oss_ci) else [],
)

rust_library(
    name = "evalctx",
    srcs = glob(["evalctx/**/*.rs"]),
    features =
        ["facebook"] if (not oss and not oss_ci) else [],
    test_srcs = ["generators/hostname.star"],
    deps = [
        "anyhow",
        "derive_builder",
        "derive_more",
        "handlebars",
        "once_cell",
        "paste",
        "serde",
        "serde_json",
        "starlark",
        "starlark_derive",
        "xattr",
        ":host-rust",
    ],
)

# This binary is useful to manually check what a host config generator would
# produce for a given host input, without having to boot a physical server or go
# through vmtest
# Usage:
#   construct a host json input (by hand or download it from the proxy service in facebook/service)
#   buck run //metalos/host_configs:evaluator -- host.json path/to/generator.star
rust_binary(
    name = "evaluator",
    srcs = glob(["evaluator/**/*.rs"]),
    visibility = [],
    deps = [
        "anyhow",
        "serde_json",
        "structopt",
        ":evalctx",
    ],
)

feature.new(
    name = "generators",
    features = [
        image.ensure_subdirs_exist("/usr/lib/metalos", "generators"),
    ] + [
        feature.install(
            generator,
            "/usr/lib/metalos/generators/{}".format(paths.basename(generator)),
        )
        for generator in glob(["generators/*.star"])
    ],
    visibility = ["//metalos/..."],
)
