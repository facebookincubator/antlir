# @noautodeps

load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "export_file")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/genrule/extractor:extract.bzl", "extract")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:defs.bzl", "package")
load("//antlir/bzl/linux:busybox.bzl", "DEFAULT_APPLETS")
load("//antlir/bzl/linux:defs.bzl", "linux")
load(":defs.bzl", "build_initrd_base")

export_file(
    name = "debug-shell.conf",
)

export_file(
    name = "emergency.conf",
)

export_file(
    name = "group",
)

export_file(
    name = "passwd",
)

build_initrd_base(
    name = "base-systemd",
    # Note: ideally we should be able to derive this from the
    # `source` flavor, but that won't be possible until fully migrated
    # to buck2.
    flavor = flavor_helpers.get_antlir_linux_flavor(),
    source = REPO_CFG.artifact["metalos.layer.base"],
    visibility = [
        "//metalos/bootloader/...",
        "//metalos/imaging_initrd/...",
        "//ti/platform/edgeos/...",
    ],
)

networking = [
    # Explicitly enable systemd-networkd to configure the network links
    # early in boot
    systemd.enable_unit("systemd-networkd.service"),
    systemd.enable_unit("systemd-networkd-wait-online.service"),
    # There is some opportunity to consolidate with the MetalOS root network
    # unit, but for right now we only want to use SLAAC in the initrd.
    feature.install("units/primary.network", "/usr/lib/systemd/network/50-primary.network"),
]

image.layer(
    name = "busybox",
    flavor = flavor_helpers.get_antlir_linux_flavor(),
    features = [
        feature.rpms_install([
            "busybox",
        ]),
    ],
    visibility = ["//metalos/initrd/..."],
)

# things we expect to exist in all the metalos related initrds
image.layer(
    name = "initrd-common",
    parent_layer = ":base-systemd",
    features = [
        linux.busybox.install(
            src = ":busybox",
            src_path = "/usr/sbin/busybox",
            applets = DEFAULT_APPLETS,
        ),
        networking,
        # The metalos generator will rewrite the default target to
        # initrd.target, so explicitly set emergency.target as the default in
        # the image so that the boot clearly fails if the generator fails during
        # early boot for any reason
        systemd.set_default_target("emergency.target"),
        feature.ensure_subdirs_exist("/usr/lib", "tmpfiles.d"),
        feature.install("units/metalos.tmpfiles.conf", "/usr/lib/tmpfiles.d/metalos.conf"),
        # @oss-disable: "//metalos/initrd/facebook:features", 
    ],
    visibility = [
        "//antlir/vm/...",
        "//metalos/...",
    ],
)

image.layer(
    name = "with-initrd-bins",
    parent_layer = REPO_CFG.artifact["metalos.layer.base"],
    features = [
        feature.install(
            "//metalos/initrd/metalinit:metalinit",
            "/usr/bin/metalinit",
            mode = "a+rx",
        ),
        feature.install(
            "//metalos/initrd/network_generator:network_generator",
            "/usr/lib/systemd/system-generators/metalos-network-generator",
            mode = "a+rx",
        ),
    ],
)

# Kernel-agnostic base initrd
image.layer(
    name = "initrd",
    parent_layer = ":initrd-common",
    features = [
        systemd.install_unit("units/metalos-init.service"),
        systemd.enable_unit("metalos-init.service", "initrd-switch-root.target", "requires"),
        extract.extract(
            binaries = [
                "/usr/lib/systemd/system-generators/metalos-network-generator",
                "/usr/bin/metalinit",
            ],
            dest = "/",
            source = ":with-initrd-bins",
        ),
    ],
    visibility = [
        "//metalos/...",
        "//scripts/dschatzberg/vm:",
    ],
)

package.new(
    name = "initrd.cpio.gz",
    format = "cpio.gz",
    layer = ":initrd",
    visibility = ["PUBLIC"],
)
