# @noautodeps

load("@bazel_skylib//lib:paths.bzl", "paths")
load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:kernel_shim.bzl", "kernels")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:btrfs.bzl", "btrfs")
load("//antlir/bzl/image/package:defs.bzl", "package")
load("//antlir/linux/vm/network:defs.bzl", "network")
load("//metalos:defs.bzl", "rust_binary")
load("//metalos/disk:disk.bzl", "disk")
load("//metalos/host_configs/tests:host.bzl", "host_config")
load(":switch_root.bzl", "switch_root_test")

TEST_KERNEL = kernels.default

host_config(
    name = "host-config",
    host_config = {
        "boot_config": {
            "deployment_specific": {"metalos": {}},
            "initrd": {
                "format": 2,
                "id": {"uuid": "deadbeefdeadbeefdeadbeefdeadbeef"},
                "kind": 3,
                "name": "metalos.initrd",
                "override_uri": "http://vmtest-host:8000/package/metalos.initrd:deadbeefdeadbeefdeadbeefdeadbeef",
            },
            "kernel": {
                "cmdline": "console=ttyS0,57600 systemd.unified_cgroup_hierarchy=1 selinux=0 cgroup_no_v1=all root=LABEL=/ macaddress=00:00:00:00:00:01",
                "pkg": {
                    "format": 1,
                    "id": {"uuid": "deadbeefdeadbeefdeadbeefdeadbeef"},
                    "kind": 2,
                    "name": "kernel." + TEST_KERNEL.uname,
                    "override_uri": "http://vmtest-host:8000/package/kernel.{}:deadbeefdeadbeefdeadbeefdeadbeef".format(TEST_KERNEL.uname),
                },
            },
            "rootfs": {
                "format": 1,
                "id": {"uuid": "deadbeefdeadbeefdeadbeefdeadbeef"},
                "kind": 1,
                "name": "metalos",
                "override_uri": "http://vmtest-host:8000/package/metalos:deadbeefdeadbeefdeadbeefdeadbeef",
            },
        },
        "provisioning_config": {
            "deployment_specific": {"metalos": {}},
            "event_backend": {
                "base_uri": "http://vmtest-host:8000/send-event",
                "source": {
                    "asset_id": 1,
                },
            },
            "gpt_root_disk": {
                "format": 2,
                "id": {"uuid": "deadbeefdeadbeefdeadbeefdeadbeef"},
                "kind": 7,
                "name": "metalos.gpt-root-disk",
                "override_uri": "http://vmtest-host:8000/package/metalos.gpt-root-disk:deadbeefdeadbeefdeadbeefdeadbeef",
            },
            "identity": {
                "hostname": "vm00.abc00.facebook.com",
                "id": "1",
                "network": {
                    "interfaces": [
                        {
                            "addrs": ["fd00::2/64"],
                            "essential": True,
                            "mac": "00:00:00:00:00:01",
                            "name": "eth0",
                        },
                    ],
                    "primary_interface": {
                        "addrs": ["fd00::2/64"],
                        "essential": True,
                        "mac": "00:00:00:00:00:01",
                        "name": "eth0",
                    },
                },
            },
            "imaging_initrd": {
                "format": 2,
                "id": {"uuid": "deadbeefdeadbeefdeadbeefdeadbeef"},
                "kind": 4,
                "name": "metalos.imaging-initrd",
                "override_uri": None,
            },
        },
        "runtime_config": {
            "deployment_specific": {"metalos": {}},
        },
    },
)

test_kernel_modules = [
    image.ensure_subdirs_exist("/usr/lib", "modules"),
    feature.install(
        TEST_KERNEL.derived_targets.disk_boot_modules,
        paths.join(
            "/usr/lib/modules",
            TEST_KERNEL.uname,
        ),
    ),
]

# This needs to be as close as possible the prod initrd, with only the bare
# minimum of extra features to get baseline functionality in vmtest. Tests that
# exercise this initrd are run in the post-switch-root image, so this can be as
# close to the base as possible.
image.layer(
    name = "switch-root-initrd",
    parent_layer = "//metalos/initrd:initrd",
    features = [
        feature.remove("/etc/resolv.conf"),
        network.host(),
        # don't use the full test-kernel initrd, but we do need the modules
        test_kernel_modules,
    ],
)

package.new(
    name = "switch-root-initrd.cpio.gz",
    layer = ":switch-root-initrd",
    format = "cpio.gz",
    visibility = [],
)

package.new(
    name = "metalos-vmtest.sendstream.zst",
    layer = "//metalos/os/vm:base",
    format = "sendstream.zst",
)

image.layer(
    name = "empty-layer",
    flavor = REPO_CFG.antlir_linux_flavor,
)

image.layer(
    name = "control-with-config",
    parent_layer = "//metalos/disk:control",
    features = [
        feature.install(
            "//metalos/initrd/vmtest:host-config",
            "/run/state/metalos/metalos_host_configs::host::HostConfig-current.json",
        ),
        feature.install(
            "//metalos/initrd/vmtest:host-config-boot_config",
            "/run/state/metalos/metalos_host_configs::boot_config::BootConfig-staged.json",
        ),
    ],
)

# We need to build a new gpt image for the switch-root
# test so that the image is sized correctly. Otherwise we
# keep the image minimal and expand at runtime which we don't
# do for existing boots
btrfs.new(
    name = "rootdisk.btrfs",
    opts = btrfs.opts.new(
        subvols = {
            "/volume": btrfs.opts.subvol.new(
                layer = ":control-with-config",
                writable = True,
            ),
        },
        default_subvol = "/volume",
        free_mb = 4864,  # 4.75GB (HUGE!)
        loopback_opts = image.opts(
            label = "/",
        ),
    ),
)

image.layer(
    name = "control-with-config-and-initrd",
    parent_layer = ":control-with-config",
    features = [
        feature.install("//metalos/initrd:initrd.cpio.gz", "/image/initrd/metalos.initrd:deadbeefdeadbeefdeadbeefdeadbeef"),
    ],
)

btrfs.new(
    name = "full-rootdisk.btrfs",
    opts = btrfs.opts.new(
        default_subvol = "/volume",
        subvols = {
            "/volume": btrfs.opts.subvol.new(
                layer = ":control-with-config-and-initrd",
                writable = True,
            ),
            "/volume/image/kernel/kernel." + TEST_KERNEL.uname + ":deadbeefdeadbeefdeadbeefdeadbeef": btrfs.opts.subvol.new(
                layer = TEST_KERNEL.derived_targets.image,
            ),
            "/volume/image/rootfs/metalos:deadbeefdeadbeefdeadbeefdeadbeef": btrfs.opts.subvol.new(
                layer = "//metalos/os/vm:base",
            ),
        },
        free_mb = 3072,  # 3G (HUGE!)
        loopback_opts = image.opts(
            label = "/",
        ),
    ),
    visibility = [],
    antlir_rule = "user-internal",
)

disk(
    name = "empty-metalos-gpt-image",
    efi_vfat = "//metalos/disk:empty-efi.vfat",
    root_btrfs = ":rootdisk.btrfs",
)

# disk with images pre-compiled into it for much faster test execution times
disk(
    name = "metalos-gpt-image",
    efi_vfat = "//metalos/disk:empty-efi.vfat",
    root_btrfs = ":full-rootdisk.btrfs",
)

# full integration test using an empty disk image, so that images must be
# downloaded to disk dynamically
switch_root_test(
    name = "switch-root-integration",
    disk = ":empty-metalos-gpt-image",
    images_sidecar = True,
    kernel = TEST_KERNEL,
)

switch_root_test(
    name = "switch-root-cached",
    disk = ":metalos-gpt-image",
    kernel = TEST_KERNEL,
)

# this commonly breaks since nvme is a module that must be loaded
switch_root_test(
    name = "switch-root-cached-nvme",
    disk = ":metalos-gpt-image",
    disk_interface = "nvme",
    kernel = TEST_KERNEL,
)

rust_binary(
    name = "images-sidecar",
    srcs = ["images_sidecar.rs"],
    crate_root = "images_sidecar.rs",
    deps = [
        "anyhow",
        "tokio",
        "warp",
    ],
)

package.new(
    name = "kernel.{}.sendstream.zst".format(TEST_KERNEL.uname),
    layer = TEST_KERNEL.derived_targets.image,
    format = "sendstream.zst",
)

buck_genrule(
    name = "image_packages",
    out = ".",
    cmd = """
        zstd -i $(location //metalos/disk:metalos-gpt-image) -o $OUT/metalos.gpt-root-disk:deadbeefdeadbeefdeadbeefdeadbeef
        cp --reflink=auto $(location :metalos-vmtest.sendstream.zst) $OUT/metalos:deadbeefdeadbeefdeadbeefdeadbeef
        cp --reflink=auto $(location :kernel.{}.sendstream.zst) $OUT/kernel.{}:deadbeefdeadbeefdeadbeefdeadbeef
        cp --reflink=auto $(location //metalos/initrd:initrd.cpio.gz) $OUT/metalos.initrd:deadbeefdeadbeefdeadbeefdeadbeef
    """.format(
        TEST_KERNEL.uname,
        TEST_KERNEL.uname,
    ),
)
