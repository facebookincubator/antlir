# @noautodeps

load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "kernel_get", "third_party")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/genrule/extractor:extract.bzl", "extract")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:defs.bzl", "package")
load("//antlir/bzl/linux:defs.bzl", "linux")
load("//antlir/linux/vm/console:defs.bzl", "console")
load("//antlir/linux/vm/generator:defs.bzl", "generator")
load("//antlir/linux/vm/network:defs.bzl", "network")
load("//antlir/linux/vm/notify:defs.bzl", "notify")
load("//antlir/linux/vm/ssh:defs.bzl", "ssh")
load("//antlir/vm/bzl:defs.bzl", "vm")
load("//antlir/vm/bzl:initrd.bzl", "initrd")
load("//metalos:defs.bzl", "rust_binary")
load("//metalos/disk:disk.bzl", "build_root_disk")
load("//metalos/host_configs/tests:host.bzl", "host_config")

binaries = extract.extract(
    binaries = [
        "/usr/sbin/dropbear",
        "/usr/bin/dropbearkey",
        # this is unlikely to be useful in the base initrd, so keep it here in
        # vmtest-land unless anything changes
        "/usr/bin/systemd-run",
    ],
    dest = "/",
    source = "//metalos/initrd/debug:debug-deps",
)

ssh_server = [
    image.ensure_dirs_exist("/root"),
    ssh.test_only_login(),
]

par_support = feature.install(
    "bash",
    "/usr/bin/bash",
    mode = "a+rx",
)

host_config(
    name = "host-config",
    host_config = {
        "runtime_config": {
            "images": {
                "rootfs": {
                    "id": "1",
                    "kind": 1,
                    "name": "metalos",
                },
            },
        },
    },
)

# Generic features that are needed to support vmtests that _stay_ in the
# initrd, meant to test the initrd itself.
image.layer(
    name = "initrd-vmtest",
    features = [
        linux.filesystem.install(),
        # shared features straight from vmtest
        console.autologin(),
        generator.mounts(),
        network.host(),
        par_support,
        ssh_server,
        notify.install(),
        # initrd-specific things below:
        binaries,
        feature.install("metalctl.toml", "/etc/metalctl.toml"),
        # This is just appended to the base initrd, so make sure all the
        # directories that are needed get created
        image.ensure_subdirs_exist("/usr/lib", "systemd"),
        image.ensure_subdirs_exist("/usr/lib/systemd", "system"),
        image.ensure_subdirs_exist("/usr/lib/systemd", "system-generators"),
        image.ensure_subdirs_exist("/usr/lib/systemd", "network"),
        image.ensure_subdirs_exist("/usr/lib", "udev/rules.d"),
        image.ensure_dirs_exist("/etc/systemd/system"),
        # Some fixups for vmtest features in the limited initrd environment
        feature.install("udev.rules", "/usr/lib/udev/rules.d/50-vmtest.rules"),
        systemd.install_dropin("after-network.conf", "sshd.service"),
        # We want to stay in the initrd, so mask out the units that switch-root
        # into the base os
        systemd.mask_units([
            # debug-shell.service is always enabled in the initrd, but prevents
            # initrd.target from being reached. Debugging for vmtest should be
            # using ssh anyway unless in extra broken circumstances when
            # this can just be temporarily unmasked.
            "debug-shell.service",
            "initrd-cleanup.service",
            "initrd-parse-etc.service",
            "initrd-switch-root.service",
        ]),
        image.ensure_subdirs_exist("/", "test"),
        feature.install(":host-config", "/test/fake-host-config.json"),
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
)

package.new(
    name = "initrd-vmtest--append.cpio.gz",
    format = "cpio.gz",
    layer = ":initrd-vmtest",
    visibility = [],
)

# Create the default Antlir Linux initrd for this test kernel.
# This is composed of the base initrd and any kernel modules required to boot,
# as well as some basic setup for the vmtest VM environment
TEST_KERNEL = kernel_get.default

initrd(kernel = TEST_KERNEL)

# This mimics how production will actually work, a base initrd package
# concatenated with a kernel-specific cpio package containing modules followed
# by a third cpio archive with vmtest features
buck_genrule(
    name = "vmtest-initrd.cpio.gz",
    out = "initrd.cpio.gz",
    cmd = "cat $(location :{}-initrd-debug) $(location :initrd-vmtest--append.cpio.gz) > $OUT".format(TEST_KERNEL.uname),
)

vm.rust_unittest(
    name = "boots",
    vm_opts = vm.types.opts.new(
        initrd = ":vmtest-initrd.cpio.gz",
        kernel = TEST_KERNEL,
    ),
    srcs = ["test_boots.rs"],
    crate_root = "test_boots.rs",
)

vm.rust_unittest(
    name = "slaac",
    vm_opts = vm.types.opts.new(
        initrd = ":vmtest-initrd.cpio.gz",
        kernel = TEST_KERNEL,
        append = [
            "macaddress=11:22:33:44:55:66",
        ],
    ),
    srcs = ["test_slaac.rs"],
    crate_root = "test_slaac.rs",
    deps = [
        third_party.library(
            name,
            platform = "rust",
        )
        for name in [
            "nix",
        ]
    ],
    # TODO(vmagro): re-enable this when the container runtime environment is
    # done and the sidecars can reliably run on Sandcastle
    tags = ["local_only"],
)

# This needs to be as close as possible the prod initrd, with only the bare
# minimum of extra features to get baseline functionality in vmtest. Tests that
# exercise this initrd are run in the post-switch-root image, so this can be as
# close to the base as possible.
image.layer(
    name = "switch-root-initrd",
    parent_layer = "//metalos/initrd:base",
    features = [
        image.ensure_subdirs_exist("/etc", "systemd/system"),
        # to avoid having to unmount this when switch-rooting, just don't mount
        # it in the first place - it should be mounted later by the generator
        # in the root fs if required
        systemd.mask_units([systemd.escape(
            "/rootdisk/usr/lib/modules/{}.mount".format(TEST_KERNEL.uname),
            path = True,
        )]),
        systemd.enable_unit("systemd-modules-load.service", "initrd-switch-root.target"),
        # the default kernel-specific vm initrd includes this unit to
        # switch-root into /sysroot, which we don't want for MetalOS
        systemd.mask_units(["initrd-switch-root.service"]),
        network.host(),
        image.ensure_subdirs_exist("/", "test"),
        feature.install(":host-config", "/test/fake-host-config.json"),
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
)

package.new(
    name = "switch-root-initrd-base.cpio.gz",
    layer = ":switch-root-initrd",
    format = "cpio.gz",
    visibility = [],
)

buck_genrule(
    name = "switch-root-initrd.cpio.gz",
    out = "initrd.cpio.gz",
    cmd = "cat $(location :{}-initrd) $(location :switch-root-initrd-base.cpio.gz) > $OUT".format(TEST_KERNEL.uname),
)

image.layer(
    name = "metalos-vmtest",
    parent_layer = REPO_CFG.artifact["metalos.layer.base"],
    features = [
        ssh.test_only_login(),
        console.autologin(),
        generator.mounts(),
        feature.remove("/etc/hosts"),
        network.host(),
        notify.install(),
        # Technically, sshd.service is already enabled in the base metalos
        # image, but this indicates that in the vmtest use-case, sshd _is_ the
        # workload.
        systemd.enable_unit("sshd.service", "workload.target"),
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
)

package.new(
    name = "metalos-vmtest.sendstream.zst",
    layer = ":metalos-vmtest",
    format = "sendstream.zst",
)

image.layer(
    name = "empty-layer",
    flavor = REPO_CFG.antlir_linux_flavor,
)

# We need to build a new gpt image for the switch-root
# test so that the image is sized correctly. Otherwise we
# keep the image minimal and expand at runtime which we don't
# do for existing boots
build_root_disk(
    name = "metalos-gpt-image",
    efi_fat_size = 16,
    efi_layer_name = "empty-layer-boot-or-efi",
    root_size_mb = 1024 * 2,
)

vm.rust_unittest(
    name = "switch-root",
    vm_opts = vm.types.opts.new(
        initrd = ":switch-root-initrd.cpio.gz",
        kernel = TEST_KERNEL,
        append = [
            "metalos.package-format-uri=http://vmtest-host:8000/package/{package}",
            "metalos.host-config-uri=file:///test/fake-host-config.json",
            "rd.systemd.journald.forward_to_console=1",
        ],
        runtime = vm.types.runtime.new(
            sidecar_services = ["$(exe :images-sidecar) $(location :image_packages)"],
        ),
        disk = vm.types.disk.new(
            package = ":metalos-gpt-image",
        ),
    ),
    timeout_secs = 600,
    srcs = ["test_switch_root.rs"],
    crate_root = "test_switch_root.rs",
    # TODO(vmagro): re-enable this when the container runtime environment is
    # done and the sidecars can reliably run on Sandcastle
    tags = ["local_only"],
)

vm.rust_unittest(
    name = "switch-root-reimage",
    vm_opts = vm.types.opts.new(
        initrd = ":switch-root-initrd.cpio.gz",
        kernel = TEST_KERNEL,
        append = [
            "metalos.package-format-uri=http://vmtest-host:8000/package/{package}",
            # this doesn't actually serve anything (yet), but we need to pass
            # something on the cmdline
            "metalos.host-config-uri=file:///test/fake-host-config.json",
            "metalos.write-root-disk-package=metalos_root:1",
            "rd.systemd.journald.forward_to_console=1",
        ],
        runtime = vm.types.runtime.new(
            sidecar_services = ["$(exe :images-sidecar) $(location :image_packages)"],
        ),
        disk = vm.types.disk.new(
            layer = ":empty-layer",
            layer_size_mb = 1024 * 3,
            # because this isn't actually the partition we want to mount we give this a
            # label that isn't / and then still mount / which should find the newly
            # imaged partition
            layer_label = "empty_root_disk",
        ),
        root_label = "/",
    ),
    # unfortunately this test is REAL slow because it takes so long to download
    # the two images and write them to disk
    timeout_secs = 600,
    srcs = ["test_switch_root.rs"],
    crate_root = "test_switch_root.rs",
    # TODO(vmagro): re-enable this when the container runtime environment is
    # done and the sidecars can reliably run on Sandcastle
    tags = ["local_only"],
)

rust_binary(
    name = "images-sidecar",
    srcs = ["images_sidecar.rs"],
    crate_root = "images_sidecar.rs",
    deps = [
        "anyhow",
        "tokio",
        "warp",
    ],
)

buck_genrule(
    name = "image_packages",
    out = ".",
    cmd = """
        cp --reflink=auto $(location :metalos-vmtest.sendstream.zst) $OUT/metalos:1
        zstd -i $(location //metalos/disk:metalos-gpt-image) -o $OUT/metalos_root:1
    """,
)

vm.rust_unittest(
    name = "images",
    vm_opts = vm.types.opts.new(
        initrd = ":vmtest-initrd.cpio.gz",
        kernel = TEST_KERNEL,
        append = [
            "metalos.host-config-uri=file:///test/fake-host-config.json",
            "rd.systemd.journald.forward_to_console=1",
        ],
        runtime = vm.types.runtime.new(
            sidecar_services = [
                "$(exe :images-sidecar) $(location :image_packages)",
            ],
        ),
        disk = vm.types.disk.new(
            layer = ":root-disk-layer",
            layer_size_mb = 2048,
        ),
    ),
    deps = [
        third_party.library(
            name,
            platform = "rust",
        )
        for name in [
            "anyhow",
        ]
    ],
    srcs = ["test_images.rs"],
    crate_root = "test_images.rs",
)
