# @noautodeps

load("@bazel_skylib//lib:new_sets.bzl", "sets")
load("@bazel_skylib//lib:paths.bzl", "paths")
load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "kernel_get")
load("//antlir/bzl:systemd.bzl", "systemd", SYSTEMD_PROVIDER_ROOT = "PROVIDER_ROOT")
load("//antlir/bzl/genrule/extractor:extract.bzl", "extract")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:defs.bzl", "package")
load("//antlir/bzl/linux:busybox.bzl", "DEFAULT_APPLETS")
load("//antlir/bzl/linux:defs.bzl", "linux")

VISIBILITY = [
    "//metalos/initrd/...",
    "//ti/platform/edgeos/...",
]

image.layer(
    name = "debug-deps",
    parent_layer = "//metalos/os:metalos",
    features = [
        image.rpms_install([
            "busybox",
            "strace",
            "dropbear",
        ]),
    ],
    visibility = ["//metalos/initrd/..."],
)

# Some systemd units and binaries that are only useful for debugging and not
# during normal boots
feature.new(
    name = "systemd-debug",
    features = [
        # We don't have to use the extractor here, since the libraries loaded by
        # the systemd binaries that we want will already be present in the base
        # initrd.
        image.clone(":debug-deps", "/usr/bin/systemd-analyze", "/usr/bin/systemd-analyze"),
        image.clone(":debug-deps", "/usr/bin/networkctl", "/usr/bin/networkctl"),
        image.ensure_subdirs_exist(
            "/usr/lib",
            paths.relativize(SYSTEMD_PROVIDER_ROOT, "/usr/lib"),
        ),
        image.clone(
            ":debug-deps",
            paths.join(SYSTEMD_PROVIDER_ROOT, "debug-shell.service"),
            paths.join(SYSTEMD_PROVIDER_ROOT, "debug-shell.service"),
        ),
        systemd.enable_unit("debug-shell.service"),
        systemd.install_dropin("debug-shell.conf", "debug-shell.service"),
        systemd.install_dropin("wait-for-debug-shell.conf", "initrd-cleanup.service"),
        image.clone(
            ":debug-deps",
            paths.join(SYSTEMD_PROVIDER_ROOT, "emergency.service"),
            paths.join(SYSTEMD_PROVIDER_ROOT, "emergency.service"),
        ),
        systemd.install_dropin("emergency.conf", "emergency.service"),
    ],
    visibility = VISIBILITY,
)

feature.new(
    name = "dropbear-ssh-server",
    features = [
        image.clone(":debug-deps", "/usr/lib/systemd/system/dropbear.service", "/usr/lib/systemd/system/dropbear.service"),
        image.ensure_subdirs_exist("/usr/lib", "tmpfiles.d"),
        feature.install("dropbear.tmpfiles.conf", "/usr/lib/tmpfiles.d/dropbear.conf"),
        image.ensure_dirs_exist("/etc/sysconfig"),
        feature.install("dropbear", "/etc/sysconfig/dropbear"),
        systemd.install_unit("dropbear-keygen.service"),
        systemd.enable_unit(
            "dropbear.service",
            target = "initrd.target",
        ),
        # vmtest synchronizes on sshd.service, so alias it to dropbear
        feature.ensure_file_symlink("/usr/lib/systemd/system/dropbear.service", "/usr/lib/systemd/system/sshd.service"),
        image.ensure_dirs_exist(
            "/root/.ssh",
            user = "root",
            group = "root",
            mode = "u+rx",
        ),
    ],
    visibility = VISIBILITY,
)

feature.new(
    name = "binaries",
    features = [
        linux.busybox.install(
            ":debug-deps",
            sets.difference(
                DEFAULT_APPLETS,
                # these are implemented in metalctl
                sets.make([
                    "mkdir",
                    "mount",
                    "umount",
                ]),
            ),
            src_path = "/usr/sbin/busybox",
        ),
        extract.extract(
            binaries = [
                "/usr/bin/dropbearkey",
                "/usr/bin/networkctl",
                "/usr/bin/strace",
                "/usr/sbin/dropbear",
            ],
            dest = "/",
            source = ":debug-deps",
        ),
    ],
    visibility = VISIBILITY,
)

image.layer(
    name = "debug",
    parent_layer = "//metalos/initrd:base",
    features = [
        ":binaries",
        ":systemd-debug",
        ":dropbear-ssh-server",
    ],
    visibility = [
        kernel_get.base_target + "/...",
        "//metalos/...",
        "//scripts/dschatzberg/vm/...",
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
)

package.new(
    name = "debug.cpio.gz",
    format = "cpio.gz",
    layer = ":debug",
    visibility = [
        "//metalos/...",
    ],
)
