# @noautodeps

load("@bazel_skylib//lib:paths.bzl", "paths")
load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "export_file")
load("//antlir/bzl:rpm_manifest.bzl", "extract_rpm_manifest")
load("//antlir/bzl:systemd.bzl", "PROVIDER_ROOT", "systemd")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:defs.bzl", "package")
load("//antlir/bzl/linux:defs.bzl", "linux")
# @oss-disable: load("//metalos/os/facebook:pinning.bzl", "flavor_config_override") 
load("//metalos/os/tests:defs.bzl", "systemd_expectations_test")

metalctl = [
    feature.install_buck_runnable(
        "//metalos/metalctl:metalctl",
        "/usr/bin/metalctl",
        mode = "a+rx",
    ),
    feature.install_buck_runnable(
        "//metalos/metalctl/dev:metalctl-dev",
        "/usr/bin/metalctl-dev",
        mode = "a+rx",
    ),
    feature.ensure_file_symlink(
        "/usr/bin/metalctl-dev",
        "/usr/bin/metal-mcmetalface",
    ),
]

native_service_support = [
    feature.install_buck_runnable(
        "//metalos/lib/service/helper:helper",
        "/usr/lib/metalos/native-service-helper",
        mode = "a+rx",
    ),
    systemd.install_unit(
        "//metalos/lib/service/helper:metalos-native-service@.service",
    ),
    feature.ensure_subdirs_exist("/usr/lib/metalos", "native-service/dropins"),
    feature.install(
        "//metalos/lib/service/default_dropins:all_dropins",
        "/usr/lib/metalos/native-service/dropins",
    ),
]

sshd = [
    # Replace sshd-keygen.service with a version that uses the right paths to be
    # located on persistent storage
    feature.remove(paths.join(PROVIDER_ROOT, "sshd-keygen.service")),
    systemd.install_unit("sshd-keygen.service"),
    systemd.enable_unit("sshd-keygen.service", "sshd.service", "requires"),
    feature.remove("/etc/ssh/sshd_config"),
    feature.install("sshd_config", "/etc/ssh/sshd_config"),
]

metalos_branding = [
    # Add a cool metalos motd
    feature.install("metalos-motd.sh", "/etc/profile.d/metalos-motd.sh"),
    # Install a MetalOS specific os-release
    linux.release.install(
        "/usr/lib/os-release",
        os_name = "MetalOS",
        # The layer we are inserting into, this is a bit of a wart but there
        # is currently no way to know this from within the macro so we
        # have to provide it explicitly.
        layer = ":metalos",
        variant = "MetalOS",
    ),
    feature.ensure_file_symlink("/usr/lib/os-release", "/etc/metalos-release"),
]

systemd_target_graph = [
    systemd.install_unit(":core-services-pre.target"),
    systemd.install_unit(":core-services.target"),
    systemd.install_unit(":workload-pre.target"),
    systemd.install_unit(":workload.target"),
    # in the default CentOS packages, this points to graphical.target which makes no sense in our context
    systemd.set_default_target(
        "workload.target",
        force = True,
    ),
]

systemd_drop_state_shim = [
    feature.ensure_subdirs_exist("/usr/lib", "metalos"),
    feature.install(
        "init-systemd-workaround",
        "/usr/lib/metalos/init-drop-systemd-state",
        mode = "a+rx",
    ),
    feature.remove("/usr/sbin/init"),
    feature.ensure_file_symlink(
        "/usr/lib/metalos/init-drop-systemd-state",
        "/usr/sbin/init",
    ),
]

systemd_hostnamed = [
    systemd.enable_unit("systemd-hostnamed.service", "multi-user.target"),
    systemd.alias("systemd-hostnamed.service", "dbus-org.freedesktop.hostname1.service"),
]

# some tweaks to make systemd-resolved actually work
# TODO(T12351899): it may not be necessary anymore after the init hack
systemd_resolved = [
    systemd.enable_unit("systemd-resolved.service", "multi-user.target"),
    systemd.alias("systemd-resolved.service", "dbus-org.freedesktop.resolve1.service"),
    feature.install("systemd-resolved.tmpfiles.conf", "/usr/lib/tmpfiles.d/systemd-resolved.conf"),
]

root_cgroup = [
    # Ensure the root cgroup has all controllers enabled
    systemd.install_unit("systemd-workaround.service"),
    systemd.enable_unit("systemd-workaround.service", "core-services-pre.target"),
]

# Mask out some units that aren't needed in MetalOS. There are
# probably more we can mask. See D20987301 for ideas.
mask_unneeded_units = systemd.mask_units([
    # There is really no need to rebuild the ld cache with a
    # pre-built image
    "ldconfig.service",
    # The hwdb should be pre-built in the image, negating
    # the need to udpate it at runtime.
    "systemd-hwdb-update.service",
])

# Features required in any centos OS we boot with metalinit, regardless of
# whether it's the metalos runtime image or some other centos image
feature.new(
    name = "core",
    features = [
        feature.ensure_subdirs_exist("/usr/lib", "metalos"),
        systemd_target_graph,
        "//metalos/host_configs:generators",
    ],
    visibility = [
        "//metalos/os/...",
    ],
)

image.layer(
    name = "metalos",
    parent_layer = REPO_CFG.artifact["metalos.layer.base"],
    features = [
        ":core",
        mask_unneeded_units,
        metalctl,
        metalos_branding,
        native_service_support,
        root_cgroup,
        sshd,
        systemd_hostnamed,
        systemd_resolved,
        systemd_drop_state_shim,
        # TODO: clean up other features here so that all are in named lists
        systemd.install_unit("run-fs-control.mount"),
        systemd.enable_unit("run-fs-control.mount", "basic.target", "requires"),
        # @oss-disable: "//metalos/os/facebook:features", 
        "//metalos/metald:features",
    ],
    # @oss-disable: flavor_config_override = flavor_config_override, 
    # @oss-disable: flavor = "centos8", 
    runtime = ["systemd"],
    visibility = [
        "//antlir/...",
        "//kernel/kerneltest/image/...",
        "//metalos/...",
        "//netos/...",
        "//tupperware/agent/hostagent/metalos/...",
    ],
)

extract_rpm_manifest(
    name = "metalos-rpm-manifest",
    layer = ":metalos",
)

systemd_expectations_test(
    name = "systemd-expectations",
    expectations = "//metalos/os/tests:systemd-expectations.toml",
    layer = ":metalos",
)

package.new(
    name = "metalos.sendstream.zst",
    layer = ":metalos",
    format = "sendstream.zst",
    visibility = [
        "//metalos/...",
    ],
)

[
    export_file(
        name = target_file,
        visibility = [
            "//metalos/...",
            "//netos/...",
        ],
    )
    for target_file in [
        "core-services-pre.target",
        "core-services.target",
        "workload-pre.target",
        "workload.target",
    ]
]
