load("@bazel_skylib//lib:paths.bzl", "paths")
load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "export_file")
load("//antlir/bzl:systemd.bzl", "systemd", SYSTEMD_PROVIDER_ROOT = "PROVIDER_ROOT")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:defs.bzl", "package")
load("//metalos/os/tests:defs.bzl", "systemd_expectations_test")

image.layer(
    name = "basesystem-strip",
    parent_layer = REPO_CFG.artifact["metalos.layer.base"],
    features = [
        # remove any reference to rpm repositories (upstream or antlir)
        feature.remove("/etc/yum.repos.d"),
        feature.remove(
            "/etc/dnf/dnf.conf",
            must_exist = False,
        ),
        # recreate an empty /etc/yum.repos.d for any tooling that expects it to
        # always exist
        image.ensure_subdirs_exist("/etc", "yum.repos.d"),
        image.rpms_remove_if_exists(["dracut"]),
    ],
)

export_file(name = "eth.network")

image.layer(
    name = "metalos",
    parent_layer = ":basesystem-strip",
    features = [
        feature.install(
            "//metalos/metalctl:metalctl",
            "/usr/bin/metalctl",
            mode = "a+rx",
        ),
        systemd.install_unit("core-services.target"),
        systemd.install_unit("workload-pre.target"),
        systemd.install_unit("workload.target"),
        # in the default CentOS packages, this points to graphical.target which makes no sense in our context
        feature.remove(paths.join(SYSTEMD_PROVIDER_ROOT, "default.target")),
        systemd.set_default_target("workload.target"),
        # networking config to use DHCP is a generic workload-pre.target
        # dependency
        feature.install("eth.network", "/usr/lib/systemd/network/20-eth.network"),
        systemd.enable_unit("systemd-networkd.service", "core-services.target"),
        systemd.enable_unit("systemd-resolved.service", "core-services.target"),
        systemd.alias("systemd-resolved.service", "dbus-org.freedesktop.resolve1.service"),
        feature.install("systemd-resolved.tmpfiles.conf", "/usr/lib/tmpfiles.d/systemd-resolved.conf"),
        systemd.enable_unit("systemd-tmpfiles-setup.service", "core-services.target"),
        systemd.enable_unit("dbus.service", "core-services.target"),
        # Use the hostname service to manage the hostname
        systemd.enable_unit("systemd-hostnamed.service", "core-services.target"),
        # TODO: this is a workaround for a likely bug in the initrd shutdown
        # process that ends up leaving udev rules unprocessed in the
        # post-switch-root root fs.
        systemd.enable_unit("systemd-udev-trigger.service", "core-services.target"),
        systemd.enable_unit("sshd.service", "core-services.target"),
        feature.remove("/etc/ssh/sshd_config"),
        feature.install("sshd_config", "/etc/ssh/sshd_config"),
        # Add a cool metalos motd
        feature.install("metalos-motd.sh", "/etc/profile.d/metalos-motd.sh"),
        # TODO: modify this os-release to indicate that it's MetalOS (in ID_LIKE
        # maybe?), but for now provide an easy indicator that a system is
        # MetalOS if /etc/metalos-release exists
        image.ensure_file_symlink("/usr/lib/os-release", "/etc/metalos-release"),
        # Ensure the root cgroup has all controllers enabled
        systemd.install_unit("systemd-workaround.service"),
        systemd.enable_unit("systemd-workaround.service", "core-services.target"),
        # Mask out some units that aren't needed in MetalOS. There are
        # probably more we can mask. See D20987301 for ideas.
        systemd.mask_units([
            # There is really no need to rebuild the ld cache with a
            # pre-built image
            "ldconfig.service",
            # The hwdb should be pre-built in the image, negating
            # the need to udpate it at runtime.
            "systemd-hwdb-update.service",
        ]),
    ],
    runtime = ["systemd"],
    visibility = [
        "//metalos/...",
        "//netos/...",
    ],
)

systemd_expectations_test(
    name = "systemd-expectations",
    expectations = "//metalos/os/tests:systemd-expectations.toml",
    layer = ":metalos",
)

package.new(
    name = "metalos.sendstream.zst",
    layer = ":metalos",
    format = "sendstream.zst",
    visibility = [
        "//metalos/...",
    ],
)
