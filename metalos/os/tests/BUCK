# @noautodeps

load("@bazel_skylib//lib:paths.bzl", "paths")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "export_file", "python_binary")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//metalos/lib/metalos_paths:metalos_paths.bzl", "dirs_to_create", "metalos_paths")
load("//metalos/os/tests:defs.bzl", "systemd_expectations_test")
load(":defs.bzl", "skip_unit")

export_file(
    name = "systemd_expectations.rs",
    visibility = ["PUBLIC"],
)

export_file(
    name = "99-skip-unit.conf",
    visibility = ["PUBLIC"],
)

export_file(
    name = "systemd-expectations.toml",
)

# TODO(T123302276) it might be better to just pass the whole antlir config into
# containers automatically, but that is more controversial and this quick hack
# will make native service container tests work better right now
python_binary(
    name = "gen-bind-antlir-dirs",
    srcs = ["gen_bind_antlir_dirs.py"],
    main_module = "metalos.os.tests.gen_bind_antlir_dirs",
    deps = ["//antlir:config"],
)

buck_genrule(
    name = "bind-antlir-dirs.conf",
    cmd = "$(exe :gen-bind-antlir-dirs) > $OUT",
)

# partial rootfs layer, use :test-layer instead, as it composes this layer
# correctly into /run/fs/control
image.layer(
    name = "partial-test-rootfs",
    features = [
        # Otherwise systemd-networkd will wait for a non-lo link that will never come
        systemd.install_dropin("99-skip-unit.conf", "systemd-networkd-wait-online.service"),
        systemd.mask_units([
            "attestd2.service",  # no tpm
            "metalos-report-boot.service",  # no network
        ]),
        feature.install(
            ":bind-antlir-dirs.conf",
            "/usr/lib/metalos/native-service/dropins/bind-antlir-dirs.conf",
        ),
        # there is not (yet) a host config
        skip_unit("metalos-commit-initial-runtime-config.service"),
        # @oss-disable: "//metalos/os/tests/facebook:test-features", 
    ],
    parent_layer = "//metalos/os:metalos",
    visibility = [],
)

image.layer(
    name = "test-control",
    features = [
        feature.layer_mount(":partial-test-rootfs", "/image/rootfs/metalos.rootfs:deadbeefdeadbeefdeadbeefdeadbeef"),
    ] + [
        # IRL these are subvolumes, but in tests the leaf nodes in the tree are
        # still subvolumes, and that should be the only place that we actually
        # need fancy subvol features
        feature.ensure_dirs_exist(
            paths.relativize(
                path,
                metalos_paths.control,
            ),
            group = stat.group,
            user = stat.user,
            # ignore the mode so that we don't have to get the ordering right
        )
        for path, stat in dirs_to_create().items()
    ] + [
        feature.install(
            "//metalos/initrd/vmtest:host-config",
            "/run/state/metalos/metalos_host_configs::host::HostConfig-current.json",
        ),
    ],
    flavor = flavor_helpers.get_antlir_linux_flavor(),
    visibility = [
        "//metalos/...",
    ],
)

image.layer(
    name = "test-layer",
    features = [
        # systemd units and configuration to mount a test subvolume at
        # /run/fs/control, since the real root disk is not available in
        # container tests
        feature.layer_mount(":test-control", "/test-control-subvol-src"),
        systemd.install_unit("snapshot-run-fs-control.service"),
        systemd.enable_unit("snapshot-run-fs-control.service"),
        systemd.install_dropin("run-fs-control.conf", "run-fs-control.mount"),
        # setfattr needed by snapshot-run-fs-control-service
        feature.rpms_install(["attr"]),
    ],
    parent_layer = ":partial-test-rootfs",
    runtime = ["systemd"],
    visibility = [
        "//metalos/...",
        "//tupperware/agent/hostagent/metalos:",
    ],
)

systemd_expectations_test(
    name = "systemd-expectations",
    expectations = "//metalos/os/tests:systemd-expectations.toml",
    layer = ":test-layer",
)
