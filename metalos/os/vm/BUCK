# @noautodeps

load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:btrfs.bzl", "btrfs")
load("//antlir/linux/vm/console:defs.bzl", "console")
load("//antlir/linux/vm/generator:defs.bzl", "generator")
load("//antlir/linux/vm/network:defs.bzl", "network")
load("//antlir/linux/vm/notify:defs.bzl", "notify")
load("//antlir/linux/vm/ssh:defs.bzl", "ssh")

feature.new(
    name = "virtualization-features",
    features = [
        console.autologin(),
        generator.mounts(),
        network.host(),
        notify.install(),
        systemd.enable_unit("notify-host.service", "default.target"),
        ssh.test_only_login(),
        ssh.hostkey_setup(),
        "//antlir/linux/vm/vmtest:maybe_mark_non_build_step",
    ],
    visibility = [
        "//metalos/os/...",
    ],
)

image.layer(
    name = "base",
    features = [
        ":virtualization-features",
    ],
    parent_layer = "//metalos/os:metalos",
    # Any vm unittest or run target can have a custom layer
    # built on top of this.
    visibility = ["PUBLIC"],
)

btrfs.new(
    name = "base.btrfs",
    opts = btrfs.opts.new(
        loopback_opts = image.opts(
            label = "/",
        ),
        subvols = {
            "/volume": btrfs.opts.subvol.new(
                layer = ":base",
                writable = True,
            ),
        },
    ),
    # Any vm run target can use this
    visibility = ["PUBLIC"],
)
