# @generated
load("@antlir//antlir/antlir2/package_managers/dnf/rules:rpm.bzl", "rpm")
load("@antlir//antlir/antlir2/package_managers/dnf/rules:xml.bzl", "xml")
rpm(name='0-2.66.1-1.el10_0.x86_64-ad01c', rpm_name='snapd', epoch=0, version='2.66.1', release='1.el10_0', arch='x86_64', url='https://mirror.facebook.net/fedora/epel/10/Everything/x86_64/Packages/s/snapd-2.66.1-1.el10_0.x86_64.rpm', xml=':0-2.66.1-1.el10_0.x86_64-ad01c--xml', sha1=None, sha256='ad01caa5e30b2fa7489705a60c756c60db2b5f317ba4c6442e34ba65b399b7ca', visibility=['//snapshot/rpm/centos10/...'])
xml(name='0-2.66.1-1.el10_0.x86_64-ad01c--xml', primary='<package type="rpm">\n  <name>snapd</name>\n  <arch>x86_64</arch>\n  <version epoch="0" ver="2.66.1" rel="1.el10_0"/>\n  <checksum type="sha256" pkgid="YES">ad01caa5e30b2fa7489705a60c756c60db2b5f317ba4c6442e34ba65b399b7ca</checksum>\n  <summary>A transactional software package manager</summary>\n  <description>Snappy is a modern, cross-distribution, transactional package manager\ndesigned for working with self-contained, immutable packages.</description>\n  <packager>Fedora Project</packager>\n  <url>https://github.com/snapcore/snapd</url>\n  <time file="1733225894" build="1733225250"/>\n  <size package="18225108" installed="58085271" archive="58098356"/>\n  <location href="Packages/ad01caa5e30b2fa7489705a60c756c60db2b5f317ba4c6442e34ba65b399b7ca/snapd-0:2.66.1-1.el10_0.x86_64.rpm"/>\n  <format>\n    <rpm:license>GPL-3.0-only</rpm:license>\n    <rpm:vendor>Fedora Project</rpm:vendor>\n    <rpm:group>Unspecified</rpm:group>\n    <rpm:buildhost>buildvm-x86-14.iad2.fedoraproject.org</rpm:buildhost>\n    <rpm:sourcerpm>snapd-2.66.1-1.el10_0.src.rpm</rpm:sourcerpm>\n    <rpm:header-range start="4504" end="67177"/>\n    <rpm:provides>\n      <rpm:entry name="application()"/>\n      <rpm:entry name="application(io.snapcraft.SessionAgent.desktop)"/>\n      <rpm:entry name="application(snap-handle-link.desktop)"/>\n      <rpm:entry name="config(snapd)" flags="EQ" epoch="0" ver="2.66.1" rel="1.el10_0"/>\n      <rpm:entry name="mimehandler(x-scheme-handler/snap)"/>\n      <rpm:entry name="snapd" flags="EQ" epoch="0" ver="2.66.1" rel="1.el10_0"/>\n      <rpm:entry name="snapd(x86-64)" flags="EQ" epoch="0" ver="2.66.1" rel="1.el10_0"/>\n    </rpm:provides>\n    <rpm:requires>\n      <rpm:entry name="((squashfuse and fuse) or kmod(squashfs.ko))"/>\n      <rpm:entry name="/bin/sh"/>\n      <rpm:entry name="/bin/sh" pre="1"/>\n      <rpm:entry name="/bin/sh"/>\n      <rpm:entry name="/usr/bin/bash"/>\n      <rpm:entry name="/usr/bin/sh"/>\n      <rpm:entry name="bash-completion"/>\n      <rpm:entry name="libresolv.so.2()(64bit)"/>\n      <rpm:entry name="rtld(GNU_HASH)"/>\n      <rpm:entry name="snap-confine(x86-64)" flags="EQ" epoch="0" ver="2.66.1" rel="1.el10_0"/>\n      <rpm:entry name="snapd-selinux" flags="EQ" epoch="0" ver="2.66.1" rel="1.el10_0"/>\n      <rpm:entry name="squashfs-tools"/>\n      <rpm:entry name="systemd" pre="1"/>\n      <rpm:entry name="systemd"/>\n      <rpm:entry name="libc.so.6(GLIBC_2.34)(64bit)"/>\n    </rpm:requires>\n    <file>/etc/profile.d/snapd.sh</file>\n    <file>/etc/sysconfig/snapd</file>\n    <file>/etc/xdg/autostart/snap-userd-autostart.desktop</file>\n    <file>/usr/bin/snap</file>\n    <file>/usr/bin/snapctl</file>\n  </format>\n</package>\n', filelists='<package pkgid="ad01caa5e30b2fa7489705a60c756c60db2b5f317ba4c6442e34ba65b399b7ca" name="snapd" arch="x86_64">\n  <version epoch="0" ver="2.66.1" rel="1.el10_0"/>\n  <file>/etc/profile.d/snapd.sh</file>\n  <file>/etc/sysconfig/snapd</file>\n  <file>/etc/xdg/autostart/snap-userd-autostart.desktop</file>\n  <file>/usr/bin/snap</file>\n  <file>/usr/bin/snapctl</file>\n  <file type="dir">/usr/lib/.build-id</file>\n  <file type="dir">/usr/lib/.build-id/31</file>\n  <file>/usr/lib/.build-id/31/e0aad8a27abaadafb2eca291bd18a3e5103e6a</file>\n  <file type="dir">/usr/lib/.build-id/52</file>\n  <file>/usr/lib/.build-id/52/056835daa4e20ff5257ed1f3112854fafdd723</file>\n  <file type="dir">/usr/lib/.build-id/5d</file>\n  <file>/usr/lib/.build-id/5d/e1af55750d43fb578cf0d4328c19c8890cfaab</file>\n  <file type="dir">/usr/lib/.build-id/97</file>\n  <file>/usr/lib/.build-id/97/51db0194833f941e12b76f6de64fa7a3792951</file>\n  <file type="dir">/usr/lib/.build-id/d9</file>\n  <file>/usr/lib/.build-id/d9/0ce34803c05eeb66e0ea3462dc606c1be158a5</file>\n  <file type="dir">/usr/lib/.build-id/e1</file>\n  <file>/usr/lib/.build-id/e1/f401fc8372c0f9f0215d9099eea5cda880e1c5</file>\n  <file>/usr/lib/environment.d/990-snapd.conf</file>\n  <file>/usr/lib/systemd/system-environment-generators/snapd-env-generator</file>\n  <file>/usr/lib/systemd/system/snapd.autoimport.service</file>\n  <file>/usr/lib/systemd/system/snapd.failure.service</file>\n  <file>/usr/lib/systemd/system/snapd.mounts-pre.target</file>\n  <file>/usr/lib/systemd/system/snapd.mounts.target</file>\n  <file>/usr/lib/systemd/system/snapd.seeded.service</file>\n  <file>/usr/lib/systemd/system/snapd.service</file>\n  <file>/usr/lib/systemd/system/snapd.socket</file>\n  <file>/usr/lib/systemd/user/snapd.session-agent.service</file>\n  <file>/usr/lib/systemd/user/snapd.session-agent.socket</file>\n  <file>/usr/lib/tmpfiles.d/snapd.conf</file>\n  <file type="dir">/usr/libexec/snapd</file>\n  <file>/usr/libexec/snapd/complete.sh</file>\n  <file>/usr/libexec/snapd/etelpmoc.sh</file>\n  <file>/usr/libexec/snapd/info</file>\n  <file>/usr/libexec/snapd/snap-exec</file>\n  <file>/usr/libexec/snapd/snap-failure</file>\n  <file>/usr/libexec/snapd/snap-mgmt</file>\n  <file>/usr/libexec/snapd/snap-mgmt-selinux</file>\n  <file>/usr/libexec/snapd/snapctl</file>\n  <file>/usr/libexec/snapd/snapd</file>\n  <file>/usr/libexec/snapd/snapd.run-from-snap</file>\n  <file>/usr/share/applications/io.snapcraft.SessionAgent.desktop</file>\n  <file>/usr/share/applications/snap-handle-link.desktop</file>\n  <file>/usr/share/bash-completion/completions/snap</file>\n  <file>/usr/share/dbus-1/services/io.snapcraft.Launcher.service</file>\n  <file>/usr/share/dbus-1/services/io.snapcraft.SessionAgent.service</file>\n  <file>/usr/share/dbus-1/services/io.snapcraft.Settings.service</file>\n  <file>/usr/share/dbus-1/session.d/snapd.session-services.conf</file>\n  <file>/usr/share/dbus-1/system.d/snapd.system-services.conf</file>\n  <file type="dir">/usr/share/doc/snapd</file>\n  <file>/usr/share/doc/snapd/MOVED.md</file>\n  <file>/usr/share/doc/snapd/README.md</file>\n  <file>/usr/share/doc/snapd/error-kinds.go</file>\n  <file type="dir">/usr/share/fish/vendor_conf.d</file>\n  <file>/usr/share/fish/vendor_conf.d/snapd.fish</file>\n  <file type="dir">/usr/share/licenses/snapd</file>\n  <file>/usr/share/licenses/snapd/COPYING</file>\n  <file>/usr/share/man/man8/snap.8.gz</file>\n  <file>/usr/share/man/man8/snapd-env-generator.8.gz</file>\n  <file>/usr/share/polkit-1/actions/io.snapcraft.snapd.policy</file>\n  <file>/usr/share/snapd/snapcraft-logo-bird.svg</file>\n  <file type="dir">/usr/share/zsh</file>\n  <file type="dir">/usr/share/zsh/site-functions</file>\n  <file>/usr/share/zsh/site-functions/_snap</file>\n  <file type="dir">/var/cache/snapd</file>\n  <file type="dir">/var/lib/snapd</file>\n  <file type="dir">/var/lib/snapd/assertions</file>\n  <file type="dir">/var/lib/snapd/cgroup</file>\n  <file type="dir">/var/lib/snapd/cookie</file>\n  <file type="dir">/var/lib/snapd/dbus-1</file>\n  <file type="dir">/var/lib/snapd/dbus-1/services</file>\n  <file type="dir">/var/lib/snapd/dbus-1/system-services</file>\n  <file type="dir">/var/lib/snapd/desktop</file>\n  <file type="dir">/var/lib/snapd/desktop/applications</file>\n  <file type="dir">/var/lib/snapd/device</file>\n  <file type="dir">/var/lib/snapd/hostfs</file>\n  <file type="dir">/var/lib/snapd/inhibit</file>\n  <file type="dir">/var/lib/snapd/lib</file>\n  <file type="dir">/var/lib/snapd/lib/gl</file>\n  <file type="dir">/var/lib/snapd/lib/gl32</file>\n  <file type="dir">/var/lib/snapd/lib/glvnd</file>\n  <file type="dir">/var/lib/snapd/lib/vulkan</file>\n  <file type="dir">/var/lib/snapd/mount</file>\n  <file type="dir">/var/lib/snapd/seccomp</file>\n  <file type="dir">/var/lib/snapd/seccomp/bpf</file>\n  <file type="dir">/var/lib/snapd/snap</file>\n  <file type="ghost">/var/lib/snapd/snap/README</file>\n  <file type="dir">/var/lib/snapd/snap/bin</file>\n  <file type="dir">/var/lib/snapd/snaps</file>\n  <file type="ghost">/var/lib/snapd/state.json</file>\n  <file type="dir">/var/snap</file>\n</package>\n', other='<package pkgid="ad01caa5e30b2fa7489705a60c756c60db2b5f317ba4c6442e34ba65b399b7ca" name="snapd" arch="x86_64">\n  <version epoch="0" ver="2.66.1" rel="1.el10_0"/>\n  <changelog author="Ernest Lotter &lt;ernest.lotter@canonical.com&gt;" date="1724414400">- New upstream release 2.65\n - Support building snapd using base Core22 (Snapcraft 8.x)\n - FIPS: support building FIPS complaint snapd variant that switches\n   to FIPS mode when the system boots with FIPS enabled\n - AppArmor: update to latest 4.0.2 release\n - AppArmor: enable using ABI 4.0 from host parser\n - AppArmor: fix parser lookup\n - AppArmor: support AppArmor snippet priorities\n - AppArmor: allow reading cgroup memory.max file\n - AppArmor: allow using snap-exec coming from the snapd snap when\n   starting a confined process with jailmode\n - AppArmor prompting (experimental): add checks for prompting\n   support, include prompting status in system key, and restart snapd\n   if prompting flag changes\n - AppArmor prompting (experimental): include prompt prefix in\n   AppArmor rules if prompting is supported and enabled\n - AppArmor prompting (experimental): add common types, constraints,\n   and mappings from AppArmor permissions to abstract permissions\n - AppArmor prompting (experimental): add path pattern parsing and\n   matching\n - AppArmor prompting (experimental): add path pattern precedence\n   based on specificity\n - AppArmor prompting (experimental): add packages to manage\n   outstanding request prompts and rules\n - AppArmor prompting (experimental): add prompting API and notice\n   types, which require snap-interfaces-requests-control interface\n - AppArmor prompting (experimental): feature flag can only be\n   enabled if prompting is supported, handler service connected, and\n   the service can be started\n - Registry views (experimental): rename from aspects to registries\n - Registry views (experimental): support reading registry views and\n   setting/unsetting registry data using snapctl\n - Registry views (experimental): fetch and refresh registry\n   assertions as needed\n - Registry views (experimental): restrict view paths from using a\n   number as first character and view names to storage path style\n   patterns\n - Snap components: support installing snaps and components from\n   files at the same time (no REST API/CLI)\n - Snap components: support downloading components related assertions\n   from the store\n - Snap components: support installing components from the store\n - Snap components: support removing components individually and\n   during snap removal\n - Snap components: support kernel modules as components\n - Snap components: support for component install, pre-refresh and\n   post-refresh hooks\n - Snap components: initial support for building systems that contain\n   components\n - Refresh app awareness (experimental): add data field for\n   /v2/changes REST API to allow associating each task with affected\n   snaps\n - Refresh app awareness (experimental): use the app name from\n   .desktop file in notifications\n - Refresh app awareness (experimental): give snap-refresh-observe\n   interface access to /v2/snaps/{name} endpoint\n - Improve snap-confine compatibility with nvidia drivers\n - Allow re-exec when SNAP_REEXEC is set for unlisted distros to\n   simplify testing\n - Allow mixing revision and channel on snap install\n - Generate GNU build ID for Go binaries\n - Add missing etelpmoc.sh for shell completion\n - Do not attempt to run snapd on classic when re-exec is disabled\n - Packaging/build maintenance for Debian sid, Fedora, Arch, openSuse\n - Add snap debug API command to enable running raw queries\n - Enable snap-confine snap mount directory detection\n - Replace global seccomp filter with deny rules in standard seccomp\n   template\n - Remove support for Ubuntu Core Launcher (superseded by snap-\n   confine)\n - Support creating pending serial bound users after serial assertion\n   becomes available\n - Support disabling cloud-init using kernel command-line\n - In hybrid systems, apps can refresh without waiting for restarts\n   required by essential snaps\n - Ship snap-debug-info.sh script used for system diagnostics\n - Improve error messages when attempting to run non-existent snap\n - Switch to -u UID:GID for strace-static\n - Support enabling snapd logging with snap set system\n   debug.snapd.{log,log-level}\n - Add options system.coredump.enable and system.coredump.maxuse to\n   support using systemd-coredump on Ubuntu Core\n - Provide documentation URL for \'snap interface \'\n - Fix restarting activated services instead of their activator units\n   (i.e. sockets, timers)\n - Fix potential unexpected auto-refresh of snap on managed schedule\n - Fix potential segfault by guarding against kernel command-line\n   changes on classic system\n - Fix proxy entries in /etc/environment with missing newline that\n   caused later manual entries to not be usable\n - Fix offline remodelling by ignoring prerequisites that will\n   otherwise be downloaded from store\n - Fix devmode seccomp deny regression that caused spamming the log\n   instead of actual denies\n - Fix snap lock leak during refresh\n - Fix not re-pinning validation sets that were already pinned when\n   enforcing new validation sets\n - Fix handling of unexpected snapd runtime failure\n - Fix /v2/notices REST API skipping notices with duplicate\n   timestamps\n - Fix comparing systemd versions that may contain pre-release\n   suffixes\n - Fix udev potentially starting before snap-device-helper is made\n   available\n - Fix race in snap seed metadata loading\n - Fix treating cloud-init exit status 2 as error\n - Fix to prevent sending refresh complete notification if snap snap-\n   refresh-observe interface is connected\n - Fix to queue snapctl service commands if run from the default-\n   configure hook to ensure they get up-to-date config values\n - Fix stop service failure when the service is not actually running\n   anymore\n - Fix parsing /proc/PID/mounts with spaces\n - Add registry interface that provides snaps access to a particular\n   registry view\n - Add snap-interfaces-requests-control interface to enable prompting\n   client snaps\n - steam-support interface: remove all AppArmor and seccomp\n   restrictions to improve user experience\n - opengl interface: improve compatibility with nvidia drivers\n - home interface: autoconnect home on Ubuntu Core Desktop\n - serial-port interface: support RPMsg tty\n - display-control interface: allow changing LVDS backlight power and\n   brightness\n - power-control interface: support for battery charging thesholds,\n   type/status and AC type/status\n - cpu-control interface: allow CPU C-state control\n - raw-usb interface: support RPi5 and Thinkpad x13s\n - custom-device interface: allow device file locking\n - lxd-support interface: allow LXD to self-manage its own cgroup\n - network-manager interface: support MPTCP sockets\n - network-control interface: allow plug/slot access to gnutls config\n   and systemd resolved cache flushing via D-Bus\n - network-control interface: allow wpa_supplicant dbus api\n - gpio-control interface: support gpiochip* devices\n - polkit interface: fix "rw" mount option check\n - u2f-devices interface: enable additional security keys\n - desktop interface: enable kde theming support</changelog>\n  <changelog author="Ernest Lotter &lt;ernest.lotter@canonical.com&gt;" date="1724500800">- New upstream release 2.65.1\n - Support building snapd using base Core22 (Snapcraft 8.x)\n - FIPS: support building FIPS complaint snapd variant that switches\n   to FIPS mode when the system boots with FIPS enabled\n - AppArmor: update to latest 4.0.2 release\n - AppArmor: enable using ABI 4.0 from host parser\n - AppArmor: fix parser lookup\n - AppArmor: support AppArmor snippet priorities\n - AppArmor: allow reading cgroup memory.max file\n - AppArmor: allow using snap-exec coming from the snapd snap when\n   starting a confined process with jailmode\n - AppArmor prompting (experimental): add checks for prompting\n   support, include prompting status in system key, and restart snapd\n   if prompting flag changes\n - AppArmor prompting (experimental): include prompt prefix in\n   AppArmor rules if prompting is supported and enabled\n - AppArmor prompting (experimental): add common types, constraints,\n   and mappings from AppArmor permissions to abstract permissions\n - AppArmor prompting (experimental): add path pattern parsing and\n   matching\n - AppArmor prompting (experimental): add path pattern precedence\n   based on specificity\n - AppArmor prompting (experimental): add packages to manage\n   outstanding request prompts and rules\n - AppArmor prompting (experimental): add prompting API and notice\n   types, which require snap-interfaces-requests-control interface\n - AppArmor prompting (experimental): feature flag can only be\n   enabled if prompting is supported, handler service connected, and\n   the service can be started\n - Registry views (experimental): rename from aspects to registries\n - Registry views (experimental): support reading registry views and\n   setting/unsetting registry data using snapctl\n - Registry views (experimental): fetch and refresh registry\n   assertions as needed\n - Registry views (experimental): restrict view paths from using a\n   number as first character and view names to storage path style\n   patterns\n - Snap components: support installing snaps and components from\n   files at the same time (no REST API/CLI)\n - Snap components: support downloading components related assertions\n   from the store\n - Snap components: support installing components from the store\n - Snap components: support removing components individually and\n   during snap removal\n - Snap components: support kernel modules as components\n - Snap components: support for component install, pre-refresh and\n   post-refresh hooks\n - Snap components: initial support for building systems that contain\n   components\n - Refresh app awareness (experimental): add data field for\n   /v2/changes REST API to allow associating each task with affected\n   snaps\n - Refresh app awareness (experimental): use the app name from\n   .desktop file in notifications\n - Refresh app awareness (experimental): give snap-refresh-observe\n   interface access to /v2/snaps/{name} endpoint\n - Improve snap-confine compatibility with nvidia drivers\n - Allow re-exec when SNAP_REEXEC is set for unlisted distros to\n   simplify testing\n - Allow mixing revision and channel on snap install\n - Generate GNU build ID for Go binaries\n - Add missing etelpmoc.sh for shell completion\n - Do not attempt to run snapd on classic when re-exec is disabled\n - Packaging/build maintenance for Debian sid, Fedora, Arch, openSuse\n - Add snap debug API command to enable running raw queries\n - Enable snap-confine snap mount directory detection\n - Replace global seccomp filter with deny rules in standard seccomp\n   template\n - Remove support for Ubuntu Core Launcher (superseded by snap-\n   confine)\n - Support creating pending serial bound users after serial assertion\n   becomes available\n - Support disabling cloud-init using kernel command-line\n - In hybrid systems, apps can refresh without waiting for restarts\n   required by essential snaps\n - Ship snap-debug-info.sh script used for system diagnostics\n - Improve error messages when attempting to run non-existent snap\n - Switch to -u UID:GID for strace-static\n - Support enabling snapd logging with snap set system\n   debug.snapd.{log,log-level}\n - Add options system.coredump.enable and system.coredump.maxuse to\n   support using systemd-coredump on Ubuntu Core\n - Provide documentation URL for \'snap interface \'\n - Fix snapd riscv64 build\n - Fix restarting activated services instead of their activator units\n   (i.e. sockets, timers)\n - Fix potential unexpected auto-refresh of snap on managed schedule\n - Fix potential segfault by guarding against kernel command-line\n   changes on classic system\n - Fix proxy entries in /etc/environment with missing newline that\n   caused later manual entries to not be usable\n - Fix offline remodelling by ignoring prerequisites that will\n   otherwise be downloaded from store\n - Fix devmode seccomp deny regression that caused spamming the log\n   instead of actual denies\n - Fix snap lock leak during refresh\n - Fix not re-pinning validation sets that were already pinned when\n   enforcing new validation sets\n - Fix handling of unexpected snapd runtime failure\n - Fix /v2/notices REST API skipping notices with duplicate\n   timestamps\n - Fix comparing systemd versions that may contain pre-release\n   suffixes\n - Fix udev potentially starting before snap-device-helper is made\n   available\n - Fix race in snap seed metadata loading\n - Fix treating cloud-init exit status 2 as error\n - Fix to prevent sending refresh complete notification if snap snap-\n   refresh-observe interface is connected\n - Fix to queue snapctl service commands if run from the default-\n   configure hook to ensure they get up-to-date config values\n - Fix stop service failure when the service is not actually running\n   anymore\n - Fix parsing /proc/PID/mounts with spaces\n - Add registry interface that provides snaps access to a particular\n   registry view\n - Add snap-interfaces-requests-control interface to enable prompting\n   client snaps\n - steam-support interface: remove all AppArmor and seccomp\n   restrictions to improve user experience\n - opengl interface: improve compatibility with nvidia drivers\n - home interface: autoconnect home on Ubuntu Core Desktop\n - serial-port interface: support RPMsg tty\n - display-control interface: allow changing LVDS backlight power and\n   brightness\n - power-control interface: support for battery charging thesholds,\n   type/status and AC type/status\n - cpu-control interface: allow CPU C-state control\n - raw-usb interface: support RPi5 and Thinkpad x13s\n - custom-device interface: allow device file locking\n - lxd-support interface: allow LXD to self-manage its own cgroup\n - network-manager interface: support MPTCP sockets\n - network-control interface: allow plug/slot access to gnutls config\n   and systemd resolved cache flushing via D-Bus\n - network-control interface: allow wpa_supplicant dbus api\n - gpio-control interface: support gpiochip* devices\n - polkit interface: fix "rw" mount option check\n - u2f-devices interface: enable additional security keys\n - desktop interface: enable kde theming support</changelog>\n  <changelog author="Ernest Lotter &lt;ernest.lotter@canonical.com&gt;" date="1725624000">- New upstream release 2.65.2\n - Bump squashfuse from version 0.5.0 to 0.5.2 (used in snapd deb\n   only)</changelog>\n  <changelog author="Ernest Lotter &lt;ernest.lotter@canonical.com&gt;" date="1726142400">- New upstream release 2.65.3\n - Fix missing aux info from store on snap setup</changelog>\n  <changelog author="Ernest Lotter &lt;ernest.lotter@canonical.com&gt;" date="1728043200">- New upstream release 2.66\n - AppArmor prompting (experimental): expand kernel support checks\n - AppArmor prompting (experimental): consolidate error messages and\n   add error kinds\n - AppArmor prompting (experimental): grant /v2/snaps/{name} via\n   snap-interfaces-requests-control\n - AppArmor prompting (experimental): add checks for duplicate\n   pattern variants\n - Registry views (experimental): add handlers that commit (and\n   cleanup) registry transactions\n - Registry views (experimental): add a snapctl fail command for\n   rejecting registry transactions\n - Registry views (experimental): allow custodian snaps to implement\n   registry hooks that modify and save registry data\n - Registry views (experimental): run view-changed hooks only for\n   snaps plugging views affected by modified paths\n - Registry views (experimental): make registry transactions\n   serialisable\n - Snap components: handle refreshing components to revisions that\n   have been on the system before\n - Snap components: enable creating Ubuntu Core images that contain\n   components\n - Snap components: handle refreshing components independently of\n   snaps\n - Snap components: handle removing components when refreshing a snap\n   that no longer defines them\n - Snap components: extend snapd Ubuntu Core installation API to\n   allow for picking optional snaps and components to install\n - Snap components: extend kernel.yaml with "dynamic-modules",\n   allowing kernel to define a location for kmods from component\n   hooks\n - Snap components: renamed component type "test" to "standard"\n - Desktop IDs: support installing desktop files with custom names\n   based on desktop-file-ids desktop interface plug attr\n - Auto-install snapd on classic systems as prerequisite for any non-\n   essential snap install\n - Support loading AppArmor profiles on WSL2 with non-default kernel\n   and securityfs mounted\n - Debian/Fedora packaging updates\n - Add snap debug command for investigating execution aspects of the\n   snap toolchain\n - Improve snap pack error for easier parsing\n - Add support for user services when refreshing snaps\n - Add snap remove --terminate flag for terminating running snap\n   processes\n - Support building FIPS complaint snapd deb and snap\n - Fix to not use nss when looking up for users/groups from snapd\n   snap\n - Fix ordering in which layout changes are saved\n - Patch snapd snap dynamic linker to ignore LD_LIBRARY_PATH and\n   related variables\n - Fix libexec dir for openSUSE Slowroll\n - Fix handling of the shared snap directory for parallel installs\n - Allow writing to /run/systemd/journal/dev-log by default\n - Avoid state lock during snap removal to avoid delaying other snapd\n   operations\n - Add nomad-support interface to enable running Hashicorp Nomad\n - Add intel-qat interface\n - u2f-devices interface: add u2f trustkey t120 product id and fx\n   series fido u2f devices\n - desktop interface: improve integration with xdg-desktop-portal\n - desktop interface: add desktop-file-ids plug attr to desktop\n   interface\n - unity7 interface: support desktop-file-ids in desktop files rule\n   generation\n - desktop-legacy interface: support desktop-file-ids in desktop\n   files rule generation\n - desktop-legacy interface: grant access to gcin socket location\n - login-session-observe interface: allow introspection\n - custom-device interface: allow to explicitly identify matching\n   device in udev tagging block\n - system-packages-doc interface: allow reading /usr/share/javascript\n - modem-manager interface: add new format of WWAN ports\n - pcscd interface: allow pcscd to read opensc.conf\n - cpu-control interface: add IRQ affinity control to cpu_control\n - opengl interface: add support for cuda workloads on Tegra iGPU in\n   opengl interface</changelog>\n  <changelog author="Ernest Lotter &lt;ernest.lotter@canonical.com&gt;" date="1728648000">- New upstream release 2.66.1\n - AppArmor prompting (experimental): Fix kernel prompting support\n   check\n - Allow kernel snaps to have content slots\n - Fix ignoring snaps in try mode when amending</changelog>\n  <changelog author="Zygmunt Krynicki &lt;me@zygoon.pl&gt;" date="1729857600">- Cherry pick fix for SELinux timedatex problem from upstream</changelog>\n  <changelog author="Zygmunt Krynicki &lt;me@zygoon.pl&gt;" date="1732104000">- Drop only patch, applied upstream.</changelog>\n  <changelog author="Zygmunt Krynicki &lt;me@zygoon.pl&gt;" date="1732881600">- Re-cherry pick fix for SELinux timedatex problem from upstream\n  as it was not released in 2.66.1, sorry.</changelog>\n  <changelog author="Zygmunt Krynicki &lt;me@zygoon.pl&gt;" date="1733227200">- Constrain dependency on xdelta to EPEL-9</changelog>\n</package>\n')
