# Future: we should eventually add per-library unit test coverage, as
# appropriate, while also retaining integration test coverage.

load("//fs_image/bzl:oss_shim.bzl", "python_binary", "python_library", "python_unittest")
load("//fs_image/bzl:image.bzl", "image")
load("//fs_image/compiler:defs.bzl", "TEST_IMAGE_PREFIX")

python_library(
    name = "args",
    srcs = ["args.py"],
    deps = [
        "//fs_image:find_built_subvol",
        "//fs_image:fs_utils",
    ],
)

python_library(
    name = "common",
    srcs = ["common.py"],
    deps = ["//fs_image:fs_utils"],
)

python_unittest(
    name = "test-common",
    srcs = ["tests/test_common.py"],
    needed_coverage = [(100, ":common")],
)

python_library(
    name = "cmd",
    srcs = ["cmd.py"],
    deps = [
        ":args",
        "//fs_image:artifacts_dir",
        "//fs_image:common",
        "//fs_image:find_built_subvol",
        "//fs_image:send_fds_and_run",
        "//fs_image:testlib_temp_subvolumes",
        "//fs_image/compiler:procfs_serde",
        "//fs_image/compiler/items:mount_utils",
    ],
)

python_library(
    name = "booted",
    srcs = ["booted.py"],
    deps = [
        ":args",
        ":cmd",
        ":common",
        "//fs_image:common",
        "//fs_image:send_fds_and_run",
        "//fs_image/nspawn_in_subvol/plugins:plugins",
    ],
)

python_library(
    name = "non_booted",
    srcs = ["non_booted.py"],
    deps = [
        ":args",
        ":cmd",
        ":common",
        "//fs_image/nspawn_in_subvol/plugins:plugins",
    ],
)

python_binary(
    name = "run",
    srcs = ["run.py"],
    main_module = "fs_image.nspawn_in_subvol.run",
    # Ensures we can read resources in @mode/opt. "xar" cannot work because
    # `root` cannot access the content of unprivileged XARs.
    par_style = "zip",
    deps = [
        ":args",
        ":booted",
        ":cmd",
        ":non_booted",
        "//fs_image:common",
        "//fs_image/nspawn_in_subvol/plugins:plugins",
        "//fs_image/nspawn_in_subvol/plugins:rpm",
    ],
)

# This minimal XAR shipped as tests/hello.xar was generated via:
#
#   pip install xar && mkdir -p hello &&
#   echo "print('hello world')" > hello/__main__.py &&
#   python -m xar.make_xar -- --python hello --output hello.xar
#
# NB: Internally, you can use `buck run //tools/xar:make_xar` instead.
image.layer(
    name = "host-hello-xar",
    parent_layer = TEST_IMAGE_PREFIX + "only-for-tests-read-only-host-clone",
    features = [image.install("tests/hello.xar", "/hello.xar")],
)

python_unittest(
    name = "test-run",
    srcs = ["tests/test_run.py"],
    # This is the integration test for the CLI and underlying library, so
    # it's supposed to cover everything.
    needed_coverage = [(100, target) for target in [
        ":args",
        ":booted",
        ":cmd",
        ":common",
        ":non_booted",
        ":run-library",
        "//fs_image/nspawn_in_subvol/plugins:launch_repo_servers",
        "//fs_image/nspawn_in_subvol/plugins:repo_servers",
        "//fs_image/nspawn_in_subvol/plugins:yum_dnf_versionlock",
    ]],
    # Ensures we can read resources in @mode/opt. "xar" cannot work because
    # `root` cannot access the content of unprivileged XARs.
    par_style = "zip",
    resources = {
        TEST_IMAGE_PREFIX + "only-for-tests-read-only-host-clone": "tests/host",
        TEST_IMAGE_PREFIX + "build_appliance_testing": "tests/build-appliance",
        "//tupperware/image/base:base": "tests/bootable-systemd-os",
        ":host-hello-xar": "tests/host-hello-xar",
    },
    deps = [
        ":run-library",
        "//fs_image/rpm:find_snapshot",
    ],
)

python_binary(
    name = "run-test",
    srcs = ["run_test.py"],
    main_module = "fs_image.nspawn_in_subvol.run_test",
    # Ensures we can read resources in @mode/opt. "xar" cannot work because
    # `root` cannot access the content of unprivileged XARs.
    par_style = "zip",
    deps = [
        ":args",
        ":cmd",
        ":run-library",
    ],
)

python_unittest(
    name = "test-run-test",
    srcs = ["tests/test_run_test.py"],
    needed_coverage = [(100, ":run-test-library")],
    # Ensures we can read resources in @mode/opt. "xar" cannot work because
    # `root` cannot access the content of unprivileged XARs.
    par_style = "zip",
    deps = [":run-test-library"],
)
