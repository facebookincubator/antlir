# NB: There is no binary here because the image compiler does not get built
# by Buck, it is executed in-place using the system Python.

load("//fs_image/bzl:artifacts_require_repo.bzl", "ARTIFACTS_REQUIRE_REPO")
load("//fs_image/bzl:oss_shim.bzl", "python_library", "python_unittest")
load(":defs.bzl", "READ_MY_DOC_image_feature_target", "TEST_IMAGE_PREFIX", "image_feature_python_unittest")

python_library(
    name = "subvolume_on_disk",
    srcs = ["subvolume_on_disk.py"],
)

python_unittest(
    name = "test-subvolume-on-disk",
    srcs = ["tests/test_subvolume_on_disk.py"],
    needed_coverage = [(
        100,
        ":subvolume_on_disk",
    )],
    deps = [":subvolume_on_disk"],
)

python_library(
    name = "procfs_serde",
    srcs = ["procfs_serde.py"],
)

python_unittest(
    name = "test-procfs-serde",
    srcs = ["tests/test_procfs_serde.py"],
    needed_coverage = [(
        100,
        ":procfs_serde",
    )],
    # "fastzip" would break :volume_for_repo in @mode/opt.  "xar" fails
    # since `root` cannot access the content of an unprivileged XAR.
    par_style = "zip",
    deps = [
        ":procfs_serde",
        "//fs_image:testlib_temp_subvolumes",
        "//fs_image/btrfs_diff:testlib_render_subvols",
    ],
)

python_library(
    name = "requires_provides",
    srcs = ["requires_provides.py"],
    deps = ["//fs_image:fs_utils"],
)

python_unittest(
    name = "test-requires-provides",
    srcs = ["tests/test_requires_provides.py"],
    needed_coverage = [(
        100,
        ":requires_provides",
    )],
    deps = [":requires_provides"],
)

python_library(
    name = "dep_graph",
    srcs = ["dep_graph.py"],
    # NB: Don't use `all-items` here, just use the ones we need.
    deps = [
        "//fs_image/compiler/items:foreign_layer",
        "//fs_image/compiler/items:make_subvol",
        "//fs_image/compiler/items:phases_provide",
    ],
)

python_unittest(
    name = "test-dep-graph",
    srcs = ["tests/test_dep_graph.py"],
    needed_coverage = [(
        100,
        ":dep_graph",
    )],
    # Ensures we can read resources in @mode/opt. "xar" cannot work because
    # `root` cannot access the content of unprivileged XARs.
    par_style = "zip",
    deps = [
        ":dep_graph",
        "//fs_image:testlib_temp_subvolumes",
        "//fs_image/compiler/items:items",
    ],
)

python_library(
    name = "items_for_features",
    srcs = ["items_for_features.py"],
    deps = [
        "//fs_image/compiler/items:all-items",
        "//fs_image/compiler/items/facebook:fb_items_for_features",
    ],
)

python_library(
    name = "sample_items",
    srcs = ["tests/sample_items.py"],
    deps = ["//fs_image/compiler/items:all-items"],
)

# Transitive deps of `tests:feature_kitchen_sink` --

TEST_IMAGE_FEATURE_TRANSITIVE_DEPS = [
    READ_MY_DOC_image_feature_target("feature_dirs"),
    READ_MY_DOC_image_feature_target("feature_bad_dir"),
    READ_MY_DOC_image_feature_target("feature_symlinks"),
    READ_MY_DOC_image_feature_target("feature_tar_and_rpms"),
    "rpm-test-cheese-2-1.rpm",
    READ_MY_DOC_image_feature_target("feature_mount"),
    "print-ok",
    "dir-print-ok",
    "dir-with-script",
    READ_MY_DOC_image_feature_target("feature_install_files"),
    READ_MY_DOC_image_feature_target("feature_kitchen_sink"),
    "hello_world_base",
    "hello_world.tar",
] + ([
    "install_buck_runnable_wrap_source__dir-print-ok__2f3b9d05",
    "install_buck_runnable_wrap_source__print-ok__80cbde81",
] if ARTIFACTS_REQUIRE_REPO else [])

image_feature_python_unittest(
    name = "test-image-feature",
    srcs = ["tests/test_image_feature.py"],
    # I cannot get coverage for `image_feature.py` here, because that is
    # executed by the Buck Python runtime.  I could conceivably shim all
    # that out, but it seems entirely not worth the trouble.
    needed_coverage = [(
        100,
        ":items_for_features",
    )],
    test_image_feature_transitive_deps = TEST_IMAGE_FEATURE_TRANSITIVE_DEPS,
    deps = [
        ":dep_graph",
        ":items_for_features",
        "//fs_image:testlib_temp_subvolumes",
    ],
)

python_library(
    name = "compiler",
    srcs = ["compiler.py"],
    deps = [
        ":dep_graph",
        ":items_for_features",
        ":subvolume_on_disk",
        "//fs_image:fs_utils",
    ],
)

image_feature_python_unittest(
    name = "test-compiler",
    srcs = ["tests/test_compiler.py"],
    needed_coverage = [(
        100,
        ":compiler",
    )],
    resources = {
        TEST_IMAGE_PREFIX + "build_appliance_testing": "tests/test-build-appliance",
    },
    test_image_feature_transitive_deps = TEST_IMAGE_FEATURE_TRANSITIVE_DEPS,
    deps = [":compiler"],
)

IMAGE_LAYER_DEPS = [
    "validates-dnf-build-appliance",
    "validates-yum-build-appliance",
    "foreign-layer",
    "layer-with-non-default-snapshot-rpm",
    "installed-files",
    "cloned-files",
    "child/layer",
    "parent_layer",
    "base_cheese_layer",
    "older_cheese_layer",
    "newer_cheese_layer",
    "hello_world_base",
    "create_ops",
    "create_ops-from-dir",
    "create_ops-from-layer",
    "create_ops-alias",
]

python_unittest(
    name = "test-image-layer",
    srcs = ["tests/test_image_layer.py"],
    # Python `deps` don't work as you'd expect in fbcode -- they have to be
    # other `python_*` rules.  `cpp_deps` is the kitchen sink?
    cpp_deps = [
        # Buck bug: `env` does not create a dependency; do it explicitly.
        TEST_IMAGE_PREFIX + t
        for t in IMAGE_LAYER_DEPS
    ],
    # NB: We could replace this with `resources` if this breaks, but while
    # the `env` thing works, the effort isn't worth the reward.  One upside
    # of ditching `env` is that the test will start working stand-alone
    # (running `test-image-layer#binary.par`) without needing `buck test`.
    env = {
        "test_image_layer_path_to_" + t: "$(location {})".format(
            TEST_IMAGE_PREFIX + t,
        )
        for t in IMAGE_LAYER_DEPS
    },
    par_style = "zip",  # "fastzip" would break :volume_for_repo in @mode/opt
    # As with `test-image-feature`, we cannot get `image_layer.py` coverage.
    deps = [
        ":procfs_serde",
        ":sample_items",
        "//fs_image:artifacts_dir",
        "//fs_image:find_built_subvol",
        "//fs_image/btrfs_diff:testlib_demo_sendstreams",
        "//fs_image/btrfs_diff:testlib_render_subvols",
    ],
)

# This isn't explicitly covering any single library, so no coverage claims.
python_unittest(
    name = "test-add-remove-conflict",
    srcs = ["tests/test_add_remove_conflict.py"],
    # Ensures we can read resources in @mode/opt. "xar" cannot work because
    # `root` cannot access the content of unprivileged XARs.
    par_style = "zip",
    resources = {
        TEST_IMAGE_PREFIX + READ_MY_DOC_image_feature_target(
            "feature_addremove_conflict_add",
        ): "tests/data/feature_add",
        TEST_IMAGE_PREFIX + READ_MY_DOC_image_feature_target(
            "feature_addremove_conflict_remove",
        ): "tests/data/feature_remove",
        TEST_IMAGE_PREFIX + READ_MY_DOC_image_feature_target(
            "feature_addremove_conflict_both",
        ): "tests/data/feature_both",
        TEST_IMAGE_PREFIX + "addremove_conflict_child": "tests/data/child",
        TEST_IMAGE_PREFIX + "addremove_conflict_parent": "tests/data/parent",
    },
    deps = [
        ":compiler",
        "//fs_image:find_built_subvol",
        "//fs_image/btrfs_diff:testlib_render_subvols",
    ],
)
