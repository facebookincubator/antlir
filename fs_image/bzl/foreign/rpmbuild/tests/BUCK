load("//fs_image/bzl:constants.bzl", "DEFAULT_BUILD_APPLIANCE")
load("//fs_image/bzl:image.bzl", "image")
load("//fs_image/bzl:oss_shim.bzl", "buck_sh_binary")
load("//fs_image/bzl/foreign/rpmbuild:rpmbuild.bzl", "image_rpmbuild")

# An example of an RPM signer that can sign an RPM with a test key.
#
# When signing with an existing key in a gpg agent or keyring, you can omit the
# `resources` argument below and update the script with the appropriate value
# for `$GNUPGHOME`, and correct key ID to `rpmsign`.
# For this use-case (i.e. "existing key in gpg agent or keyring"), a clean
# approach would involve:
# - A macro like `def gnupg_key_signer(name, key_id)`.  To minimize odds of
#   collision, replace `key_id` with `fingerprint` (ideally `sha256_fingerprint`
#   though it's not immediately obvious if one can force this to be usable
#   regardless of the setting on the ambient OS).
# - Internally, the analog of `rpm_sign_with_test_key.sh` would use a
#   `$GNUPGHOME` available on the ambient OS.
# - The build is still deterministic because we trust that the identifier
#   (e.g. fingeprint) we used for the key identifies it uniquely.
buck_sh_binary(
    name = "rpm_sign_with_test_key.sh",
    main = "rpm_sign_with_test_key.sh",
    resources = ["//fs_image/rpm:gpg-test-signing-key"],
)

image_rpmbuild(
    name = "toy-rpm",
    serve_rpm_snapshots = ["//fs_image/rpm/facebook:fb_centos7"],
    signer = ":rpm_sign_with_test_key.sh",
    source = "toy_srcs",
    specfile = "toy.spec",
)

# Tests that the internals of the `image_rpmbuild` layers are as we expect.
image.python_unittest(
    name = "test-toy-rpm-build",
    srcs = ["test_toy_rpm_build.py"],
    layer = ":toy-rpm-rpmbuild-build",
    deps = ["//fs_image/rpm:rpm_metadata"],
)

# Install a signed RPM via `image.source`.  Installing an unsigned RPM fails.
image.layer(
    name = "install-signed-toy-rpm",
    # We use the default BA here so that we have users and utilities set up
    # for the unit test below.
    parent_layer = DEFAULT_BUILD_APPLIANCE,
    features = [
        image.rpms_install([
            image.source(
                ":toy-rpm",
                path = "toy.rpm",
            ),
        ]),
    ],
)

# Check the result of installing the RPM we built.
image.python_unittest(
    name = "test-install-signed-toy-rpm",
    srcs = ["test_install_signed_toy_rpm.py"],
    layer = ":install-signed-toy-rpm",
)
