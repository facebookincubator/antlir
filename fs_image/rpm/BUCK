load("//fs_image/bzl:defs.bzl", "target_location")
load("//fs_image/bzl:image_python_unittest.bzl", "image_python_unittest")
load("//fs_image/bzl:oss_shim.bzl", "buck_genrule", "python_binary", "python_library", "python_unittest", "third_party")
load("//fs_image/bzl:rpm_repo_snapshot.bzl", "rpm_repo_snapshot")
load("//fs_image/compiler:defs.bzl", "TEST_IMAGE_PREFIX")

python_library(
    name = "pluggable",
    srcs = ["pluggable.py"],
    base_module = "rpm",
)

python_library(
    name = "common",
    srcs = ["common.py"],
    base_module = "rpm",
    deps = [
        "//fs_image:common",
        "//fs_image:fs_utils",
    ],
)

python_unittest(
    name = "test-common",
    srcs = ["tests/test_common.py"],
    base_module = "rpm",
    needed_coverage = [(100, ":common")],
    deps = [":common"],
)

python_library(
    name = "open_url",
    srcs = ["open_url.py"],
    base_module = "rpm",
    external_deps = [
        third_party.library("python-requests"),
    ],
)

python_unittest(
    name = "test-open-url",
    srcs = ["tests/test_open_url.py"],
    base_module = "rpm",
    needed_coverage = [(100, ":open_url")],
    deps = [
        ":common",
        ":open_url",
    ],
)

# NB: For Facebook-internal binaries, add `facebook:db_connection` to
# your `deps`, but import this regular `rpm.db_connection` module.
python_library(
    name = "db_connection",
    srcs = ["db_connection.py"],
    base_module = "rpm",
    deps = [":pluggable"],
)

python_library(
    name = "deleted_mutable_rpms",
    srcs = ["deleted_mutable_rpms.py"],
    base_module = "rpm",
    deps = ["//fs_image/rpm/facebook:deleted_mutable_rpms"],
)

python_library(
    name = "repo_objects",
    srcs = ["repo_objects.py"],
    base_module = "rpm",
    deps = [":common"],
)

python_library(
    name = "temp_repos",
    srcs = ["tests/temp_repos.py"],
    base_module = "rpm",
    resources = {
        target_location(
            third_party.library("third-party//busybox:bin/busybox"),
        ): "busybox-path",
        # NB: It would be great to also use `rpmbuild` from the third-party
        # repo, but doing this is fairly intractable, see D15511231.
    },
    deps = [":common"],
)

python_unittest(
    name = "test-repo-objects",
    srcs = ["tests/test_repo_objects.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_objects"),
    ],
    deps = [
        ":repo_objects",
        ":temp_repos",
    ],
)

python_library(
    name = "repo_sizer",
    srcs = ["repo_sizer.py"],
    base_module = "rpm",
    deps = [
        ":repo_objects",
        ":union_find",
    ],
)

python_unittest(
    name = "test-repo-sizer",
    srcs = ["tests/test_repo_sizer.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_sizer"),
    ],
    deps = [":repo_sizer"],
)

python_library(
    name = "parse_repodata",
    srcs = ["parse_repodata.py"],
    base_module = "rpm",
    deps = [":repo_objects"],
)

python_unittest(
    name = "test-parse-repodata",
    srcs = ["tests/test_parse_repodata.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":parse_repodata"),
    ],
    deps = [
        ":parse_repodata",
        ":temp_repos",
    ],
)

python_library(
    name = "repo_snapshot",
    srcs = ["repo_snapshot.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":repo_objects",
        "//fs_image/rpm/storage/facebook:storage",
    ],
)

python_unittest(
    name = "test-repo-snapshot",
    srcs = ["tests/test_repo_snapshot.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_snapshot"),
    ],
    deps = [":repo_snapshot"],
)

python_library(
    name = "repo_db",
    srcs = ["repo_db.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":repo_objects",
    ],
)

python_unittest(
    name = "test-repo-db",
    srcs = ["tests/test_repo_db.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_db"),
    ],
    deps = [
        ":db_connection",
        ":repo_db",
    ],
)

python_library(
    name = "repo_downloader",
    srcs = ["repo_downloader.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":deleted_mutable_rpms",
        ":open_url",
        ":parse_repodata",
        ":repo_db",
        ":repo_objects",
        ":repo_snapshot",
    ],
)

python_unittest(
    name = "test-repo-downloader",
    srcs = ["tests/test_repo_downloader.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_downloader"),
    ],
    deps = [
        ":db_connection",
        ":repo_db",
        ":repo_downloader",
        ":temp_repos",
        "//fs_image/rpm/storage:storage",
    ],
)

python_library(
    name = "repo_server",
    srcs = ["repo_server.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":repo_objects",
        ":repo_snapshot",
        "//fs_image/rpm/storage:storage",
        "//fs_image/rpm/storage/facebook:storage",
    ],
)

python_unittest(
    name = "test-repo-server",
    srcs = ["tests/test_repo_server.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":repo_server"),
    ],
    deps = [
        ":repo_server",
        ":temp_repos",
    ],
    external_deps = [
        third_party.library("python-requests"),
    ],
)

python_binary(
    name = "repo-server",
    main_module = "rpm.repo_server",
    deps = [":repo_server"],
)

python_library(
    name = "common_args",
    srcs = ["common_args.py"],
    base_module = "rpm",
    deps = [
        ":common",
        "//fs_image/rpm:db_connection",
        "//fs_image/rpm/facebook:db_connection",
        "//fs_image/rpm/storage:storage",
        "//fs_image/rpm/storage/facebook:storage",
    ],
)

python_library(
    name = "gpg_keys",
    srcs = ["gpg_keys.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":open_url",
    ],
)

python_unittest(
    name = "test-gpg-keys",
    srcs = ["tests/test_gpg_keys.py"],
    base_module = "rpm",
    needed_coverage = [(100, ":gpg_keys")],
    deps = [":gpg_keys"],
)

python_library(
    name = "snapshot_repo",
    srcs = ["snapshot_repo.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":common_args",
        ":gpg_keys",
        ":repo_db",
        ":repo_downloader",
        ":repo_sizer",
    ],
)

python_binary(
    name = "snapshot-repo",
    main_module = "rpm.snapshot_repo",
    deps = [":snapshot_repo"],
)

python_unittest(
    name = "test-snapshot-repo",
    srcs = ["tests/test_snapshot_repo.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":common_args"),
        (100, ":snapshot_repo"),
    ],
    deps = [
        ":snapshot_repo",
        ":temp_repos",
    ],
)

python_library(
    name = "yum_dnf_conf",
    srcs = ["yum_dnf_conf.py"],
    base_module = "rpm",
)

python_unittest(
    name = "test-yum-dnf-conf",
    srcs = ["tests/test_yum_dnf_conf.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":yum_dnf_conf"),
    ],
    deps = [":yum_dnf_conf"],
)

# This is extracted from the RPM `yum-versionlock-1.1.31`, and is injected
# into `yum`'s container by `yum-dnf-from-snapshot` code.  In the near
# future, we should eliminate this and just `yum install` the RPM into the
# corresponding build appliance.
#
# It is gzipped to highlight the fact that we treat it as an immutable
# binary blob to be installed into an image, not like source code.
export_file(
    name = "yum_versionlock.gz",
    src = "third_party/yum-versionlock.py.gz",
)

# This is extracted from the RPM `python2-dnf-plugin-versionlock-4.0.7`, and
# into `dnf`'s container by `yum-dnf-from-snapshot` code.  In the near
# future, we should eliminate this and just install the RPM into the
# corresponding build appliance.
#
# It is gzipped to highlight the fact that we treat it as an immutable
# binary blob to be installed into an image, not like source code.
export_file(
    name = "dnf_versionlock.gz",
    src = "third-party/dnf-versionlock.py.gz",
)

python_binary(
    name = "yum-dnf-from-snapshot",
    srcs = ["yum_dnf_from_snapshot.py"],
    base_module = "rpm",
    main_module = "rpm.yum_dnf_from_snapshot",
    par_style = "xar",  # Lets us embed the `repo-server` binary
    resources = {
        ":dnf_versionlock.gz": "dnf_versionlock.gz",
        ":yum_versionlock.gz": "yum_versionlock.gz",
    },
    deps = [
        ":common",
        ":yum_dnf_conf",
        "//fs_image:fs_utils",
    ],
)

python_binary(
    name = "temp-snapshot",
    srcs = ["tests/temp_snapshot.py"],
    base_module = "rpm",
    main_module = "rpm.tests.temp_snapshot",
    par_style = "xar",  # Needed for `busybox` to be visible in @mode/opt
    deps = [
        ":db_connection",
        ":snapshot_repos",
        ":temp_repos",
        "//fs_image/rpm/storage:storage",
    ],
)

buck_genrule(
    name = "bare_repo_snapshot_dir_for_tests",
    out = "unused",
    bash = """
set -ue
logfile=\\$(mktemp)
# Only print the logs on error.
$(exe :temp-snapshot) "$OUT" &> "$logfile" || (cat "$logfile" 1>&2 ; exit 1)
""",
)

rpm_repo_snapshot(
    name = "repo-snapshot-for-tests",
    src = ":bare_repo_snapshot_dir_for_tests",
    storage = {
        # We have hacks to interpret this path as relative to the snapshot
        # directory, even as the snapshot is copied from `src` to the build
        # appliance.
        "base_dir": "storage",
        "key": "test",
        "kind": "filesystem",
    },
    # `test-yum-dnf-from-snapshot` exercises both package managers, and it
    # doesn't use the `yum_dnf_default*` file that this writes.
    #
    # `test-rpm-action-item` tests this default.  But it also has special
    # logic to **also** test all its build appliances with `yum`, overriding
    # this `dnf` default here.
    #
    # All other RPM installations via one of the ~3 build appliances that
    # install this snapshot will use this default.
    yum_dnf_default = "dnf",  # If changing, fix MaybeDnfRpmActionItemTestCase
)

image_python_unittest(
    name = "test-yum-dnf-from-snapshot",
    srcs = ["tests/test_yum_dnf_from_snapshot.py"],
    base_module = "rpm",
    # This is necessary because our CI environment does not guarantee that
    # `/var/lib/dnf` is installed.
    layer = "//fs_image/compiler/test_images:fake-build-appliance-from-host",
    needed_coverage = [
        (100, ":yum-dnf-from-snapshot-library"),
    ],
    run_as_user = "root",  # We run `yum` / `dnf`
    deps = [":yum-dnf-from-snapshot-library"],
)

python_library(
    name = "snapshot_repos",
    srcs = ["snapshot_repos.py"],
    base_module = "rpm",
    deps = [
        ":common",
        ":common_args",
        ":gpg_keys",
        ":repo_db",
        ":repo_downloader",
        ":repo_sizer",
        ":yum_dnf_conf",
    ],
)

python_binary(
    name = "snapshot-repos",
    main_module = "rpm.snapshot_repos",
    deps = [":snapshot_repos"],
)

python_unittest(
    name = "test-snapshot-repos",
    srcs = ["tests/test_snapshot_repos.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":common_args"),
        (100, ":snapshot_repos"),
    ],
    deps = [
        ":snapshot_repos",
        ":temp_repos",
    ],
)

python_library(
    name = "rpm_metadata",
    srcs = ["rpm_metadata.py"],
    base_module = "rpm",
    deps = [
        ":common",
        "//fs_image:subvol_utils",
    ],
)

python_unittest(
    name = "test-rpm-metadata",
    srcs = ["tests/test_rpm_metadata.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":rpm_metadata"),
    ],
    par_style = "zip",
    resources = {
        TEST_IMAGE_PREFIX + "child/layer": "tests/child-layer",
        TEST_IMAGE_PREFIX + "hello_world_base": "tests/hello-layer",
    },
    deps = [
        ":common",
        ":rpm_metadata",
        ":temp_repos",
        "//fs_image:find_built_subvol",
    ],
)

python_library(
    name = "union_find",
    srcs = ["third_party/union_find.py"],
    base_module = "rpm",
    deps = [],
)

python_unittest(
    name = "test-union-find",
    srcs = ["third_party/test_union_find.py"],
    base_module = "rpm",
    needed_coverage = [
        (100, ":union_find"),
    ],
    deps = [":union_find"],
)
