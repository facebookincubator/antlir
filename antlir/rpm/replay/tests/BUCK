# @noautodeps

load("@bazel_skylib//lib:dicts.bzl", "dicts")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:layer_resource.bzl", "layer_resource")
load("//antlir/bzl:oss_shim.bzl", "python_library", "python_unittest")
load("//antlir/bzl:test_rpms.bzl", "test_rpms")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/package:defs.bzl", "package")
load("//antlir/rpm/replay:queries.bzl", "test_env_map")

oncall("twimage")

python_unittest(
    name = "test-fake-pty",
    srcs = ["test_fake_pty.py"],
    needed_coverage = [(
        100,
        "//antlir/rpm/replay:fake_pty",
    )],
    deps = [
        "//antlir:fs_utils",
        "//antlir/rpm/replay:fake_pty",
    ],
)

python_library(
    name = "test_utils",
    srcs = ["test_utils.py"],
    visibility = ["//tupperware/cm/antlir/tests/..."],
    deps = [
        "//antlir:fs_utils",
        "//antlir:serialize-targets-and-outputs-library",
        "//antlir/rpm/replay:extract_nested_features",
    ],
)

python_unittest(
    name = "test-subvol-diff",
    srcs = ["test_subvol_diff.py"],
    needed_coverage = [
        (100, "//antlir/rpm/replay:subvol_diff"),
    ],
    deps = [
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/rpm/replay:subvol_diff",
    ],
)

##
## Test layers for `extract_nested_features`
##

image.layer(
    name = "potato",
    features = [feature.ensure_dirs_exist("/i_am_potato")],
    flavor = "antlir_test",
)

image.layer(
    name = "base-original",
    features = [
        feature.ensure_dirs_exist("/from/test_base/"),
        # Without an rpms_install, /var/lib/rpm/ won't exist.
        # This prevents subvol-rpm-compare from querying or installing rpms.
        test_rpms.add(["rpm-test-milk"]),
        test_rpms.add(["rpm-test-mice"]),
    ],
    flavor = "antlir_test",
)

package.new(
    name = "base.sendstream",
    format = "sendstream",
    layer = ":base-original",
)

image.layer_from_package(
    name = "base",
    flavor = "antlir_test",
    format = "sendstream",
    source = ":base.sendstream",
    visibility = ["//tupperware/cm/antlir/tests/..."],
)

image.layer(
    name = "base-plus-one",
    features = test_rpms.add(["rpm-test-milk"]) + [
        # All of these are "non-custom" as far as `extract_nested_features`
        # is concerned.
        feature.ensure_dirs_exist("/new/dir/"),
        feature.layer_mount(":potato", "/vegetable"),
        feature.meta_store("base_key", "base_val"),
    ],
    parent_layer = ":base",
)

image.layer(
    name = "custom-remove-rpm",
    features = test_rpms.remove(["rpm-test-milk"]),
    parent_layer = ":base-plus-one",
)

# TODO(lesha): Fold this into `non-custom` soon
image.layer(
    name = "custom-local-rpm",
    features = [test_rpms.add([
        "//antlir/compiler/test_images:rpm-test-cheese-2-1.rpm",
    ])],
    parent_layer = ":base-plus-one",
)

image.layer(
    name = "non-custom",
    # Another non-custom feature.  This is a sibling of `custom` to show
    # that the depth does not trigger custom vs non-custom behavior.
    features = [
        feature.ensure_dirs_exist("/another/dir/"),
        feature.meta_store(
            key = "key",
            value = "value",
        ),
        feature.remove_meta_store("base_key"),
    ],
    parent_layer = ":base-plus-one",
)

image.layer(
    name = "non-custom-remove-paths",
    features = [
        feature.remove("/new/dir/"),
    ],
    parent_layer = ":base-plus-one",
)

image.layer(
    name = "custom-remove-paths",
    # If we try to remove a dir that exists on the base image that was not
    # created by a feature, this should trigger the creation of a custom image.
    features = [
        feature.remove("/from/test_base/"),
    ],
    parent_layer = ":base-plus-one",
)

python_unittest(
    name = "test-extract-nested-features",
    srcs = ["test_extract_nested_features.py"],
    env = test_env_map([
        ("custom-remove-rpm", "//antlir/rpm/replay/tests:custom-remove-rpm"),
        ("custom-remove-paths", "//antlir/rpm/replay/tests:custom-remove-paths"),
        ("custom-local-rpm", "//antlir/rpm/replay/tests:custom-local-rpm"),
        ("non-custom", "//antlir/rpm/replay/tests:non-custom"),
        ("non-custom-remove-paths", "//antlir/rpm/replay/tests:non-custom-remove-paths"),
    ]),
    needed_coverage = [
        (100, "//antlir/rpm/replay:extract_nested_features"),
    ],
    deps = [
        ":test_utils",
        "//antlir/rpm/replay:extract_nested_features",
    ],
)

##
## Test layers used in rpm replay tests
##

image.layer(
    name = "leaf",
    features = test_rpms.add([
        "rpm-test-has-epoch",
        "rpm-test-second",
        "rpm-test-fifth",
    ]) + [
        feature.ensure_subdirs_exist("/", "hello/there"),
    ],
    flavor = "antlir_test",
    flavor_config_override = image.opts(
        rpm_repo_snapshot = "//antlir/rpm:rpm-replay-repo-snapshot-for-tests",
    ),
    parent_layer = ":base",
    visibility = ["//tupperware/cm/antlir/tests/..."],
)

# Only test-subvol-rpm-compare supports rpm removal
image.layer(
    name = "test-subvol-rpm-compare-leaf",
    features = test_rpms.remove(["rpm-test-milk"]) + test_rpms.add(["rpm-test-mice"]),
    flavor = "antlir_test",
    flavor_config_override = image.opts(
        rpm_repo_snapshot = "//antlir/rpm:rpm-replay-repo-snapshot-for-tests",
    ),
    parent_layer = ":leaf",
)

python_unittest(
    name = "test-subvol-rpm-compare",
    srcs = ["test_subvol_rpm_compare.py"],
    needed_coverage = [
        (100, "//antlir/rpm/replay:subvol_rpm_compare"),
    ],
    resources = {
        layer_resource(":base"): "root_subvol",
        layer_resource("//antlir/compiler/test_images:build_appliance_testing"): "ba_subvol",
        layer_resource(":test-subvol-rpm-compare-leaf"): "leaf_subvol",
    },
    deps = [
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
        "//antlir/rpm:find_snapshot",
        "//antlir/rpm/replay:subvol_rpm_compare",
    ],
)

python_unittest(
    name = "test-rpm-replay",
    srcs = ["test_rpm_replay.py"],
    env = dicts.add(
        test_env_map([("leaf", ":leaf")]),
        {"compile_items_to_subvol_bin_path": "$(location //antlir/compiler:compile-items-to-subvol-bin)"},
    ),
    needed_coverage = [
        (100, "//antlir/rpm/replay:rpm_replay"),
    ],
    resources = {
        layer_resource(":base"): "root_subvol",
        layer_resource("//antlir/compiler/test_images:build_appliance_testing"): "ba_subvol",
        layer_resource(":leaf"): "leaf_subvol",
    },
    deps = [
        ":test_utils",
        "//antlir:config",
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
        "//antlir/compiler:items_for_features",
        "//antlir/rpm/replay:extract_nested_features",
        "//antlir/rpm/replay:rpm_replay",
        "//antlir/rpm/replay:subvol_diff",
        "//antlir/rpm/replay:subvol_rpm_compare",
    ],
)
