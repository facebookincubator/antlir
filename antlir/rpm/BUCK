load("//antlir/bzl:build_defs.bzl", "export_file", "python_binary", "python_library", "third_party")

oncall("antlir")

python_library(
    name = "pluggable",
    srcs = ["pluggable.py"],
)

python_library(
    name = "common",
    srcs = ["common.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/cm/antlir/...",
    ],
    deps = [
        "//antlir:common",
        "//antlir:fs_utils",
    ],
)

python_library(
    name = "find_snapshot",
    srcs = ["find_snapshot.py"],
    deps = ["//antlir:fs_utils"],
)

python_library(
    # @autodeps-skip
    name = "open_url",
    srcs = ["open_url.py"],
    deps = [
        third_party.library(
            "requests",
            platform = "python",
        ),
        "//libfb/py:decorators",
    ],
)

# NB: For Facebook-internal binaries, add `facebook:db_connection` to
# your `deps`, but import this regular `antlir.rpm.db_connection` module.
python_library(
    # @autodeps-skip
    name = "db_connection",
    srcs = ["db_connection.py"],
    deps = [
        ":pluggable",
        ":repo_db",
    ],
)

python_library(
    name = "repo_objects",
    srcs = ["repo_objects.py"],
    deps = [":common"],
)

python_library(
    name = "repo_sizer",
    srcs = ["repo_sizer.py"],
    deps = [
        ":common",
        ":repo_objects",
        "//antlir:unionfind",
    ],
)

python_library(
    name = "parse_repodata",
    srcs = ["parse_repodata.py"],
    deps = [":repo_objects"],
)

python_library(
    name = "repo_snapshot",
    srcs = ["repo_snapshot.py"],
    deps = [
        ":common",
        ":repo_objects",
        "//antlir:common",
        "//antlir:fs_utils",
        "//antlir/rpm/storage:storage",
    ],
)

python_library(
    name = "repo_db",
    srcs = ["repo_db.py"],
    deps = [
        ":repo_objects",
        "//antlir:common",
    ],
)

python_library(
    name = "repo_server",
    srcs = ["repo_server.py"],
    deps = [
        ":common",
        ":repo_snapshot",
        "//antlir:common",
        "//antlir:fs_utils",
        "//antlir/proxy:http_socket_server",
        "//antlir/rpm/storage:storage",
    ],
)

python_binary(
    name = "repo-server",
    srcs = ["repo_server_main.py"],
    main_function = "antlir.rpm.repo_server_main.invoke_main",
    deps = [":repo_server"],
)

python_library(
    name = "common_args",
    srcs = ["common_args.py"],
    deps = [
        ":common",
        "//antlir:fs_utils",
        "//antlir/rpm:db_connection",
        "//antlir/rpm/storage:storage",
    ],
)

python_library(
    name = "gpg_keys",
    srcs = ["gpg_keys.py"],
    deps = [
        ":open_url",
        "//antlir:fs_utils",
    ],
)

python_library(
    name = "yum_dnf_conf",
    srcs = ["yum_dnf_conf.py"],
)

python_binary(
    name = "write-yum-dnf-conf",
    srcs = ["write_yum_dnf_conf.py"],
    main_function = "antlir.rpm.write_yum_dnf_conf.invoke_main",
    deps = [
        ":yum_dnf_conf",
        "//antlir:fs_utils",
    ],
)

python_binary(
    name = "yum-dnf-from-snapshot",
    srcs = ["yum_dnf_from_snapshot.py"],
    main_function = "antlir.rpm.yum_dnf_from_snapshot.main",
    deps = [
        ":common",
        ":yum_dnf_conf",
        "//antlir:cli",
        "//antlir:common",
        "//antlir:fs_utils",
        "//antlir/nspawn_in_subvol/plugins:shadow_paths",
    ],
)

export_file(
    name = "tests/needs-carrot.spec",
)

python_library(
    name = "rpm_metadata",
    srcs = ["rpm_metadata.py"],
    deps = [
        "//antlir:common",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)
