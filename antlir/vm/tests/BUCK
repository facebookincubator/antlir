load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:image_unittest_helpers.bzl", helpers = "image_unittest_helpers")
load("//antlir/bzl:oss_shim.bzl", "export_file", "python_unittest", "rust_binary", "third_party")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/vm/bzl:defs.bzl", "vm")

# Future: when we run a VM the tap device is actually created
# on the host, but this test runs inside a VM, which needs
# a tap device...  Yes, this is circular, since tap devices
# are created inside of network namespaces (always), it *should*
# be ok to run this inside of a regular test instead.  However,
# this needs to run as root... so really this should probably
# be run inside a container instead of a vm.
vm.python_unittest(
    name = "test-tap",
    srcs = ["test_tap.py"],
    deps = ["//antlir/vm:tap"],
)

python_unittest(
    name = "test-vm",
    srcs = [
        "test_share_generator.py",
        "test_vm.py",
    ],
    env = {
        "test-vm-agent-json": shape.do_not_cache_me_json(
            vm.types.opts.new(
                runtime = vm.types.runtime.new(
                    connection = vm.types.connection.new(
                        scheme = "agent",
                    ),
                ),
            ),
        ),
        "test-vm-sidecar-json": shape.do_not_cache_me_json(
            vm.types.opts.new(
                runtime = vm.types.runtime.new(
                    sidecar_services = ["/bin/sleep 3600"],
                ),
            ),
        ),
        "test-vm-ssh-json": shape.do_not_cache_me_json(
            vm.types.opts.new(
                runtime = vm.types.runtime.new(
                    connection = vm.types.connection.new(
                        scheme = "ssh",
                        # Test using ssh options
                        options = {
                            "ServerAliveCountMax": "1",
                            "ServerAliveInterval": "1",
                        },
                    ),
                ),
            ),
        ),
    },
    needed_coverage = [
        (100, "//antlir/vm:vm"),
        (100, "//antlir/vm:share"),
        (100, "//antlir/vm:guest-ssh"),
    ],
    resources = {
        "//antlir/vm:mount-generator": "mount-generator",
    },
    deps = [
        "//antlir:fs_utils",
        "//antlir/vm:share",
        "//antlir/vm:vm",
    ],
)

# Don't run this test directly, it should only be used within
# `:test-kernel-panic`.
vm.python_unittest(
    name = "create-kernel-panic",
    srcs = ["create_kernel_panic.py"],
    tags = helpers.tags_to_hide_test(),
    visibility = [],
    vm_opts = vm.types.opts.new(
        runtime = vm.types.runtime.new(
            connection = vm.types.connection.new(
                scheme = "ssh",
                # Set the options such that it fails fast when
                # the vm crashes.  This is just to make the test
                # run in a reasonable amount of time.
                options = {
                    "ServerAliveCountMax": "1",
                    "ServerAliveInterval": "1",
                },
            ),
        ),
    ),
)

python_unittest(
    name = "test-kernel-panic",
    srcs = ["test_kernel_panic.py"],
    resources = {
        ":create-kernel-panic=vmtest": "create-kernel-panic",
    },
    deps = [
        "//antlir:fs_utils",
        "//antlir/nspawn_in_subvol:common",
    ],
)

export_file(name = "resource.txt")

test_env_vars = {
    "dogsgo": "woof",
    "kitteh": "meow",
}

image.layer(
    name = "vmtest-custom-layer",
    parent_layer = vm.artifacts.rootfs.layer.stable,
    flavor = REPO_CFG.antlir_linux_flavor,
    features = [
        image.install(
            ":resource.txt",
            "/etc/i_am_a_custom_rootfs",
        ),
    ],
)

vm.python_unittest(
    name = "python",
    srcs = ["test_basic_vm.py"],
    env = test_env_vars,
    resources = {
        ":resource.txt": "resource",
    },
    vm_opts = vm.types.opts.new(
        cpus = 4,
        disk = vm.types.disk.new(
            seed = True,
            layer = ":vmtest-custom-layer",
        ),
        runtime = vm.types.runtime.new(
            connection = vm.types.connection.new(
                scheme = "ssh",
            ),
        ),
    ),
)

vm.cpp_unittest(
    name = "cpp",
    srcs = ["CppTest.cpp"],
    env = test_env_vars,
)

vm.rust_unittest(
    name = "rust",
    srcs = ["rust_test.rs"],
    env = test_env_vars,
    crate_root = "rust_test.rs",
)

vm.python_unittest(
    name = "test-with-kernel-devel",
    srcs = ["test_kernel_devel.py"],
    vm_opts = vm.types.opts.new(
        devel = True,
    ),
)

rust_binary(
    name = "sidecar",
    srcs = ["sidecar.rs"],
    deps = [
        third_party.library(
            "tokio",
            platform = "rust",
        ),
    ],
)

vm.rust_unittest(
    name = "with-sidecar",
    srcs = ["test_with_sidecar.rs"],
    vm_opts = vm.types.opts.new(
        runtime = vm.types.runtime.new(
            sidecar_services = ["$(exe :sidecar)"],
        ),
    ),
    crate_root = "test_with_sidecar.rs",
    deps = [
        third_party.library(
            "tokio",
            platform = "rust",
        ),
    ],
)
