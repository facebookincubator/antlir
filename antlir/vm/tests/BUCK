load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:image_unittest_helpers.bzl", helpers = "image_unittest_helpers")
load("//antlir/bzl:oss_shim.bzl", "default_vm_image", "export_file", "python_unittest")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:vm.bzl", "vm")
load("//antlir/bzl:vm_opts.bzl", "new_vm_opts", "vm_opts_t")

python_unittest(
    name = "test-share-generator",
    srcs = ["test_share_generator.py"],
    resources = {
        "//antlir/vm:mount-generator": "mount-generator",
    },
    deps = ["//antlir/vm:share"],
)

# Future: when we run a VM the tap device is actually created
# on the host, but this test runs inside a VM, which needs
# a tap device...  Yes, this is circular, since tap devices
# are created inside of network namespaces (always), it *should*
# be ok to run this inside of a regular test instead.  However,
# this needs to run as root... so really this should probably
# be run inside a container instead of a vm.
vm.python_unittest(
    name = "test-tap",
    srcs = ["test_tap.py"],
    deps = ["//antlir/vm:tap"],
)

python_unittest(
    name = "test-vm",
    srcs = ["test_vm.py"],
    env = {
        "test-vm-agent-json": shape.do_not_cache_me_json(
            new_vm_opts(
                connect_scheme = "agent",
            ),
            vm_opts_t,
        ),
        "test-vm-ssh-json": shape.do_not_cache_me_json(
            new_vm_opts(
                connect_scheme = "ssh",
            ),
            vm_opts_t,
        ),
    },
    needed_coverage = [
        (100, "//antlir/vm:vm"),
        (100, "//antlir/vm:guest-agent"),
        (100, "//antlir/vm:guest-ssh"),
    ],
    deps = [
        "//antlir:fs_utils",
        "//antlir/vm:vm",
    ],
)

# Don't run this test directly, it should only be used within
# `:test-kernel-panic`.
vm.python_unittest(
    name = "create-kernel-panic",
    srcs = ["create_kernel_panic.py"],
    tags = helpers.tags_to_hide_test(),
    visibility = [],
    vm_opts = vm.opts(
        connect_scheme = "agent",
    ),
)

python_unittest(
    name = "test-kernel-panic",
    srcs = ["test_kernel_panic.py"],
    resources = {
        ":create-kernel-panic=vmtest": "vmtest",
    },
    deps = [
        "//antlir:fs_utils",
        "//antlir/nspawn_in_subvol:common",
    ],
)

export_file(name = "resource.txt")

test_env_vars = {
    "dogsgo": "woof",
    "kitteh": "meow",
}

image.layer(
    name = "vmtest-custom-layer",
    parent_layer = default_vm_image.layer,
    features = [
        image.install(
            ":resource.txt",
            "/etc/i_am_a_custom_rootfs",
        ),
    ],
)

[
    vm.python_unittest(
        name = "python-{}".format(scheme),
        srcs = ["test_basic_vm.py"],
        env = test_env_vars,
        resources = {
            ":resource.txt": "resource",
        },
        vm_opts = vm.opts(
            cpus = 4,
            layer = ":vmtest-custom-layer",
            connect_scheme = scheme,
        ),
    )
    for scheme in [
        "agent",
        "ssh",
    ]
]

vm.cpp_unittest(
    name = "cpp",
    srcs = ["CppTest.cpp"],
    env = test_env_vars,
)

vm.python_unittest(
    name = "test-with-kernel-devel",
    srcs = ["test_kernel_devel.py"],
    vm_opts = vm.opts(
        devel = True,
    ),
)
