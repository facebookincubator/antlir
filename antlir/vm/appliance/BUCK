load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "buck_worker_tool", "export_file", "python_binary", "python_unittest", "third_party")
load("//antlir/bzl:systemd.bzl", "systemd")
load(":worker.bzl", "worker_genrule")

python_binary(
    name = "worker",
    srcs = ["worker.py"],
    main_module = "antlir.vm.appliance.worker",
    deps = [
        "//antlir:common",
        "//antlir:fs_utils",
    ],
)

python_unittest(
    name = "test-worker",
    srcs = ["test_worker.py"],
    needed_coverage = [(100, ":worker-library")],
    deps = [":worker-library"],
)

buck_worker_tool(
    name = "worker_tool",
    exe = ":worker",
)

worker_genrule(
    name = "worker-output",
    out = "out",
    cmd = "echo hello > $OUT",
)

autologin = [
    # Enable auto-login on ttyS0
    image.install(
        "autologin.conf",
        "/etc/systemd/system/serial-getty@.service.d/autologin.conf",
    ),
    image.ensure_subdirs_exist(
        "/etc/systemd/system",
        "serial-getty@.service.d",
        mode = "a+rx,u+w",
    ),
    systemd.mask_units([
        "serial-getty@hvc0.service",
    ]),
]

automount = [
    image.install(
        "//antlir/vm:mount-generator",
        "/usr/lib/systemd/system-generators/mount-generator",
        mode = "a+rx",
    ),
]

unnecessary_units = [
    systemd.mask_units([
        "dnf-makecache.service",
        "dnf-makecache.timer",
        "ldconfig.service",
        "network.service",
        "proc-sys-fs-binfmt_misc.mount",
        "proc-sys-fs-binfmt_misc.automount",
        "rdisc.service",
        "systemd-binfmt.service",
        "systemd-hwdb-update.service",
        "systemd-journal-flush.service",
        "systemd-logind.service",
        "systemd-network-wait-sync.service",
        "systemd-networkd-wait-online.service",
        "systemd-random-seed.service",
        "systemd-resolved.service",
        "systemd-time-wait-sync.service",
    ]),
]

readonly = [
    systemd.mask_units([
        "systemd-timesyncd.service",
        "rhel-dmesg.service",
    ]),
]

build_deps = [
    image.rpms_install([
        "systemd-container",  # systemd-nspawn
    ]),
]

guest_agent = [
    image.rpms_install(["qemu-guest-agent"]),
    # the default config shipped with qemu-guest-agent blacklists a lot of
    # useful commands that we need to use. (exec, file read, etc)
    image.remove("/etc/sysconfig/qemu-ga"),
    image.install(
        source = "qemu-ga",
        dest = "/etc/sysconfig/qemu-ga",
    ),
]

# The notify-host service is activated by a udev rule, ensuring that it only
# activates after the virtserialport has been activated and symlinked in
# /dev/virtio-ports. This is safer than _only_ relying on
# {After,Requires}=qemu-guest-agent.service, because the notify-host serial
# port might not have been initialized at that time, and doing both covers all
# the bases.
notify = [
    systemd.install_unit("notify-host.service"),
    image.install("notify-host.rules", "/etc/udev/rules.d/99-notify-host.rules"),
]

image.layer(
    name = "appliance",
    parent_layer = REPO_CFG.build_appliance_default,
    features = [
        automount,
        autologin,
        guest_agent,
        notify,
        unnecessary_units,
        readonly,
        build_deps,
        image.install("hostname", "/etc/hostname"),
        # Below are things that can be safely removed, but using slimos would
        # break the oss target graph, and it's not yet critical to absolutely
        # minimize the size of this image.
        # "//tupperware/image/slimos:basesystem-strip",
        # "//tupperware/image/slimos:fstrim",
        # "//tupperware/image/slimos:python",
        # "//tupperware/image/slimos:tmpfiles",
        # "//tupperware/image/slimos:utmp",
    ],
)

export_file(
    name = "vmlinuz",
    src = "kernel/vmlinuz",
)

export_file(
    name = "init.sh",
)

busybox = [
    image.install(
        dest = "/bin/busybox",
        source = third_party.library("busybox", "bin/busybox"),
    ),
] + [
    image.symlink_file(
        "/bin/busybox",
        "/bin/" + applet,
    )
    for applet in [
        "cat",
        "chroot",
        "cp",
        "dmesg",
        "file",
        "ln",
        "ls",
        "mdev",
        "mkdir",
        "mount",
        "sh",
        "switch_root",
        "umount",
        "uname",
    ]
]

image.layer(
    name = "initrd--layer",
    features = [
        # Setup the init script
        image.install(
            dest = "/init",
            source = ":init.sh",
            mode = "u+rwx,og+rx",
        ),
        image.ensure_subdirs_exist("/", "bin"),
        image.ensure_subdirs_exist("/", "newroot"),
        image.ensure_subdirs_exist("/", "proc"),
        image.ensure_subdirs_exist("/", "sys"),
        image.ensure_subdirs_exist("/", "tmp"),
        busybox,
        image.clone(
            src_layer = "//antlir/vm/initrd:seedroot",
            src_path = "/build/seedroot",
            dest_path = "/bin/seedroot",
        ),
    ],
    visibility = [],
)

image.package(
    name = "initrd.cpio.gz",
    layer = ":initrd--layer",
    visibility = [],
)
