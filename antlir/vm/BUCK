load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "export_file", "python_binary", "python_library", "python_unittest", "third_party")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:vm.bzl", "vm")
load("//antlir/bzl:vm_opts.bzl", "vm_opts_t")

# qemu roms to provide
roms = [
    "kvmvapic.bin",
    "linuxboot_dma.bin",
    "vgabios-stdvga.bin",
    "efi-virtio.rom",
]

buck_genrule(
    name = "roms",
    out = ".",
    cmd = " && ".join([
        "cp $(location {}) $OUT/".format(
            third_party.library(
                "qemu",
                "share/qemu/{}".format(rom),
            ),
        )
        for rom in roms
    ]),
)

python_library(
    name = "common",
    srcs = [
        "common.py",
    ],
)

# This is the client ssh key used to connect to the virtual machine with SSH
export_file(
    name = "ssh-privkey",
    src = "id_ecdsa",
)

# And the corresponding public key that is installed into the default image
export_file(
    name = "ssh-pubkey",
    src = "id_ecdsa.pub",
)

shape.loader(
    name = "vm_opts_t",
    classname = "vm_opts_t",
    shape = vm_opts_t,
)

python_library(
    name = "guest-ssh",
    srcs = [
        "guest_ssh.py",
    ],
    resources = {
        ":ssh-privkey": "privkey",
    },
    deps = [
        "//antlir:common",
        "//antlir/nspawn_in_subvol:common",
    ],
)

python_library(
    name = "guest-agent",
    srcs = [
        "guest_agent.py",
    ],
    deps = [
        "//antlir:common",
    ],
)

python_library(
    name = "vm",
    srcs = [
        "vm.py",
    ],
    deps = [
        ":guest-agent",
        ":guest-ssh",
        ":share",
        ":tap",
        ":vm_opts_t",
        "//antlir:common",
        "//antlir:config",
        "//antlir:shape",
        "//antlir:testlib_layer_resource",
        "//antlir:unshare",
        "//antlir/compiler/items:mount",
    ],
)

python_binary(
    name = "run",
    srcs = [
        "run.py",
    ],
    main_module = "antlir.vm.run",
    deps = [
        ":common",
        ":vm",
    ],
)

python_library(
    name = "tap",
    srcs = ["tap.py"],
    deps = [
        "//antlir:unshare",
    ],
)

# defines the `Share` dataclass for vm
python_library(
    name = "share",
    srcs = ["share.py"],
    deps = ["//antlir:fs_utils"],
)

export_file(
    name = "mount-generator",
    src = "mount-generator",
)

python_binary(
    name = "vmtest",
    srcs = [
        "vmtest.py",
    ],
    main_module = "antlir.vm.vmtest",
    deps = [
        ":common",
        ":share",
        ":vm",
        "//antlir:artifacts_dir",
        "//antlir:common",
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
    ],
)

# This will eventually be the default image used for vmtest both internally and
# externally, but for now is only used in the OSS antlir project.
image.layer(
    name = "default-image",
    parent_layer = REPO_CFG.build_appliance_default,
)

image.package(
    name = "default-image.btrfs",
)
