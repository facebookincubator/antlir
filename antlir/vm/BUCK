load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "export_file", "kernel_get", "python_binary", "python_library", "third_party", "vm_image_path")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/vm/bzl:defs.bzl", "vm")

# qemu roms to provide
roms = [
    "kvmvapic.bin",
    "linuxboot_dma.bin",
    "vgabios-stdvga.bin",
    "efi-virtio.rom",
]

buck_genrule(
    name = "roms",
    out = ".",
    cmd = " && ".join([
        "cp $(location {}) $OUT/".format(
            third_party.library(
                "qemu",
                "share/qemu/{}".format(rom),
            ),
        )
        for rom in roms
    ]),
    visibility = ["PUBLIC"],
)

python_library(
    name = "common",
    srcs = [
        "common.py",
    ],
)

shape.loader(
    name = "vm_opts_t",
    classname = "vm_opts_t",
    shape = vm.types.opts.t,
)

python_library(
    name = "guest-ssh",
    srcs = [
        "guest_ssh.py",
    ],
    resources = {
        "//antlir/linux/vm/ssh:privkey": "privkey",
    },
    deps = [
        "//antlir:common",
        "//antlir/nspawn_in_subvol:common",
    ],
)

python_library(
    name = "vm",
    srcs = [
        "vm.py",
    ],
    deps = [
        ":common",
        ":guest-ssh",
        ":share",
        ":tap",
        ":vm_opts_t",
        "//antlir:common",
        "//antlir:config",
        "//antlir:find_built_subvol",
        "//antlir:shape",
        "//antlir:testlib_layer_resource",
        "//antlir:unshare",
        "//antlir/compiler/items:mount",
    ],
)

python_binary(
    name = "run",
    srcs = [
        "run.py",
    ],
    main_module = "antlir.vm.run",
    visibility = ["PUBLIC"],
    deps = [
        ":vm",
    ],
)

python_library(
    name = "tap",
    srcs = ["tap.py"],
    deps = [
        "//antlir:unshare",
    ],
)

# defines the `Share` dataclass for vm
python_library(
    name = "share",
    srcs = ["share.py"],
    deps = ["//antlir:fs_utils"],
)

export_file(
    name = "mount-generator",
    src = "mount-generator",
    visibility = [
        vm_image_path,
        "//antlir/linux/initrd/vmtest/...",
        "//antlir/vm/tests/...",
    ],
)

python_binary(
    name = "wrap-in-vm-test-exec",
    srcs = [
        "wrap_in_vm_test_exec.py",
    ],
    main_module = "antlir.vm.wrap_in_vm_test_exec",
    visibility = ["PUBLIC"],
    deps = [
        "//antlir:common",
        "//antlir:fs_utils",
    ],
)

python_binary(
    name = "vmtest",
    srcs = [
        "vmtest.py",
    ],
    main_module = "antlir.vm.vmtest",
    visibility = ["PUBLIC"],
    deps = [
        ":common",
        ":share",
        ":vm",
        "//antlir:artifacts_dir",
        "//antlir:common",
        "//antlir:fs_utils",
    ],
)

vm.run(
    name = "default-stable",
    vm_opts = vm.types.opts.new(
        kernel = kernel_get.default,
        disk = vm.artifacts.rootfs.disk.stable(),
    ),
)

vm.run(
    name = "default-rc",
    vm_opts = vm.types.opts.new(
        kernel = kernel_get.default,
        disk = vm.artifacts.rootfs.disk.rc(),
    ),
)

vm.run(
    name = "default-stable-initrd-debug",
    vm_opts = vm.types.opts.new(
        kernel = kernel_get.default,
        disk = vm.artifacts.rootfs.disk.stable(),
        initrd = "{}:{}-initrd-debug".format(
            kernel_get.base_target,
            kernel_get.default.uname,
        ),
    ),
    args = [
        "--console",
        "--shell=console",
    ],
)

vm.run(
    name = "default-rc-initrd-debug",
    vm_opts = vm.types.opts.new(
        kernel = kernel_get.default,
        disk = vm.artifacts.rootfs.disk.rc(),
        initrd = "{}:{}-initrd-debug".format(
            kernel_get.base_target,
            kernel_get.default.uname,
        ),
    ),
    args = [
        "--console",
        "--shell=console",
    ],
)
