load("//antlir/bzl:build_defs.bzl", "export_file", "python_binary", "python_library")
load("//antlir/bzl:kernel_shim.bzl", "kernels")
load("//antlir/vm/bzl:defs.bzl", "vm")

oncall("twimage")

python_library(
    name = "common",
    srcs = [
        "common.py",
    ],
)

python_library(
    name = "guest-ssh",
    srcs = [
        "guest_ssh.py",
    ],
    resources = {
        "//antlir/linux/vm/ssh:privkey": "privkey",
    },
    deps = [
        "//antlir:common",
        "//antlir/nspawn_in_subvol:common",
    ],
)

python_library(
    name = "vm",
    srcs = [
        "vm.py",
    ],
    deps = [
        ":common",
        ":guest-ssh",
        ":share",
        ":tap",
        ":tpm",
        "//antlir:common",
        "//antlir:config",
        "//antlir:find_built_subvol",
        "//antlir:shape",
        "//antlir:testlib_layer_resource",
        "//antlir:unshare",
        "//antlir/compiler/items:mount",
        "//antlir/vm/bzl:vm.shape-python",
    ],
)

python_binary(
    name = "run",
    srcs = [
        "run.py",
    ],
    main_module = "antlir.vm.run",
    visibility = ["PUBLIC"],
    deps = [
        ":vm",
    ],
)

python_library(
    name = "tap",
    srcs = ["tap.py"],
    deps = [
        "//antlir:unshare",
    ],
)

python_library(
    name = "tpm",
    srcs = ["tpm.py"],
    deps = [
        ":common",
        "//antlir:fs_utils",
        "//antlir:unshare",
    ],
)

# defines the `Share` dataclass for vm
python_library(
    name = "share",
    srcs = ["share.py"],
    deps = ["//antlir:fs_utils"],
)

export_file(
    name = "mount-generator",
    src = "mount-generator",
    visibility = [
        "//antlir/linux/vm/...",
        "//antlir/vm/tests/...",
        "//images/...",
        "//metalos/...",
        "//ti/platform/edgeos/...",
    ],
)

python_binary(
    name = "wrap-in-vm-test-exec",
    srcs = [
        "wrap_in_vm_test_exec.py",
    ],
    main_module = "antlir.vm.wrap_in_vm_test_exec",
    visibility = ["PUBLIC"],
    deps = [
        "//antlir:common",
        "//antlir:fs_utils",
    ],
)

python_binary(
    name = "vmtest",
    srcs = [
        "vmtest.py",
    ],
    main_module = "antlir.vm.vmtest",
    visibility = ["PUBLIC"],
    deps = [
        ":common",
        ":share",
        ":vm",
        "//antlir:artifacts_dir",
        "//antlir:common",
        "//antlir:fs_utils",
    ],
)

vm.run(
    name = "default",
    vm_opts = vm.types.opts.new(
        disk = vm.types.disk.root(),
        disks = [vm.types.disk.scratch(
            interface = "nvme",
            size_mb = 1024,
        )],
        kernel = kernels.default,
    ),
)

vm.run(
    name = "default-5.19",
    vm_opts = vm.types.opts.new(
        disk = vm.types.disk.root(kernel = kernels.get("5.19")),
        disks = [vm.types.disk.scratch(
            interface = "nvme",
            size_mb = 1024,
        )],
        kernel = kernels.get("5.19"),
    ),
)

vm.run(
    name = "default-initrd-debug",
    args = [
        "--append-console",
        "--shell=console",
    ],
    vm_opts = vm.types.opts.new(
        append = [
            "initrd.break=sysinit",
            "initrd.break=initrd",
        ],
        disk = vm.types.disk.root(),
        kernel = kernels.default,
    ),
)

vm.run(
    name = "multinics",
    vm_opts = vm.types.opts.new(
        disk = vm.types.disk.root(),
        kernel = kernels.default,
        nics = 4,
    ),
)
