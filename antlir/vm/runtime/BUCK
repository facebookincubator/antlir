load("@prelude//:paths.bzl", "paths")
load("//antlir/antlir2/bzl:hoist.bzl", "hoist")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/bzl:build_defs.bzl", "alias", "buck_genrule", "internal_external")

oncall("antlir")

image.layer(
    name = "qemu-tools-rc",
    features = [
        feature.clone(
            path = path,
            src_layer = internal_external(
                fb = "//antlir/third-party/qemu:qemu",
                oss = "//third-party/antlir/qemu:qemu",
            ),
        )
        for path in [
            "/bin",
            "/libexec",
            "/share/qemu",
        ]
    ] + [
        feature.ensure_dirs_exist(dirs = "/share"),
        feature.clone(
            path = "/bin/swtpm",
            src_layer = internal_external(
                fb = "//antlir/third-party/swtpm:swtpm",
                oss = "//third-party/antlir/swtpm:swtpm",
            ),
        ),
    ],
)

alias(
    name = "qemu-tools",
    actual = internal_external(
        fb = "fbcode//antlir/vm/runtime/facebook:qemu-tools",
        oss = ":qemu-tools-rc",
    ),
)

[
    hoist(
        name = paths.basename(binary),
        executable = True,
        layer = ":qemu-tools",
        path = binary,
        visibility = ["PUBLIC"],
    )
    for binary in [
        "/bin/swtpm",
        "/bin/qemu-img",
        "/bin/qemu-system-aarch64",
        "/bin/qemu-system-x86_64",
        "/share/qemu/edk2-aarch64-code.fd",
        "/share/qemu/edk2-x86_64-code.fd",
    ]
]

hoist(
    name = "share-qemu",
    dir = True,
    layer = ":qemu-tools",
    path = "share/qemu",
    visibility = ["PUBLIC"],
)

# Just pull in all the roms
buck_genrule(
    name = "roms",
    out = ".",
    cmd = """
        find $(location :share-qemu) \\( -name '*.bin' -o -name '*.rom' \\) -exec cp {} $OUT/ \\;
    """,
    visibility = ["PUBLIC"],
)
