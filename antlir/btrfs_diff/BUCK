load("//antlir/bzl:oss_shim.bzl", "export_file", "python_binary", "python_library", "python_unittest")

python_library(
    name = "coroutine_utils",
    srcs = ["coroutine_utils.py"],
)

python_unittest(
    name = "test-coroutine-utils",
    srcs = ["tests/test_coroutine_utils.py"],
    needed_coverage = [(
        100,
        ":coroutine_utils",
    )],
    deps = [":coroutine_utils"],
)

python_library(
    name = "extent",
    srcs = ["extent.py"],
)

python_unittest(
    name = "test-extent",
    srcs = ["tests/test_extent.py"],
    needed_coverage = [(
        100,
        ":extent",
    )],
    deps = [
        ":extent",
        "//antlir:testlib_common",
    ],
)

python_library(
    name = "freeze",
    srcs = ["freeze.py"],
)

python_unittest(
    name = "test-freeze",
    srcs = ["tests/test_freeze.py"],
    needed_coverage = [(
        100,
        ":freeze",
    )],
    deps = [":freeze"],
)

python_library(
    name = "deepcopy_test",
    srcs = ["tests/deepcopy_test.py"],
    deps = ["//antlir:testlib_common"],
)

python_library(
    name = "inode_id",
    srcs = ["inode_id.py"],
    deps = [":freeze"],
)

python_unittest(
    name = "test-inode-id",
    srcs = ["tests/test_inode_id.py"],
    needed_coverage = [(
        100,
        ":inode_id",
    )],
    deps = [
        ":coroutine_utils",
        ":deepcopy_test",
        ":inode_id",
        "//antlir:testlib_common",
    ],
)

python_library(
    name = "inode",
    srcs = ["inode.py"],
    deps = [
        ":extent",
        ":inode_id",
    ],
)

python_unittest(
    name = "test-inode",
    srcs = ["tests/test_inode.py"],
    needed_coverage = [(
        100,
        ":inode",
    )],
    deps = [
        ":extents_to_chunks",
        ":inode",
        "//antlir:testlib_common",
    ],
)

python_library(
    name = "incomplete_inode",
    srcs = ["incomplete_inode.py"],
    deps = [
        ":extent",
        ":freeze",
        ":inode",
        ":inode_id",
        ":parse_send_stream",
    ],
)

python_unittest(
    name = "test-incomplete-inode",
    srcs = ["tests/test_incomplete_inode.py"],
    needed_coverage = [(
        100,
        ":incomplete_inode",
    )],
    deps = [":incomplete_inode"],
)

python_library(
    name = "extents_to_chunks",
    srcs = ["extents_to_chunks.py"],
    deps = [
        ":extent",
        ":inode",
        ":inode_id",
    ],
)

python_unittest(
    name = "test-extents-to-chunks",
    srcs = ["tests/test_extents_to_chunks.py"],
    needed_coverage = [(
        100,
        ":extents_to_chunks",
    )],
    deps = [
        ":extents_to_chunks",
        "//antlir:testlib_common",
    ],
)

python_library(
    name = "parse_send_stream",
    srcs = [
        "parse_dump.py",
        "parse_send_stream.py",
        "send_stream.py",
    ],
)

# Read the docblock of `demo_sendtreams.py` to learn about the gold data.
export_file(
    name = "gold_demo_sendstreams.pickle",
    src = "tests/gold_demo_sendstreams.pickle",
)

python_library(
    name = "testlib_demo_sendstreams",
    srcs = [
        "tests/demo_sendstreams.py",
        "tests/demo_sendstreams_expected.py",
    ],
    resources = {
        ":gold_demo_sendstreams.pickle": "tests/gold_demo_sendstreams.pickle",
    },
    deps = [
        ":testlib_render_subvols",
        ":testlib_subvolume_utils",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
    ],
)

# Use this binary to update the gold data.
python_binary(
    name = "make-demo-sendstreams",
    main_module = "antlir.btrfs_diff.tests.demo_sendstreams",
    deps = [":testlib_demo_sendstreams"],
)

python_unittest(
    name = "test-send-stream",
    srcs = [
        "tests/test_parse_dump.py",
        "tests/test_parse_send_stream.py",
    ],
    needed_coverage = [(
        100,
        ":parse_send_stream",
    )],
    deps = [
        ":parse_send_stream",
        ":testlib_demo_sendstreams",
        "//antlir:fs_utils",
        "//antlir:testlib_common",
    ],
)

python_library(
    name = "subvolume",
    srcs = [
        "rendered_tree.py",
        "subvolume.py",
    ],
    deps = [
        ":coroutine_utils",
        ":extents_to_chunks",
        ":freeze",
        ":incomplete_inode",
        ":inode_id",
        ":parse_send_stream",
    ],
)

python_library(
    name = "testlib_subvolume_utils",
    srcs = ["tests/subvolume_utils.py"],
)

python_unittest(
    name = "test-subvolume",
    srcs = ["tests/test_subvolume.py"],
    needed_coverage = [(
        100,
        ":subvolume",
    )],
    deps = [
        ":deepcopy_test",
        ":subvolume",
        ":testlib_subvolume_utils",
    ],
)

python_library(
    name = "subvolume_set",
    srcs = ["subvolume_set.py"],
    deps = [
        ":extents_to_chunks",
        ":freeze",
        ":inode_id",
        ":parse_send_stream",
        ":subvolume",
    ],
)

python_unittest(
    name = "test-subvolume-set",
    srcs = ["tests/test_subvolume_set.py"],
    needed_coverage = [(
        100,
        ":subvolume_set",
    )],
    deps = [
        ":subvolume_set",
        ":testlib_subvolume_utils",
        "//antlir:testlib_common",
    ],
)

# Future: this should have its own small, simple, explicit test.
python_library(
    name = "inode_utils",
    srcs = ["inode_utils.py"],
    deps = [
        ":incomplete_inode",
        ":inode",
    ],
)

python_library(
    name = "testlib_render_subvols",
    srcs = ["tests/render_subvols.py"],
    deps = [
        ":freeze",
        ":inode_utils",
        ":parse_send_stream",
        ":subvolume_set",
        ":testlib_subvolume_utils",
    ],
)

python_unittest(
    name = "test-sendstream-to-subvolume-set-integration",
    srcs = ["tests/test_sendstream_to_subvolume_set_integration.py"],
    needed_coverage = [(
        100,
        ":inode_utils",
    )],
    deps = [
        ":freeze",
        ":subvolume_set",
        ":testlib_demo_sendstreams",
        "//antlir:fs_utils",
        "//antlir:testlib_common",
    ],
)
