load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/bzl:build_defs.bzl", "export_file")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/linux:defs.bzl", "linux")

oncall("antlir")

# Configure the Guest -> Host networking inside the guest vm.
feature.new(
    name = "host",
    features = [
        feature.install(
            src = "eth0.network",
            dst = "/usr/lib/systemd/network/10-eth0.network",
        ),
        feature.install(
            src = "eth0.link",
            dst = "/usr/lib/systemd/network/10-eth0.link",
        ),
        # make networkd require udevd so that eth0 can move past the "link pending udev initialization" state
        systemd.install_dropin(
            "require-udevd.conf",
            "systemd-networkd.service",
        ),
        # empty resolv.conf since the only mechanism to refer to the host (by name) is via /etc/hosts
        ":resolvconf",
        feature.remove(
            must_exist = False,
            path = "/etc/hosts",
        ),
        feature.install(
            src = "etc-hosts",
            dst = "/etc/hosts",
        ),
    ],
    visibility = ["PUBLIC"],
)

# empty resolv.conf since the only mechanism to refer to the host (by name) is via /etc/hosts
feature.new(
    name = "resolvconf",
    features = [
        linux.config.network.resolv.install(
            nameservers = [],
            search_domains = [],
        ),
    ],
    visibility = ["PUBLIC"],
)

export_file(
    name = "etc-hosts",
    visibility = ["PUBLIC"],
)
