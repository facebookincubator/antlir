load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "kernel_get", "python_unittest")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/linux:defs.bzl", "linux")
load("//antlir/linux:defs.bzl", "antlir_linux_build_opts")
load(":initrd_release.bzl", "initrd_release")
load(":systemd.bzl", "clone_systemd")

image.layer(
    name = "deps",
    features = [
        image.rpms_install([
            "busybox",
            "systemd",
            "systemd-udev",
        ]),
    ],
    build_opts = antlir_linux_build_opts(),
    visibility = [
        "//antlir/linux/initrd/debug/...",
    ],
)

# Generate /etc/initrd-release based on scm/fbpkg revision info
initrd_release(
    name = "initrd-release",
)

# Kernel-agnostic base initrd
image.layer(
    name = "base",
    features = [
        linux.filesystem.install(),
        clone_systemd(":deps"),
        # TODO(vmagro): AFAICT we only require busybox for /usr/bin/mount that
        # systemd calls. Ideally, we could relegate busybox entirely to the
        # debug initrd which would save ~1.5M (the future 'antlir' multicall
        # binary could easily implement a wrapper over the mount syscall)
        linux.busybox.install(
            ":deps",
            ["mount"],
            src_path = "/usr/sbin/busybox",
        ),
        image.ensure_file_symlink("/usr/lib/systemd/systemd", "/init"),
        # Systemd uses the presence of /etc/initrd-release to determine if it
        # is running in an initrd, however there are cases where it only parses
        # /{etc,usr/lib}/os-release, so just cover all our bases with symlinks
        image.install(":initrd-release", "/usr/lib/initrd-release"),
        image.ensure_file_symlink("/usr/lib/initrd-release", "/etc/initrd-release"),
        image.ensure_file_symlink("/usr/lib/initrd-release", "/usr/lib/os-release"),
        image.ensure_file_symlink("/usr/lib/initrd-release", "/etc/os-release"),
        # This is automatically the target that systemd tries to reach when it
        # detects /etc/initrd-release, but explicitly symlinking it makes
        # systemd-analyze work as expected too
        systemd.set_default_target("initrd.target"),
        # explicitly enable systemd-networkd to configure the network links
        # early in boot
        systemd.enable_unit("systemd-networkd.service"),
        systemd.install_dropin(
            "dropins/udevd-before-trigger.conf",
            unit = "systemd-udevd.service",
        ),
    ],
    build_opts = antlir_linux_build_opts(),
    visibility = [kernel_get.base_target + "/..."],
)

# CPIO archive to which environment specific overlays are appended. For
# example, vmtest appends units that load required kernel modules and sets up
# the BTRFS seed device on /
image.package(
    name = "base.cpio.gz",
    layer = ":base",
    visibility = ["PUBLIC"],
)

python_unittest(
    name = "base-size",
    srcs = ["tests/check_size.py"],
    env = {"BASE_PACKAGE": "$(location :base.cpio.gz)"},
    deps = ["//antlir:config"],
)
