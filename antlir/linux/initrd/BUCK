load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "kernel_get", "python_unittest")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/genrule/extractor:extract.bzl", "extract")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/feature:usergroup.bzl", "SHELL_NOLOGIN")
load("//antlir/bzl/linux:defs.bzl", "linux")
load(":initrd_release.bzl", "initrd_release")
load(":systemd.bzl", "clone_systemd_configs", SYSTEMD_BINARIES = "BINARIES")

extract.source_layer(
    name = "system-deps",
    features = [
        image.rpms_install([
            "btrfs-progs",
            "systemd",
            "systemd-udev",
        ]),
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
    visibility = [
        "//antlir/linux/initrd/debug/...",
    ],
)

image.layer(
    name = "deps",
    parent_layer = ":system-deps",
    features = [
        image.install(
            "//antlir/linux/metalctl:metalctl",
            "/usr/bin/metalctl",
            mode = "a+rx",
        ),
        image.install(
            "//antlir/linux/metalos/host_configs:evaluator",
            "/usr/bin/metalos-host-config-evaluator",
            mode = "a+rx",
        ),
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
)

# Generate /etc/initrd-release based on scm/fbpkg revision info
initrd_release(
    name = "initrd-release",
)

networking = [
    # Explicitly enable systemd-networkd to configure the network links
    # early in boot
    systemd.enable_unit("systemd-networkd.service"),
    systemd.enable_unit("systemd-networkd-wait-online.service"),
    image.install("//antlir/linux/metalos:eth.network", "/usr/lib/systemd/network/20-eth.network"),
]

nss = linux.config.glibc.nsswitch.install(linux.config.glibc.nsswitch.default)

users = [
    image.install("group", "/etc/group"),
    image.install("passwd", "/etc/passwd"),
    image.install("//antlir:empty", "/etc/shadow"),
    image.install("//antlir:empty", "/usr/bin/nologin"),
    feature.group_add("systemd-network"),
    feature.user_add(
        "systemd-network",
        "systemd-network",
        "/",
        SHELL_NOLOGIN,
    ),
]

# Kernel-agnostic base initrd
image.layer(
    name = "base",
    features = [
        linux.filesystem.install(),
        clone_systemd_configs(":deps"),
        image.ensure_file_symlink("/usr/lib/systemd/systemd", "/init"),
        # Systemd uses the presence of /etc/initrd-release to determine if it
        # is running in an initrd, however there are cases where it only parses
        # /{etc,usr/lib}/os-release, so just cover all our bases with symlinks
        image.install(":initrd-release", "/usr/lib/initrd-release"),
        image.ensure_file_symlink("/usr/lib/initrd-release", "/etc/initrd-release"),
        image.ensure_file_symlink("/usr/lib/initrd-release", "/usr/lib/os-release"),
        image.ensure_file_symlink("/usr/lib/initrd-release", "/etc/os-release"),
        # This is automatically the target that systemd tries to reach when it
        # detects /etc/initrd-release, but explicitly symlinking it makes
        # systemd-analyze work as expected too
        systemd.set_default_target("initrd.target"),
        # With our custom setup, just enable initrd-cleanup.service directly in
        # initrd.target instead of going through initrd-parse-etc.service as normal
        systemd.enable_unit(
            "initrd-cleanup.service",
            target = "initrd.target",
        ),
        systemd.install_dropin(
            "dropins/reload-before-cleanup.conf",
            unit = "initrd-cleanup.service",
        ),
        systemd.install_dropin(
            "dropins/udevd-before-trigger.conf",
            unit = "systemd-udevd.service",
        ),
        networking,
        nss,
        users,
        image.ensure_subdirs_exist("/usr/lib/", "udev/rules.d"),
        image.install("udev.rules", "/usr/lib/udev/rules.d/10-metalos.rules"),
        # Due to limitations in the current extractor implementation, we have to
        # extract systemd at the same time as metalctl.
        extract.extract(
            flavor = REPO_CFG.antlir_linux_flavor,
            binaries = SYSTEMD_BINARIES + [
                "/usr/sbin/btrfs",
                "/usr/bin/metalctl",
                "/usr/bin/metalos-host-config-evaluator",
            ],
            dest = "/",
            source = ":deps",
        ),
        image.install("//antlir/linux/metalctl:default-config.toml", "/etc/metalctl.toml"),
        # metalctl provides a few utility binaries that systemd calls so we can
        # avoid importing busybox for just a few tiny commands
        image.ensure_file_symlink("/usr/bin/metalctl", "/usr/bin/mkdir"),
        image.ensure_file_symlink("/usr/bin/metalctl", "/usr/bin/mount"),
        image.ensure_file_symlink("/usr/bin/metalctl", "/usr/bin/umount"),
        systemd.install_unit("units/metalos-fetch-image@.service"),
        systemd.install_unit("units/metalos-switch-root.service"),
        systemd.enable_unit("metalos-switch-root.service", "initrd-switch-root.target", "requires"),
        image.ensure_subdirs_exist("/usr/lib/systemd", "system-generators"),
        image.ensure_file_symlink("/usr/bin/metalctl", "/usr/lib/systemd/system-generators/metalos-generator"),
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
    visibility = [
        kernel_get.base_target + "/...",
        "//antlir/linux/...",
        "//scripts/dschatzberg/vm:",
    ],
)

# CPIO archive to which environment specific overlays are appended. For
# example, vmtest appends units that load required kernel modules and sets up
# the BTRFS seed device on /
image.package(
    name = "base.cpio.gz",
    format = "cpio.gz",
    layer = ":base",
    visibility = ["PUBLIC"],
    build_appliance = flavor_helpers.default_flavor_build_appliance,
)

python_unittest(
    name = "base-size",
    srcs = ["tests/check_size.py"],
    env = {"BASE_PACKAGE": "$(location :base.cpio.gz)"},
    deps = ["//antlir:config"],
)
