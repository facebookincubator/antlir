load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "kernel_get")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/genrule/extractor:extract.bzl", "extract")
load("//antlir/bzl/linux:defs.bzl", "linux")
load("//antlir/bzl/vm:defs.bzl", "vm")
load("//antlir/bzl/vm:initrd.bzl", "initrd")
load("//antlir/linux/vm/console:defs.bzl", "console")
load("//antlir/linux/vm/generator:defs.bzl", "generator")
load("//antlir/linux/vm/network:defs.bzl", "network")
load("//antlir/linux/vm/notify:defs.bzl", "notify")
load("//antlir/linux/vm/ssh:defs.bzl", "ssh")

# TODO: we probably will want dropbear in the base initrd for remote debugging
# purposes, but for now isolate it to vmtest only
extract.source_layer(
    name = "deps",
    features = [
        image.rpms_install([
            "dropbear",
            "systemd",
        ]),
    ],
    flavor = REPO_CFG.antlir_linux_flavor,
)

binaries = extract.extract(
    flavor = REPO_CFG.antlir_linux_flavor,
    binaries = [
        "/usr/sbin/dropbear",
        "/usr/bin/dropbearkey",
        # this is unlikely to be useful in the base initrd, so keep it here in
        # vmtest-land unless anything changes
        "/usr/bin/systemd-run",
    ],
    dest = "/",
    source = ":deps",
)

ssh_server = [
    image.clone(":deps", "/usr/lib/systemd/system/dropbear.service", "/usr/lib/systemd/system/dropbear.service"),
    # vmtest synchronizes on sshd.service, so alias it to dropbear
    image.ensure_file_symlink("/usr/lib/systemd/system/dropbear.service", "/usr/lib/systemd/system/sshd.service"),
    image.ensure_subdirs_exist("/usr/lib", "tmpfiles.d"),
    image.install("dropbear.tempfiles.conf", "/usr/lib/tmpfiles.d/dropbear.conf"),
    image.ensure_dirs_exist("/etc/sysconfig"),
    image.install("dropbear", "/etc/sysconfig/dropbear"),
    image.ensure_dirs_exist("/root/.ssh"),
    systemd.install_unit("dropbear-keygen.service"),
    systemd.enable_unit(
        "dropbear.service",
        target = "initrd.target",
    ),
    ssh.test_only_login(),
]

par_support = image.install(
    "bash",
    "/usr/bin/bash",
    mode = "a+rx",
)

# Generic features that are needed to support vmtests that _stay_ in the
# initrd, meant to test the initrd itself.
image.layer(
    name = "initrd-vmtest",
    features = [
        linux.filesystem.install(),
        # shared features straight from vmtest
        console.autologin(),
        generator.mounts(),
        network.host(),
        par_support,
        ssh_server,
        notify.install(),
        # initrd-specific things below:
        binaries,
        # This is just appended to the base initrd, so make sure all the
        # directories that are needed get created
        image.ensure_subdirs_exist("/usr/lib", "systemd"),
        image.ensure_subdirs_exist("/usr/lib/systemd", "system"),
        image.ensure_subdirs_exist("/usr/lib/systemd", "system-generators"),
        image.ensure_subdirs_exist("/usr/lib/systemd", "network"),
        image.ensure_subdirs_exist("/usr/lib", "udev/rules.d"),
        image.ensure_dirs_exist("/etc/systemd/system"),
        # Some fixups for vmtest features in the limited initrd environment
        image.install("udev.rules", "/usr/lib/udev/rules.d/50-vmtest.rules"),
        # We want to stay in the initrd, so mask out the units that switch-root
        # into the base os
        systemd.mask_units([
            # debug-shell.service is always enabled in the initrd, but prevents
            # initrd.target from being reached. Debugging for vmtest should be
            # using ssh anyway unless in extra broken circumstances when
            # this can just be temporarily unmasked.
            "debug-shell.service",
            "initrd-cleanup.service",
            "initrd-parse-etc.service",
            "initrd-switch-root.service",
        ]),
    ],
)

image.package(
    name = "initrd-vmtest--append.cpio.gz",
    layer = ":initrd-vmtest",
    format = "cpio.gz",
    visibility = [],
    build_appliance = flavor_helpers.default_flavor_build_appliance,
)

# Create the default Antlir Linux initrd for this test kernel.
# This is composed of the base initrd and any kernel modules required to boot,
# as well as some basic setup for the vmtest VM environment
TEST_KERNEL = kernel_get.default

initrd(kernel = TEST_KERNEL)

# This mimics how production will actually work, a base initrd package
# concatenated with a kernel-specific cpio package containing modules followed
# by a third cpio archive with vmtest features
buck_genrule(
    name = "vmtest-initrd.cpio.gz",
    out = "initrd.cpio.gz",
    cmd = "cat $(location :{}-initrd-debug) $(location :initrd-vmtest--append.cpio.gz) > $OUT".format(TEST_KERNEL.uname),
)

vm.rust_unittest(
    name = "boots",
    vm_opts = vm.types.opts.new(
        initrd = ":vmtest-initrd.cpio.gz",
        kernel = TEST_KERNEL,
    ),
    srcs = ["test_boots.rs"],
    crate_root = "test_boots.rs",
)
