load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/testing:image_test.bzl", "image_sh_test")
load("//antlir/bzl:build_defs.bzl", "internal_external", "rust_binary")

oncall("antlir")

image.layer(
    name = "base",
    features = [
        # dependencies of the test
        feature.rpms_install(rpms = [
            "bash",
            "util-linux",
        ]),
    ],
)

rust_binary(
    name = "binary_1",
    srcs = ["main.rs"],
    unittests = False,
)

rust_binary(
    name = "binary_2",
    srcs = ["main.rs"],
    unittests = False,
)

image.layer(
    name = "extract-buck",
    features = [
        feature.extract_buck_binary(
            src = ":binary_1",
            dst = "/usr/bin/test-binary-extracted",
        ),
    ],
    labels = internal_external(
        fb = [],
        oss = ["disabled"],
    ),
    parent_layer = ":base",
)

image_sh_test(
    name = "extract-buck-test",
    labels = internal_external(
        fb = [],
        oss = ["disabled"],
    ),
    layer = ":extract-buck",
    test = "test-extract-buck.sh",
)

image.layer(
    name = "binaries-clone-src",
    features = [
        feature.rpms_install(rpms = ["systemd"]),
        feature.ensure_file_symlink(
            link = "/usr/bin/systemctl.link",
            target = "/usr/bin/systemctl",
        ),
    ],
)

image.layer(
    name = "binary-clone",
    features = [
        feature.ensure_dirs_exist(dirs = "/usr/bin"),
        feature.clone(
            dst_path = "/usr/bin/systemctl",
            src_layer = ":binaries-clone-src",
            src_path = "/usr/bin/systemctl",
        ),
    ],
    parent_layer = ":base",
)

image_sh_test(
    name = "binary-clone-fails",
    layer = ":binary-clone",
    test = "test-binary-clone-fails.sh",
)

image.layer(
    name = "extract-layer",
    features = [
        feature.ensure_dirs_exist(dirs = "/usr/bin"),
        feature.extract_from_layer(
            binaries = [
                "/usr/bin/systemctl",
            ],
            layer = ":binaries-clone-src",
        ),
    ],
    parent_layer = ":base",
)

image_sh_test(
    name = "extract-layer-test",
    layer = ":extract-layer",
    test = "test-extract-layer.sh",
)

image.layer(
    name = "extract-symlink-layer",
    features = [
        feature.ensure_dirs_exist(dirs = "/usr/bin"),
        feature.extract_from_layer(
            binaries = [
                "/usr/bin/systemctl.link",
            ],
            layer = ":binaries-clone-src",
        ),
    ],
    parent_layer = ":base",
)

image_sh_test(
    name = "extract-symlink-layer-test",
    layer = ":extract-symlink-layer",
    test = "test-extract-symlink-layer.sh",
)
