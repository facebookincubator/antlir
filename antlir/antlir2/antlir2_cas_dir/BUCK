load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/testing:image_test.bzl", "image_rust_test")
load("//antlir/bzl:build_defs.bzl", "rust_library")

oncall("antlir")

rust_library(
    name = "antlir2_cas_dir",
    srcs = glob(["src/**/*.rs"]),
    compatible_with = [
        "ovr_config//os:freebsd",
        "ovr_config//os:linux",
        "ovr_config//os:macos",
    ],
    deps = [
        "anyhow",
        "nix",
        "serde",
        "serde_json",
        "tracing",
        "walkdir",
    ],
)

image.layer(
    name = "test-layer-setup",
    features = [
        feature.rpms_install(rpms = [
            "bash",
            "coreutils",
        ]),
        feature.ensure_dirs_exist(dirs = "/src"),
        feature.ensure_dirs_exist(dirs = "/hydrated"),
        feature.install(
            src = "//antlir:empty",
            dst = "/src/empty",
        ),
        feature.ensure_dirs_exist(dirs = "/src/subdir"),
        feature.install(
            src = "//antlir:empty",
            dst = "/src/subdir/empty",
        ),
        feature.ensure_file_symlink(
            link = "/src/subdir/empty.symlink.abs",
            target = "/src/subdir/empty",
        ),
    ],
)

image.layer(
    name = "test-layer",
    features = [
        # antlir2 does not provide an api to do a hardlink
        feature.genrule(
            bash = "ln /src/empty /src/empty.link",
            user = "root",
        ),
    ],
    parent_layer = ":test-layer-setup",
)

image_rust_test(
    name = "antlir2_cas_dir-image-test",
    srcs = glob(["src/**/*.rs"]),
    layer = ":test-layer",
    rustc_flags = ["--cfg=image_test"],
    deps = [
        "anyhow",
        "nix",
        "serde",
        "serde_json",
        "tracing",
        "walkdir",
    ],
)
