/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

use std::collections::HashMap;
use std::path::PathBuf;

use antlir2_compile::Arch;
use antlir2_compile::CompilerContext;
use buck_label::Label;
use clap::Parser;

use crate::Error;
use crate::Result;

mod cas_dir;
mod compile;
mod depgraph;
mod map;
mod shell;
pub(crate) use cas_dir::CasDir;
pub(crate) use depgraph::Depgraph;
pub(crate) use map::Map;
pub(crate) use shell::Shell;

/// Args that are common to "compileish" commands (for now, 'compile' and
/// 'plan', but maybe others in the future)
#[derive(Parser, Debug)]
struct Compileish {
    #[clap(long)]
    /// Buck label of the image being built
    pub(crate) label: Label,
    #[clap(long)]
    /// Root directory of under-construction image. Must already exist (either
    /// empty or as a snapshot of a parent layer)
    pub(crate) root: PathBuf,
    #[clap(flatten)]
    pub(crate) external: CompileishExternal,
}

#[derive(Parser, Debug)]
/// Compile arguments that are _always_ passed from external sources (in other
/// words, by buck2 actions) and are never generated by internal code in the
/// 'isolate' subcommand.
struct CompileishExternal {
    #[clap(long)]
    /// Architecture of the image being built
    pub(crate) target_arch: Arch,
    #[clap(long = "depgraph")]
    /// Path to input depgraph with features to include in this image
    pub(crate) depgraph: PathBuf,
}

impl Compileish {
    pub(super) fn compiler_context(
        &self,
        plans: HashMap<String, serde_json::Value>,
    ) -> Result<CompilerContext> {
        CompilerContext::new(
            self.label.clone(),
            self.external.target_arch,
            self.root.clone(),
            plans,
        )
        .map_err(Error::Compile)
    }
}
