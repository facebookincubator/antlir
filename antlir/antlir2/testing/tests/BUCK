load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/testing:image_diff_test.bzl", "image_diff_test")
load("//antlir/antlir2/testing:image_rpms_test.bzl", "image_test_rpm_integrity", "image_test_rpm_names")
load("//antlir/antlir2/testing:image_test.bzl", "image_cpp_test", "image_python_test", "image_rust_test", "image_sh_test")
load("//antlir/antlir2/testing:test_that_should_fail.bzl", "sh_test_that_should_fail", "test_that_should_fail")
load("//antlir/bzl:build_defs.bzl", "third_party")
load("//antlir/bzl:systemd.bzl", "systemd")
load(":test.bzl", "test_variants")

oncall("antlir")

image.layer(
    name = "base",
    # systemd-v253 is broken on aarch64 under qemu-user emulation
    dnf_additional_repos = select({
        "ovr_config//cpu:arm64": [
            "//antlir/antlir2/features/rpm/tests/repo:test-repo",
            "fbcode//bot_generated/antlir/rpm/fast_snapshot/repos/centos/9/systemd-cd/aarch64:centos/9/systemd-cd/aarch64",
        ],
        "ovr_config//cpu:x86_64": [
            "//antlir/antlir2/features/rpm/tests/repo:test-repo",
        ],
    }),
    dnf_versionlock = select({
        "ovr_config//cpu:arm64": "//antlir:empty.json",
        "ovr_config//cpu:x86_64": None,
    }),
    features = [
        feature.rpms_install(rpms = [
            "systemd",
            # @oss-disable
            "foobar",
        ]),
        systemd.install_unit("slow-unit.service"),
        systemd.enable_unit(
            "slow-unit.service",
            target = "default.target",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_variants(
    srcs = ["test.cpp"],
    lang = "cpp",
    test_rule = image_cpp_test,
)

test_variants(
    srcs = ["test.py"],
    lang = "py",
    test_rule = image_python_test,
)

test_variants(
    srcs = ["test.rs"],
    crate = "test_rs",
    crate_root = "test.rs",
    lang = "rust",
    test_rule = image_rust_test,
    deps = [
        third_party.library(
            "whoami",
            platform = "rust",
        ),
        third_party.library(
            "serde_json",
            platform = "rust",
        ),
    ],
)

test_variants(
    lang = "sh",
    test = "test.sh",
    test_rule = image_sh_test,
)

image_python_test(
    name = "test-hostname",
    srcs = ["test_hostname.py"],
    hostname = "antlir2-test-hostname",
    layer = ":base",
)

image_python_test(
    name = "test-hostname-booted",
    srcs = ["test_hostname.py"],
    boot = True,
    hostname = "antlir2-test-hostname",
    layer = ":base",
)

image.layer(
    name = "foo-rpms",
    dnf_available_repos = "//antlir/antlir2/features/rpm/tests:test-repo-set",
    features = [
        feature.rpms_install(rpms = ["foobarbaz"]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

image_test_rpm_names(
    name = "test-foo-rpm-names",
    src = "foo-rpms.txt",
    layer = ":foo-rpms",
)

image.layer(
    name = "foo-rpms-not-installed",
    features = [
        feature.rpms_remove(rpms = ["foobarbaz"]),
    ],
    parent_layer = ":foo-rpms",
)

image_test_rpm_names(
    name = "test-foo-rpms-not-installed",
    src = "foo-rpms-not-installed.txt",
    layer = ":foo-rpms-not-installed",
    not_installed = True,
)

image_test_rpm_integrity(
    name = "test-foo-rpm-integrity",
    layer = ":foo-rpms",
)

image.layer(
    name = "foo-rpms-integrity-violated",
    features = [
        feature.remove(path = "/foo/bar/baz"),
    ],
    parent_layer = ":foo-rpms",
)

test_that_should_fail(
    name = "test-foo-rpm-integrity-removed-file",
    layer = ":foo-rpms-integrity-violated",
    stderr_re = "\\/foo\\/bar\\/baz owned by \\{\"foobarbaz\"\\}: \\{Missing\\}",
    test_rule = image_test_rpm_integrity,
)

image_test_rpm_integrity(
    name = "test-foo-rpm-integrity-violated-but-ignored-file",
    ignored_files = ["/foo/bar/baz"],
    layer = ":foo-rpms",
)

image_test_rpm_integrity(
    name = "test-foo-rpm-integrity-violated-but-ignored-rpm",
    ignored_rpms = ["foobarbaz"],
    layer = ":foo-rpms",
)

sh_test_that_should_fail(
    name = "test-that-should-fail",
    stderr_re = "^this is some stderr of a test that is expected to fail\n$",
    stdout_re = "^this is some stdout of a test that is expected to fail\n$",
    test = "failing_test.sh",
)

test_that_should_fail(
    name = "image-test-that-should-fail",
    layer = ":base",
    stderr_re = "^this is some stderr of a test that is expected to fail\n$",
    stdout_re = "^this is some stdout of a test that is expected to fail\n$",
    test = "failing_test.sh",
    test_rule = image_sh_test,
)

test_that_should_fail(
    name = "booted-image-test-that-should-fail",
    boot = True,
    layer = ":base",
    stderr_re = "^this is some stderr of a test that is expected to fail\n$",
    stdout_re = "^this is some stdout of a test that is expected to fail\n$",
    test = "failing_test.sh",
    test_rule = image_sh_test,
)

image.layer(
    name = "diff_test",
    dnf_additional_repos = [
        "//antlir/antlir2/features/rpm/tests/repo:test-repo",
    ],
    features = [
        feature.ensure_dirs_exist(
            dirs = "/home/diff_test",
            mode = 0o755,
        ),
        feature.rpms_install(rpms = ["foo"]),
        feature.rpms_remove_if_exists(rpms = ["foobar"]),
    ],
    parent_layer = ":base",
)

image_diff_test(
    name = "test-image-diff",
    diff = "image_diff.toml",
    exclude = ["usr/lib/sysimage/rpm/rpmdb.sqlite"],
    layer = ":diff_test",
)
