load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/testing:image_rpms_test.bzl", "image_test_rpm_names")
load("//antlir/antlir2/testing:image_test.bzl", "image_cpp_test", "image_python_test", "image_rust_test", "image_sh_test")
load("//antlir/bzl:systemd.bzl", "systemd")

image.layer(
    name = "base",
    features = [
        feature.rpms_install(rpms = [
            "systemd",
            # @oss-disable
        ]),
        systemd.install_unit("slow-unit.service"),
        systemd.enable_unit(
            "slow-unit.service",
            target = "multi-user.target",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

[
    [
        image_cpp_test(
            name = "test-cpp" + ("-booted" if boot else "") + ("-requires-units" if boot == "wait-multi-user" else ""),
            srcs = ["test.cpp"],
            boot = bool(boot),
            boot_requires_units = ["multi-user.target"] if boot == "wait-multi-user" else [],
            env = {
                "ANTLIR2_TEST": "1",
                "BOOT": str(boot),
            },
            layer = ":base",
        ),
        image_python_test(
            name = "test-py" + ("-booted" if boot else "") + ("-requires-units" if boot == "wait-multi-user" else ""),
            srcs = ["test.py"],
            boot = bool(boot),
            boot_requires_units = ["multi-user.target"] if boot == "wait-multi-user" else [],
            env = {
                "ANTLIR2_TEST": "1",
                "BOOT": str(boot),
            },
            layer = ":base",
        ),
        image_rust_test(
            name = "test-rs" + ("-booted" if boot else "") + ("-requires-units" if boot == "wait-multi-user" else ""),
            srcs = ["test.rs"],
            boot = bool(boot),
            boot_requires_units = ["multi-user.target"] if boot == "wait-multi-user" else [],
            crate = "test_rs",
            crate_root = "test.rs",
            env = {
                "ANTLIR2_TEST": "1",
                "BOOT": str(boot),
            },
            layer = ":base",
        ),
        image_sh_test(
            name = "test-sh" + ("-booted" if boot else "") + ("-requires-units" if boot == "wait-multi-user" else ""),
            boot = bool(boot),
            boot_requires_units = ["multi-user.target"] if boot == "wait-multi-user" else [],
            env = {
                "ANTLIR2_TEST": "1",
                "BOOT": str(boot),
            },
            layer = ":base",
            test = "test.sh",
        ),
    ]
    for boot in [
        False,
        True,
        "wait-multi-user",
    ]
]

image.layer(
    name = "foo-rpms",
    dnf_available_repos = "//antlir/antlir2/test_images/rpms:test-repo-set",
    features = [
        feature.rpms_install(rpms = ["foobarbaz"]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

image_test_rpm_names(
    name = "test-foo-rpm-names",
    src = "foo-rpms.txt",
    layer = ":foo-rpms",
)
