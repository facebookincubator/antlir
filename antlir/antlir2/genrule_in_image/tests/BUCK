load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/genrule_in_image:genrule_in_image.bzl", "genrule_in_image")
load("//antlir/bzl:build_defs.bzl", "python_binary", "python_unittest")

oncall("antlir")

image.layer(
    name = "layer",
    features = [
        feature.rpms_install(rpms = [
            "bash",
            "coreutils",
        ]),
    ],
)

genrule_in_image(
    name = "single-file",
    out = "f",
    bash = """
        echo foo > $OUT
        echo bar >> $OUT
    """,
    layer = ":layer",
)

dir_cmd = """
    echo foo > $OUT/foo
    mkdir $OUT/bar
    echo baz > $OUT/bar/baz
"""

genrule_in_image(
    name = "dot-dir",
    out = ".",
    bash = dir_cmd,
    layer = ":layer",
)

genrule_in_image(
    name = "named-dir",
    out = "dir/",
    bash = dir_cmd,
    layer = ":layer",
)

genrule_in_image(
    name = "named-outs",
    outs = {
        "bar": "bar",
        "foo": "foo",
    },
    bash = dir_cmd,
    layer = ":layer",
)

genrule_in_image(
    name = "default-out",
    outs = {
        "bar": "bar",
        "foo": "foo",
    },
    bash = dir_cmd,
    default_out = "bar",
    layer = ":layer",
)

genrule_in_image(
    name = "buck-scratch-path",
    out = "f",
    bash = """
        echo $BUCK_SCRATCH_PATH > $OUT
        touch $BUCK_SCRATCH_PATH/foo
    """,
    layer = ":layer",
)

genrule_in_image(
    name = "cannot-write-to-buck-out",
    out = "f",
    bash = """
        if echo foo > buck-out/foo ;
        then
            echo "write should not have worked"
            exit 1
        fi
    """,
    layer = ":layer",
)

python_binary(
    name = "par",
    srcs = ["par.py"],
    main_function = "antlir.antlir2.genrule_in_image.tests.par.main",
)

image.layer(
    name = "with-xarexec",
    features = [
        # @oss-disable: 
    ],
    parent_layer = ":layer",
)

genrule_in_image(
    name = "run-exe-par",
    out = "f",
    bash = """
        $(exe :par) $OUT
    """,
    layer = ":with-xarexec",
)

image.layer(
    name = "mount-src",
    features = [
        feature.install_text(
            dst = "/file-in-mount-1",
            text = "file 1 in mounted layer",
        ),
        feature.install_text(
            dst = "/file-in-mount-2",
            text = "file 2 in mounted layer",
        ),
    ],
)

image.layer(
    name = "layer-with-mount",
    features = [
        feature.ensure_dirs_exist(dirs = "/mnt/layer"),
        feature.layer_mount(
            mountpoint = "/mnt/layer",
            source = ":mount-src",
        ),
    ],
    parent_layer = ":layer",
)

genrule_in_image(
    name = "with-mount",
    out = "f",
    bash = """
        ls /mnt/layer > $OUT
        cat /mnt/layer/file-in-mount-1 >> $OUT
    """,
    layer = ":layer-with-mount",
)

python_unittest(
    name = "test",
    srcs = ["test.py"],
    env = {
        "BUCK_SCRATCH_PATH": "$(location :buck-scratch-path)",
        "DEFAULT_OUT": "$(location :default-out)",
        "DOT_DIR": "$(location :dot-dir)",
        "EXE_PAR": "$(location :run-exe-par)",
        "NAMED_DIR": "$(location :named-dir)",
        "NAMED_OUTS": "$(location :named-outs)",
        "SINGLE_FILE": "$(location :single-file)",
        "WITH_MOUNT": "$(location :with-mount)",
    },
)
