load("//antlir/antlir2/antlir2_vm/bzl:defs.bzl", "vm")
load("//antlir/antlir2/antlir2_vm/bzl:preconfigured.bzl", "PRECONFIGURED_VM", "get_vm")
load("//antlir/bzl:build_defs.bzl", "rust_binary")
load("//metalos/vm/disks:simple.bzl", "simple_disk")

# Verify different type of tests
vm.cpp_test(
    name = "cpp-test",
    srcs = ["test.cpp"],
    env = {
        "ANTLIR2_TEST": "1",
    },
    vm_host = get_vm(),
)

vm.python_test(
    name = "python-test",
    srcs = ["test.py"],
    env = {
        "ANTLIR2_TEST": "1",
    },
    vm_host = get_vm(),
)

vm.rust_test(
    name = "rust-test",
    srcs = ["test.rs"],
    crate = "test_rs",
    crate_root = "test.rs",
    env = {
        "ANTLIR2_TEST": "1",
    },
    vm_host = get_vm(),
)

vm.sh_test(
    name = "sh-test",
    env = {
        "ANTLIR2_TEST": "1",
    },
    test = "test.sh",
    vm_host = get_vm(),
)

# Verify all pre-configured VMs
[
    vm.rust_test(
        name = "test-" + name,
        srcs = ["test.rs"],
        crate = "test_rs",
        crate_root = "test.rs",
        env = {
            "ANTLIR2_TEST": "1",
        },
        vm_host = target,
    )
    for name, target in PRECONFIGURED_VM.items()
]

# Verify bundle
vm.cpp_test(
    name = "cpp-test-bundle",
    srcs = ["test.cpp"],
    env = {
        "ANTLIR2_TEST": "1",
    },
    run_as_bundle = True,
    vm_host = get_vm(),
)

# Test for sidecar
rust_binary(
    name = "sidecar",
    srcs = ["sidecar.rs"],
    crate_root = "sidecar.rs",
    deps = [
        "anyhow",
        "clap",
        "tokio",
        "warp",
    ],
)

vm.host(
    name = "vm-with-sidecar",
    compatible_with = ["ovr_config//cpu:x86_64"],
    disks = [simple_disk.default_boot_disk],
    sidecar_services = [
        "$(exe :sidecar)",
        "$(exe :sidecar) --port 8001",
    ],
)

vm.rust_test(
    name = "test-sidecar",
    srcs = ["test_sidecar.rs"],
    crate = "test_sidecar",
    crate_root = "test_sidecar.rs",
    vm_host = ":vm-with-sidecar",
    deps = [
        "reqwest",
        "tokio",
        ":sidecar",
    ],
)
