load("//antlir/antlir2/antlir2_vm/bzl:defs.bzl", "vm")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/bzl:build_defs.bzl", "rust_binary")
load("//metalos/kernel/bzl:defs.bzl", "metalos_kernel")
load("//metalos/vm/disks:simple.bzl", "simple_disk")
load("//metalos/vm/initrd:defs.bzl", "initrd")

oncall("twimage")

rust_binary(
    name = "antlir2_vm",
    srcs = glob(["src/**/*.rs"]),
    test_deps = [
        "regex",
    ],
    visibility = ["PUBLIC"],
    deps = [
        "anyhow",
        "clap",
        "derive_builder",
        "once_cell",
        "serde",
        "tempfile",
        "thiserror",
        "tracing",
        "tracing-subscriber",
        "//antlir:find_root",
        "//antlir/antlir2/antlir2_isolate:antlir2_isolate",
        "//antlir/antlir2/testing/image_test:image_test_lib",
        "//antlir/filesystem/absolute_path:absolute_path",
        "//antlir/util/cli/json_arg:json_arg",
    ],
)

# We isolate VM inside systemd-nspawn container. This is the image layer
# for the container with tools we need for VM tests.
image.layer(
    name = "container-image",
    features = [
        feature.rpms_install(rpms = [
            "fb-xarexec",  # for @mode/opt python tests @oss-disable
            "glib2",  # for qemu-img
            "iproute",  # for NIC configuration
            "numactl-libs",  # for qemu-system
            "openssh-clients",  # for ssh shell
            "pixman",  # for qemu-system
            "systemd-container",  # for systemd-detect-virt
            "virtiofsd",  # rust virtiofsd
        ]),
        feature.install(
            src = "//antlir/linux/vm/ssh:privkey",
            dst = "/antlir/.privkey",
            mode = "u+r",
        ),
        feature.ensure_dirs_exist(dirs = "/antlir"),
    ],
    flavor = "//antlir/antlir2/facebook/flavor/centos9:centos9",
    visibility = ["PUBLIC"],
)

vm.host(
    name = "default-disk-boot",
    compatible_with = ["ovr_config//cpu:x86_64"],
    disks = [simple_disk.default_boot_disk],
    visibility = ["PUBLIC"],
)

vm.host(
    name = "disk-boot-5.19",
    compatible_with = ["ovr_config//cpu:x86_64"],
    disks = [simple_disk.get_boot_disk(
        arch = "x86_64",
        interface = "virtio-blk",
        uname = "5.19",
    )],
)

vm.host(
    name = "default-nondisk-boot",
    compatible_with = ["ovr_config//cpu:x86_64"],
    disks = [simple_disk.default_control_disk],
    initrd = initrd.default,
    kernel = metalos_kernel.default.vmlinuz,
    visibility = ["PUBLIC"],
)

vm.host(
    name = "nondisk-boot-5.19",
    compatible_with = ["ovr_config//cpu:x86_64"],
    disks = [simple_disk.get_control_disk(
        arch = "x86_64",
        interface = "virtio-blk",
        uname = "5.19",
    )],
    initrd = initrd.get("x86_64", "5.19"),
    kernel = metalos_kernel.get("x86_64", "5.19").vmlinuz,
)

vm.host(
    name = "default-nvme-disk-boot",
    compatible_with = ["ovr_config//cpu:x86_64"],
    disks = [
        simple_disk.get_boot_disk(
            arch = metalos_kernel.default.arch,
            interface = "nvme",
            uname = metalos_kernel.default.uname,
        ),
    ],
    visibility = ["PUBLIC"],
)
