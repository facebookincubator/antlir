load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/bzl:build_defs.bzl", "rust_binary")

oncall("antlir")

rust_binary(
    name = "antlir2_vm",
    srcs = glob(["src/**/*.rs"]),
    visibility = ["PUBLIC"],
    deps = [
        "anyhow",
        "clap",
        "derive_builder",
        "once_cell",
        "serde",
        "serde_json",
        "tempfile",
        "thiserror",
        "tracing",
        "tracing-subscriber",
        "uuid",
        "//antlir:find_root",
        "//antlir/antlir2/antlir2_isolate:antlir2_isolate",
        "//antlir/antlir2/testing/image_test:image_test_lib",
        "//antlir/util/cli/json_arg:json_arg",
    ],
)

feature.new(
    name = "vm-firmwares",
    features = [
        feature.rpms_install(rpms = [
            "edk2-ovmf",
            "edk2-aarch64",
        ]),
        # QEMU aarch64 expects the firmware to be exactly 64M, but the edk2
        # firwmare for aarch64 is not padded, so just extend it during the image
        # build instead of at runtime
        feature.genrule(
            bash = """
                truncate -s 64M /usr/share/edk2/aarch64/QEMU_EFI.fd
            """,
            user = "root",
        ),
    ],
)

# We isolate VM inside systemd-nspawn container. This is the image layer
# for the container with tools we need for VM tests.
image.layer(
    name = "container-image",
    features = [
        feature.rpms_install(rpms = [
            "fb-xarexec",  # for @mode/opt python tests @oss-disable
            "glib2",  # for qemu-img
            "iproute",  # for NIC configuration
            "numactl-libs",  # for qemu-system
            "openssh-clients",  # for ssh shell
            "qemu-system-x86",  # run a VM
            "qemu-system-aarch64",  # run a VM
            "qemu-img",  # manipulate disk images
            "swtpm",  # emulate TPM in software
            "systemd-container",  # for systemd-detect-virt
            "virtiofsd",  # rust virtiofsd
        ]),
        feature.install(
            src = "//antlir/linux/vm/ssh:privkey",
            dst = "/antlir/.privkey",
            mode = "u+r",
        ),
        # Don't let random configurations sneak in - we want this tightly
        # controlled since it's a very constrained environment and a somewhat
        # unique setup to just SSH into the local VM
        feature.remove(path = "/etc/ssh/ssh_config.d"),
        feature.ensure_dirs_exist(dirs = "/antlir"),
        ":vm-firmwares",
    ],
    visibility = ["PUBLIC"],
)
