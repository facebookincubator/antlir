load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/bzl:build_defs.bzl", "buck_genrule")
load(":defs.bzl", "bad_depgraph", "good_depgraph")

oncall("antlir")

bad_depgraph(
    name = "cycle",
    error_regex = "^cycle in dependency graph:(.|\n)*install(.|\n)*user",
    features = [
        # user_add has a dep on an executable shell file (is is not part of the cycle)
        feature.install(
            src = "//antlir:empty",
            dst = "/fakeshell",
            mode = "a+rx",
        ),
        feature.ensure_dirs_exist(dirs = "/etc"),
        # create a new user, this will add a requirement on /etc/passwd
        feature.user_add(
            home_dir = "/",
            primary_group = "root",
            shell = "/fakeshell",
            username = "antlir",
        ),
        # install /etc/passwd to be owned by 'antlir' which creates the circular
        # dependency
        feature.install(
            src = "//antlir:empty",
            dst = "/etc/passwd",
            user = "antlir",
        ),
    ],
)

good_depgraph(
    name = "install-foo",
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

# `feature.remove` and `feature.install` cannot be composed within the same
# layer. It's a poorly designed layer if it's removing things that it's
# explicitly installing with another antlir feature (other than rpm installation
# or unpredictable genrules)
good_depgraph(
    name = "remove-foo",
    features = [
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
    ],
    parent_layer = ":install-foo",
)

# `feature.remove` and `feature.install` _can_ be combined into a single layer
# if the `remove` is targetting a file in the parent layer.
good_depgraph(
    name = "reinstall-foo",
    features = [
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
        ),
    ],
    parent_layer = ":install-foo",
)

buck_genrule(
    name = "dir",
    out = ".",
    cmd = """
        touch $OUT/foo $OUT/bar
        mkdir $OUT/qux
    """,
)

good_depgraph(
    name = "install-into-installed-dir",
    features = [
        feature.install(
            src = ":dir",
            dst = "/foo/",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/foo/baz",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

bad_depgraph(
    name = "conflict-with-installed-dir",
    error_regex = "\"\\/foo\\/bar\".*is provided by multiple features.*",
    features = [
        feature.install(
            src = ":dir",
            dst = "/foo/",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/foo/bar",
        ),
    ],
)

good_depgraph(
    name = "install-dir-and-ensure-dirs-exist",
    features = [
        feature.install(
            src = ":dir",
            dst = "/foo/bar/",
        ),
        # already created as top-level of installed `/foo/bar`
        feature.ensure_dirs_exist(dirs = "/foo/bar"),
        # already created as subdirectory of installed `/foo/bar`
        feature.ensure_dirs_exist(dirs = "/foo/bar/qux"),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

bad_depgraph(
    name = "missing-dep",
    error_regex = "\"/foo\"\\)? is required by ",
    features = [
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
    ],
)

bad_depgraph(
    name = "bad-validator",
    error_regex = "^.*/fakeshell.*\\sdoes not satisfy the validation rules: Executable\\s.*",
    features = [
        feature.ensure_dirs_exist(dirs = "/etc"),
        feature.install(
            src = "//antlir/antlir2/test_images:passwd",
            dst = "/etc/passwd",
        ),
        feature.install(
            src = "//antlir/antlir2/test_images:group",
            dst = "/etc/group",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/fakeshell",
        ),
        feature.user_add(
            home_dir = "/",
            primary_group = "root",
            # this will cause a validation error because /fakeshell is not executable
            shell = "/fakeshell",
            username = "antlir",
        ),
    ],
)

bad_depgraph(
    name = "conflict-in-same-layer",
    error_regex = "\"/foo\".*is provided by multiple features",
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
        ),
        # change the src so that two exactly-identical features don't get
        # deduped
        feature.install(
            src = "TARGETS",
            dst = "/foo",
        ),
    ],
)

good_depgraph(
    name = "simple-install",
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
        ),
        feature.ensure_dirs_exist(dirs = "/etc"),
        feature.install(
            src = "//antlir/antlir2/test_images:passwd",
            dst = "/etc/passwd",
        ),
        feature.install(
            src = "//antlir/antlir2/test_images:group",
            dst = "/etc/group",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/fakeshell",
            mode = "a+rx",
        ),
        feature.user_add(
            home_dir = "/",
            primary_group = "antlir",
            shell = "/fakeshell",
            username = "antlir",
        ),
        feature.group_add(groupname = "antlir"),
        feature.install(
            src = "//antlir:empty",
            dst = "/owned-by-antlir",
            group = "antlir",
            user = "antlir",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

good_depgraph(
    name = "dep-in-parent",
    features = [
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
    ],
    parent_layer = ":simple-install",
)

bad_depgraph(
    name = "conflict-with-parent",
    error_regex = "\"/foo\".*is provided by multiple features",
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
            mode = "u+r",
        ),
    ],
    parent = ":simple-install",
)

bad_depgraph(
    name = "symlink-conflict-with-parent",
    error_regex = "\"/foo\".*is provided by multiple features",
    features = [
        feature.ensure_file_symlink(
            link = "/foo",
            target = "/dev/null",
        ),
    ],
    parent = ":simple-install",
)

bad_depgraph(
    name = "clone-with-missing-src",
    error_regex = "does not satisfy the validation rules: ItemInLayer \\{ key: Path\\(\"/bar\"\\), validator: Exists \\}",
    features = [
        feature.ensure_dirs_exist(dirs = "/cloned"),
        feature.clone(
            dst_path = "/cloned/bar",
            src_layer = ":simple-install",
            src_path = "/bar",
        ),
    ],
)

good_depgraph(
    name = "clone-dir-src",
    features = [
        feature.ensure_dirs_exist(dirs = "/clone/src/dir"),
        feature.install(
            src = "//antlir:empty",
            dst = "/clone/src/dir/foo",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

bad_depgraph(
    name = "clone-conflict-inside-dir",
    error_regex = "^Path\\(Entry\\(FsEntry \\{ path: \"/cloned/foo\", file_type: File, mode: 292 \\}\\)\\) is provided by multiple features",
    features = [
        feature.ensure_dirs_exist(dirs = "/cloned"),
        feature.clone(
            dst_path = "/cloned/",
            src_layer = ":clone-dir-src",
            src_path = "/clone/src/dir/",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/cloned/bar",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/cloned/foo",
        ),
    ],
)

bad_depgraph(
    name = "clone-with-missing-user",
    error_regex = "^User\\(\"antlir\"\\) is required ",
    features = [
        feature.clone(
            dst_path = "/dst",
            src_layer = ":simple-install",
            src_path = "/owned-by-antlir",
        ),
    ],
)

good_depgraph(
    name = "overlapping-ensure-dirs-exist",
    features = [
        feature.ensure_dirs_exist(dirs = "/foo/bar/baz"),
        ":external-feature-overlapping-dirs",
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

feature.new(
    name = "external-feature-overlapping-dirs",
    features = [
        feature.ensure_dirs_exist(dirs = "/foo/bar/baz/qux"),
    ],
)

good_depgraph(
    name = "validation-follows-symlinks",
    features = [
        feature.ensure_dirs_exist(dirs = "/usr/bin"),
        feature.ensure_dir_symlink(
            link = "/bin",
            target = "/usr/bin",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/usr/bin/bash",
            mode = "a+rx",
        ),
        feature.user_add(
            home_dir = "/",
            primary_group = "root",
            # /bin/bash is behind a symlink
            shell = "/bin/bash",
            username = "antlir",
        ),
        feature.ensure_dirs_exist(dirs = "/etc"),
        feature.install(
            src = "//antlir/antlir2/test_images:passwd",
            dst = "/etc/passwd",
        ),
        feature.install(
            src = "//antlir/antlir2/test_images:group",
            dst = "/etc/group",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

good_depgraph(
    name = "validation-follows-relative-symlinks",
    features = [
        feature.ensure_dirs_exist(dirs = "/usr/bin"),
        feature.ensure_dir_symlink(
            link = "/bin",
            target = "usr/bin",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/usr/bin/bash",
            mode = "a+rx",
        ),
        feature.user_add(
            home_dir = "/",
            primary_group = "root",
            # /bin/bash is behind a relative symlink
            shell = "/bin/bash",
            username = "antlir",
        ),
        feature.ensure_dirs_exist(dirs = "/etc"),
        feature.install(
            src = "//antlir/antlir2/test_images:passwd",
            dst = "/etc/passwd",
        ),
        feature.install(
            src = "//antlir/antlir2/test_images:group",
            dst = "/etc/group",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

good_depgraph(
    name = "unordered-requirements",
    features = [
        feature.ensure_dirs_exist(dirs = "/usr/sbin"),
        feature.install(
            src = "//antlir:empty",
            dst = "/usr/sbin/nologin",
            mode = "a+rx",
        ),
        feature.ensure_dirs_exist(dirs = "/etc"),
        feature.install(
            src = "//antlir/antlir2/test_images:passwd",
            dst = "/etc/passwd",
        ),
        feature.install(
            src = "//antlir/antlir2/test_images:group",
            dst = "/etc/group",
        ),
        feature.ensure_dirs_exist(dirs = "/home"),
        feature.ensure_subdirs_exist(
            group = "antlir",
            into_dir = "/home",
            subdirs_to_create = "antlir",
            user = "antlir",
        ),
        feature.user_add(
            home_dir = "/home/antlir",
            primary_group = "antlir",
            shell = "/usr/sbin/nologin",
            username = "antlir",
        ),
        feature.group_add(
            groupname = "antlir",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

good_depgraph(
    name = "install-under-symlinked-dir",
    features = [
        feature.ensure_dirs_exist(dirs = "/target"),
        feature.ensure_dir_symlink(
            link = "/symlink",
            target = "/target",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/symlink",
            subdirs_to_create = "new_directory",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/symlink/foo",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

image.layer(
    name = "mount-a",
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

image.layer(
    name = "mount-b",
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

bad_depgraph(
    name = "conflicting-mounts",
    error_regex = "\"\\/mnt\".*is provided by multiple features.*",
    features = [
        feature.layer_mount(
            mountpoint = "/mnt",
            source = ":mount-a",
        ),
        feature.layer_mount(
            mountpoint = "/mnt",
            source = ":mount-b",
        ),
    ],
)

bad_depgraph(
    name = "install-under-mount-fails",
    error_regex = "^.*/mnt.*\\sdoes not satisfy the validation rules: FileType\\(Directory\\)\\s.*",
    features = [
        feature.layer_mount(
            mountpoint = "/mnt",
            source = ":mount-a",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/mnt/empty",
        ),
    ],
)
