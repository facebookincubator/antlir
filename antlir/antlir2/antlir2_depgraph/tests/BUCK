load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load(":defs.bzl", "bad_depgraph", "good_depgraph")

bad_depgraph(
    name = "cycle",
    error = {"cycle": [
        {
            "dst": "/etc/passwd",
            "group": "root",
            "mode": 0o444,
            "separate_debug_symbols": True,
            "src": "fbcode/antlir/empty",
            "user": "antlir",
            "__feature_type": "install",
            "__label": "fbcode//antlir/antlir2/antlir2_depgraph/tests:cycle--features",
        },
        {
            "comment": None,
            "home_dir": "/",
            "name": "antlir",
            "primary_group": "root",
            "shell": "/fakeshell",
            "supplementary_groups": [],
            "uid": None,
            "__feature_type": "user",
            "__label": "fbcode//antlir/antlir2/antlir2_depgraph/tests:cycle--features",
        },
    ]},
    features = [
        # user_add has a dep on an executable shell file (is is not part of the cycle)
        feature.install(
            src = "//antlir:empty",
            dst = "/fakeshell",
            mode = "a+rx",
        ),
        feature.ensure_dirs_exist(dirs = "/etc"),
        # create a new user, this will add a requirement on /etc/passwd
        feature.user_add(
            home_dir = "/",
            primary_group = "root",
            shell = "/fakeshell",
            username = "antlir",
        ),
        # install /etc/passwd to be owned by 'antlir' which creates the circular
        # dependency
        feature.install(
            src = "//antlir:empty",
            dst = "/etc/passwd",
            mode = "a+r",
            user = "antlir",
        ),
    ],
)

good_depgraph(
    name = "install-then-remove",
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
            mode = "a+r",
        ),
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

bad_depgraph(
    name = "missing-dep",
    error = {"missing_item": {
        "key": {"path": "/foo"},
        "required_by": {
            "must_exist": True,
            "path": "/foo",
            "__feature_type": "remove",
            "__label": "fbcode//antlir/antlir2/antlir2_depgraph/tests:missing-dep--features",
        },
    }},
    features = [
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
    ],
)

bad_depgraph(
    name = "bad-validator",
    error_regex = "^.*/fakeshell.*\\sdoes not satisfy the validation rules: Executable\\s.*",
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/fakeshell",
            mode = "a+r",
        ),
        feature.user_add(
            home_dir = "/",
            primary_group = "root",
            # this will cause a validation error because /fakeshell is not executable
            shell = "/fakeshell",
            username = "antlir",
        ),
    ],
)

bad_depgraph(
    name = "conflict-in-same-layer",
    error = {"conflict": {
        "features": [
            {
                "dst": "/foo",
                "group": "root",
                "mode": 0o444,
                "separate_debug_symbols": True,
                "src": "fbcode/antlir/empty",
                "user": "root",
                "__feature_type": "install",
                "__label": "fbcode//antlir/antlir2/antlir2_depgraph/tests:conflict-in-same-layer--features",
            },
            {
                "dst": "/foo",
                "group": "root",
                "mode": 0o444,
                "separate_debug_symbols": True,
                "src": "fbcode/antlir/antlir2/antlir2_depgraph/tests/TARGETS.v2",
                "user": "root",
                "__feature_type": "install",
                "__label": "fbcode//antlir/antlir2/antlir2_depgraph/tests:conflict-in-same-layer--features",
            },
        ],
        "item": {"path": {"entry": {
            "file_type": "file",
            "mode": 0o444,
            "path": "/foo",
        }}},
    }},
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
            mode = "a+r",
        ),
        # change the src so that two exactly-identical features don't get
        # deduped
        feature.install(
            src = "TARGETS.v2",
            dst = "/foo",
            mode = "a+r",
        ),
    ],
)

good_depgraph(
    name = "simple-install",
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
            mode = "a+r",
        ),
        feature.ensure_dirs_exist(dirs = "/etc"),
        feature.install(
            src = "//antlir/antlir2/test_images:passwd",
            dst = "/etc/passwd",
            mode = "a+r",
        ),
        feature.install(
            src = "//antlir/antlir2/test_images:group",
            dst = "/etc/group",
            mode = "a+r",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/fakeshell",
            mode = "a+rx",
        ),
        feature.user_add(
            home_dir = "/",
            primary_group = "antlir",
            shell = "/fakeshell",
            username = "antlir",
        ),
        feature.group_add(groupname = "antlir"),
        feature.install(
            src = "//antlir:empty",
            dst = "/owned-by-antlir",
            group = "antlir",
            mode = "a+r",
            user = "antlir",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

good_depgraph(
    name = "dep-in-parent",
    features = [
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
    ],
    parent_layer = ":simple-install",
)

bad_depgraph(
    name = "conflict-with-parent",
    error = {"conflict": {
        "features": [
            {
                "dst": "/foo",
                "group": "root",
                "mode": 0o444,
                "separate_debug_symbols": True,
                "src": "fbcode/antlir/empty",
                "user": "root",
                "__feature_type": "install",
                "__label": "fbcode//antlir/antlir2/antlir2_depgraph/tests:simple-install--features",
            },
            {
                "dst": "/foo",
                "group": "root",
                "mode": 0o400,
                "separate_debug_symbols": True,
                "src": "fbcode/antlir/empty",
                "user": "root",
                "__feature_type": "install",
                "__label": "fbcode//antlir/antlir2/antlir2_depgraph/tests:conflict-with-parent--features",
            },
        ],
        "item": {"path": {"entry": {
            "file_type": "file",
            "mode": 0o444,
            "path": "/foo",
        }}},
    }},
    features = [
        feature.install(
            src = "//antlir:empty",
            dst = "/foo",
            mode = "u+r",
        ),
    ],
    parent = ":simple-install",
)

bad_depgraph(
    name = "clone-with-missing-src",
    error_regex = "does not satisfy the validation rules: ItemInLayer \\{ key: Path\\(\"/bar\"\\), validator: Exists \\}",
    features = [
        feature.ensure_dirs_exist(dirs = "/cloned"),
        feature.clone(
            dst_path = "/cloned/bar",
            src_layer = ":simple-install",
            src_path = "/bar",
        ),
    ],
)

good_depgraph(
    name = "clone-dir-src",
    features = [
        feature.ensure_dirs_exist(dirs = "/clone/src/dir"),
        feature.install(
            src = "//antlir:empty",
            dst = "/clone/src/dir/foo",
            mode = "a+r",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

bad_depgraph(
    name = "clone-conflict-inside-dir",
    error_regex = "^Path\\(Entry\\(FsEntry \\{ path: \"/cloned/foo\", file_type: File, mode: 292 \\}\\)\\) is provided by multiple features",
    features = [
        feature.ensure_dirs_exist(dirs = "/cloned"),
        feature.clone(
            dst_path = "/cloned/",
            src_layer = ":clone-dir-src",
            src_path = "/clone/src/dir/",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/cloned/bar",
            mode = "a+r",
        ),
        feature.install(
            src = "//antlir:empty",
            dst = "/cloned/foo",
            mode = "a+r",
        ),
    ],
)

bad_depgraph(
    name = "clone-with-missing-user",
    error_regex = "^User\\(\"antlir\"\\) is required ",
    features = [
        feature.clone(
            dst_path = "/dst",
            src_layer = ":simple-install",
            src_path = "/owned-by-antlir",
        ),
    ],
)

good_depgraph(
    name = "overlapping-ensure-dirs-exist",
    features = [
        feature.ensure_dirs_exist(dirs = "/foo/bar/baz"),
        ":external-feature-overlapping-dirs",
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

feature.new(
    name = "external-feature-overlapping-dirs",
    features = [
        feature.ensure_dirs_exist(dirs = "/foo/bar/baz/qux"),
    ],
)
