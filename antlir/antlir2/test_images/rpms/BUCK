load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/bzl:build_defs.bzl", "buck_genrule", "python_binary")
load("//antlir/rpm/dnf2buck:repo.bzl", "repo_set")
load(":defs.bzl", "expected_t", "test_rpms")

repo_set(
    name = "test-repo-set",
    repo_sets = select({
        "ovr_config//cpu:arm64": [
            "//bot_generated/antlir/rpm/fast_snapshot/by_flavor:centos9-aarch64",
        ],
        "ovr_config//cpu:x86_64": [
            "//bot_generated/antlir/rpm/fast_snapshot/by_flavor:centos9",
        ],
    }),
    repos = ["//antlir/antlir2/test_images/rpms/repo:test-repo"],
    visibility = [
        "//antlir/antlir2/test_images/...",
        "//antlir/antlir2/testing/tests:",
    ],
)

_RPM_DEPS_OF_TEST = [
    "dnf",
    "rpm",
    # @oss-disable
]

simple = test_rpms(
    name = "simple",
    expected = expected_t(
        installed = [
            "foo-2-1",
            "foobar-2-1",
            "foobarbaz-2-1",
        ],
        installed_not_userinstalled = ["foobar"],
        not_installed = ["foo-recommends-me"],
    ),
    features = [
        feature.rpms_install(
            rpms = [
                # the main rpm I am checking
                "foo-2",
                # this depends on 'foobar' and 'foobarbaz' should be removed when 'foobar' is
                "foobarbaz",
            ] + _RPM_DEPS_OF_TEST,
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

python_binary(
    name = "test-installed-rpms",
    srcs = ["test_installed_rpms.py"],
    main_module = "antlir.antlir2.test_images.rpms.test_installed_rpms",
    visibility = [],
)

test_rpms(
    name = "remove",
    expected = expected_t(not_installed = [
        "foo",
        # 'foobar' is not explicitly installed, so removing 'foo' will remove it
        "foobar",
        "foobarbaz",
    ]),
    features = [
        feature.rpms_remove_if_exists(rpms = [
            "foo",
            "foobarbaz",
        ]),
    ],
    parent_layer = simple,
)

test_rpms(
    name = "autoremove",
    expected = expected_t(
        installed = ["foo"],
        not_installed = [
            # 'foobar' is not explicitly installed, so removing 'foobarbaz' will
            # remove it since the only thing depending on it is 'foobarbaz'
            "foobar",
            "foobarbaz",
        ],
    ),
    features = [
        feature.rpms_remove_if_exists(rpms = [
            "foobarbaz",
        ]),
    ],
    parent_layer = simple,
)

test_rpms(
    name = "upgrade",
    expected = expected_t(
        installed = ["foo-3"],
        not_installed = ["foo-2"],
    ),
    features = [
        feature.rpms_install(rpms = ["foo-3"]),
    ],
    parent_layer = simple,
)

test_rpms(
    name = "downgrade",
    expected = expected_t(
        installed = ["foo-1"],
        not_installed = ["foo-2"],
    ),
    features = [
        feature.rpms_install(rpms = ["foo-1"]),
    ],
    parent_layer = simple,
)

test_rpms(
    name = "reinstalled-package-userinstalled",
    expected = expected_t(
        userinstalled = ["foobar"],
    ),
    features = [
        feature.rpms_install(
            rpms = [
                # This is already installed, but will not show as user-installed
                # since it came from a dependency.
                # If we install it now explicitly, dnf will no-op, but it should
                # mark it as user-installed for later safety.
                "foobar",
            ],
        ),
    ],
    parent_layer = simple,
)

test_rpms(
    name = "userinstalled-package-upgraded-as-dep",
    expected = expected_t(
        userinstalled = ["foo"],
    ),
    features = [
        feature.rpms_install(
            rpms = [
                # This will trigger an upgrade of 'foo' which should still be
                # recorded as a userinstalled package
                "foobar-3",
            ],
        ),
    ],
    parent_layer = simple,
)

test_rpms(
    name = "userinstalled-package-reinstalled-as-dep",
    expected = expected_t(
        userinstalled = ["foo"],
    ),
    features = [
        feature.rpms_install(
            rpms = [
                # This may trigger a "reinstall" (no-oped) of 'foo' which should
                # still be recorded as a userinstalled package
                "foobar-3",
            ],
        ),
    ],
    parent_layer = simple,
)

test_rpms(
    name = "local-rpm-file",
    expected = expected_t(installed = ["foo-2-1"]),
    features = [
        feature.rpms_install(rpms = [
            "//antlir/antlir2/test_images/rpms/repo:foo-2-1.noarch",
        ] + _RPM_DEPS_OF_TEST),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_rpms(
    name = "remove-file-from-rpm",
    expected = expected_t(installed = ["foo"]),
    features = [
        feature.rpms_install(
            rpms = ["foo"] + _RPM_DEPS_OF_TEST,
        ),
        feature.remove(
            must_exist = True,
            path = "/foo",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

buck_genrule(
    name = "versionlock.json",
    out = "versionlock.json",
    cmd = """
        jq '.foo = "2-1"' < $(location //antlir/antlir2/test_images:test-image-flavor[default_versionlock]) > $OUT
    """,
)

test_rpms(
    name = "versionlock",
    dnf_versionlock = ":versionlock.json",
    expected = expected_t(installed = ["foo-2-1"]),
    features = [
        feature.rpms_install(rpms = [
            "foo",  # test rpm
        ] + _RPM_DEPS_OF_TEST),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_rpms(
    name = "versionlocked-dependency",
    dnf_versionlock = ":versionlock.json",
    expected = expected_t(installed = ["foo-2-1"]),
    features = [
        feature.rpms_install(
            rpms = [
                # Only explicitly install 'foobar', which depends on 'foo'.
                # Without versionlock (or if versionlock only worked on
                # explicitly-requested packages), this would pull in 'foo-3-1', but
                # when versionlock is applied to dependencies 'foo-2-1' will end up
                # being installed.
                "foobar",
            ] + _RPM_DEPS_OF_TEST,
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_rpms(
    name = "nevra-overrides-versionlock",
    dnf_versionlock = ":versionlock.json",
    expected = expected_t(installed = ["foo-3-1"]),
    features = [
        feature.rpms_install(rpms = [
            "foo-3-1",
        ] + _RPM_DEPS_OF_TEST),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

protected_installed = test_rpms(
    name = "install-protected",
    expected = expected_t(installed = ["dnf"]),
    features = [
        feature.rpms_install(rpms = [
            "dnf",
        ] + _RPM_DEPS_OF_TEST),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_rpms(
    name = "remove-protected",
    expected = expected_t(not_installed = ["dnf"]),
    features = [
        feature.rpms_remove_if_exists(rpms = [
            "dnf",
        ]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
    parent_layer = protected_installed,
)
