load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/bzl:build_defs.bzl", "python_binary")
load("//antlir/rpm/dnf2buck:repo.bzl", "repo_set")
load(":defs.bzl", "expected_t", "test_rpms")

repo_set(
    name = "test-repo-set",
    repo_sets = select({
        "ovr_config//cpu:arm64": [
            "//bot_generated/antlir/rpm/fast_snapshot/by_flavor:centos9-aarch64",
        ],
        "ovr_config//cpu:x86_64": [
            "//bot_generated/antlir/rpm/fast_snapshot/by_flavor:centos9",
        ],
    }),
    repos = ["//antlir/antlir2/test_images/rpms/repo:test-repo"],
)

image.layer(
    name = "simple",
    dnf_available_repos = ":test-repo-set",
    features = [
        feature.rpms_install(
            rpms = [
                # the main rpm I am checking
                "foo",
                # this depends on 'foobar' and 'foobarbaz' should be removed when 'foobar' is
                "foobarbaz",
                # dependencies of the test
                "rpm",
            ],
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

python_binary(
    name = "test-installed-rpms",
    srcs = ["test_installed_rpms.py"],
    main_module = "antlir.antlir2.test_images.rpms.test_installed_rpms",
    visibility = [],
)

test_rpms(
    name = "simple-test",
    expected = expected_t(installed = ["foo-3-1"]),
    layer = ":simple",
)

image.layer(
    name = "remove",
    dnf_available_repos = ":test-repo-set",
    features = [
        feature.rpms_remove_if_exists(rpms = [
            "foo",
            "foobar",
        ]),
    ],
    parent_layer = ":simple",
)

test_rpms(
    name = "remove-test",
    expected = expected_t(not_installed = [
        "foo",
        "foobar",
        # removed when we removed 'foobar'
        "foobarbaz",
    ]),
    layer = ":remove",
)

image.layer(
    name = "local-rpm-file",
    features = [
        feature.rpms_install(rpms = ["//antlir/antlir2/test_images/rpms/repo:foo-2.rpm"]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
    parent_layer = ":simple",
)

test_rpms(
    name = "local-rpm-file-test",
    expected = expected_t(installed = ["foo-2-1"]),
    layer = ":local-rpm-file",
)

image.layer(
    name = "versionlock",
    dnf_available_repos = ":test-repo-set",
    dnf_versionlock = "versionlock.json",
    features = [
        feature.rpms_install(rpms = [
            "foo",  # test rpm
            # dependencies to run test script
            "bash",
            "rpm",
        ]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_rpms(
    name = "versionlock-test",
    expected = expected_t(installed = ["foo-2-1"]),
    layer = ":versionlock",
)

image.layer(
    name = "versionlocked-dependency",
    dnf_available_repos = ":test-repo-set",
    dnf_versionlock = "versionlock.json",
    features = [
        feature.rpms_install(rpms = [
            # Only explicitly install 'foobar', which depends on 'foo'.
            # Without versionlock (or if versionlock only worked on
            # explicitly-requested packages), this would pull in 'foo-3-1', but
            # when versionlock is applied to dependencies 'foo-2-1' will end up
            # being installed.
            "foobar",
            # dependencies to run test script
            "bash",
            "rpm",
        ]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_rpms(
    name = "versionlocked-dependency-test",
    expected = expected_t(installed = ["foo-2-1"]),
    layer = ":versionlocked-dependency",
)

image.layer(
    name = "nevra-overrides-versionlock",
    dnf_available_repos = ":test-repo-set",
    dnf_versionlock = "versionlock.json",
    features = [
        feature.rpms_install(rpms = [
            "bash",
            "rpm",
            "foo-3-1",
        ]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

test_rpms(
    name = "nevra-overrides-versionlock-test",
    expected = expected_t(installed = ["foo-3-1"]),
    layer = ":nevra-overrides-versionlock",
)
