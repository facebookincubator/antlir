load("//antlir/antlir2/bzl:configured_alias.bzl", "antlir2_configured_alias")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/bzl/package:defs.bzl", "package")
load("//antlir/antlir2/package_managers/dnf/rules:repo.bzl", "repo")
load("//antlir/antlir2/package_managers/dnf/rules:rpm.bzl", "rpm")
load("//antlir/antlir2/testing:image_test.bzl", "image_rust_test")
load("//antlir/bzl:build_defs.bzl", "is_facebook")
load(":defs.bzl", "write_os")

oncall("antlir")

# This single-constraint select is useful to ensure that we can select on an ROU
# and that the default of stable is actually configured and we don't need to
# rely on DEFAULT
test_rpm_root = select({
    "//antlir/antlir2/os/facebook:rou-stable": "test-rpm-root",
}) if is_facebook else "test-rpm-root"

image.layer(
    name = "root",
    dnf_additional_repos = [":repo"],
    features = [
        feature.rpms_install(subjects = [
            select({
                "//antlir/antlir2/os/family:centos": "centos-stream-release",
                "//antlir/antlir2/os/family:fedora": "fedora-release",
            }),
            "bash",
            "coreutils",
            "rpm",
            # @oss-disable
            test_rpm_root,
        ]),
        write_os("/root.os"),
    ],
)

image.layer(
    name = "intermediate",
    dnf_additional_repos = [":repo"],
    features = [
        write_os("/intermediate.os"),
        feature.rpms_install(rpms = ["test-rpm-intermediate"]),
    ],
    parent_layer = ":root",
)

image.layer(
    name = "leaf.generic",
    dnf_additional_repos = [":repo"],
    features = [
        write_os("/leaf.os"),
        feature.rpms_install(rpms = ["test-rpm-leaf"]),
    ],
    parent_layer = ":intermediate",
)

[
    [
        image.layer(
            name = "leaf." + os,
            default_os = os,
            dnf_additional_repos = [":repo"],
            features = [
                write_os("/leaf.os"),
                feature.rpms_install(rpms = ["test-rpm-leaf"]),
            ],
            parent_layer = ":intermediate",
        ),
        image_rust_test(
            name = "test-leaf." + os,
            srcs = ["test.rs"],
            crate = "test_leaf_" + os,
            crate_root = "test.rs",
            env = {
                "OS": os,
            },
            layer = ":leaf." + os,
        ),
        image_rust_test(
            name = "test-leaf.generic." + os,
            srcs = ["test.rs"],
            crate = "test_leaf_generic_" + os,
            crate_root = "test.rs",
            default_os = os,
            env = {
                "OS": os,
            },
            layer = ":leaf.generic",
        ),
    ]
    for os in [
        "centos8",
        "centos9",
        "eln",
    ]
]

# Create synthetic test rpms that dnf will choose different versions based on
# the os version.
# The centos-stream-release rpm will be installed in the :root image which will
# be reconfigured by the children layers, but these synthetic rpms let us test
# rpm installation based on flavor reconfiguration at every level of the
# parent_layer chain.

[
    [
        image.layer(
            name = "rpm." + level,
            features = [
                feature.install_text(
                    dst = "/test_rpm_" + level,
                    text = select({
                        "//antlir/antlir2/os:centos8": "centos8",
                        "//antlir/antlir2/os:centos9": "centos9",
                        "//antlir/antlir2/os:eln": "eln",
                        "DEFAULT": "default",
                    }),
                ),
            ],
            visibility = [],
        ),
        package.rpm(
            name = "rpm." + level + "--package",
            arch = "noarch",
            layer = ":rpm." + level,
            license = "None",
            release = "1",
            requires = select({
                # Can't know what the exact version is, so do a >= on the major
                # and < on major+1 to match things like 8.6 for c8
                "//antlir/antlir2/os:centos8": [
                    "centos-stream-release >= 8",
                    "centos-stream-release < 9",
                ],
                "//antlir/antlir2/os:centos9": [
                    "centos-stream-release >= 9",
                    "centos-stream-release < 10",
                ],
                "//antlir/antlir2/os:eln": [
                    "fedora-release-eln",
                ],
                "DEFAULT": [],
            }),
            rpm_name = "test-rpm-" + level,
            version = select({
                "//antlir/antlir2/os:centos8": "centos8",
                "//antlir/antlir2/os:centos9": "centos9",
                "//antlir/antlir2/os:eln": "eln",
                "DEFAULT": "default",
            }),
            visibility = [],
        ),
        rpm(
            name = "test-rpm-" + level,
            arch = "noarch",
            epoch = 0,
            release = "1",
            rpm = ":rpm." + level + "--package",
            rpm_name = "test-rpm-" + level,
            sha256 = "deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
            version = select({
                "//antlir/antlir2/os:centos8": "centos8",
                "//antlir/antlir2/os:centos9": "centos9",
                "//antlir/antlir2/os:eln": "eln",
                "DEFAULT": "default",
            }),
            visibility = [
            ],
        ),
    ]
    for level in [
        "root",
        "intermediate",
        "leaf",
    ]
]

all_rpms = []

[
    [
        antlir2_configured_alias(
            name = "test-rpm-" + level + "." + os,
            actual = ":test-rpm-" + level,
            default_os = os,
        ),
        all_rpms.append(":test-rpm-" + level + "." + os),
    ]
    for os in [
        "centos8",
        "centos9",
        "eln",
    ]
    for level in [
        "root",
        "intermediate",
        "leaf",
    ]
]

repo(
    name = "repo",
    compress = "none",
    rpms = all_rpms,
    timestamp = 0,
    visibility = [
    ],
)
