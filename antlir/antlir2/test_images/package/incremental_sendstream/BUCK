load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/bzl/package:defs.bzl", "package")
load("//antlir/antlir2/testing:image_test.bzl", "image_python_test", "image_sh_test")
load("//antlir/bzl:build_defs.bzl", "buck_genrule")

oncall("antlir")

buck_genrule(
    name = "parent_large_file",
    out = "parent_large_file",
    cmd = """
        head -c 100M </dev/urandom >$OUT
    """,
    visibility = [],
)

image.layer(
    name = "parent",
    features = [
        feature.install(
            src = ":parent_large_file",
            dst = "/parent_large_file",
        ),
        feature.install_text(
            dst = "/foo",
            text = "foo\n",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

package.sendstream_v2(
    name = "parent.sendstream",
    layer = ":parent",
)

buck_genrule(
    name = "child_large_file",
    out = "child_large_file",
    cmd = """
        head -c 10M </dev/urandom >$OUT
    """,
    visibility = [],
)

image.layer(
    name = "child",
    features = [
        feature.install(
            src = ":child_large_file",
            dst = "/child_large_file",
        ),
        feature.install_text(
            dst = "/bar",
            text = "bar\n",
        ),
    ],
    parent_layer = ":parent",
)

package.sendstream_v2(
    name = "child.sendstream",
    incremental_parent = ":parent.sendstream",
    layer = ":child",
)

image.layer(
    name = "test-layer",
    features = [
        feature.rpms_install(rpms = [
            "bash",
            "btrfs-progs",
            "coreutils",
            "util-linux-core",
        ]),
        feature.install(
            src = ":parent.sendstream",
            dst = "/parent.sendstream",
        ),
        feature.install(
            src = ":child.sendstream",
            dst = "/child.sendstream",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

image_sh_test(
    name = "test-incremental",
    allocate_loop_devices = 1,
    # aarch64 user emulation does not support BTRFS_IOC_SET_RECEIVED_SUBVOL
    compatible_with = ["ovr_config//cpu:x86_64"],
    layer = ":test-layer",
    test = "test-incremental.sh",
)

image_python_test(
    name = "test-incremental-size",
    srcs = ["test_incremental_size.py"],
    layer = ":test-layer",
)
