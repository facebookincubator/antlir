load("//antlir/antlir2/antlir2_vm/bzl:defs.bzl", "vm")
load("//antlir/antlir2/antlir2_vm/bzl:disk.bzl", "disk")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/bzl/package:defs.bzl", "package")
load("//antlir/bzl:build_defs.bzl", "buck_genrule", "python_unittest")
load("//metalos/vm/disks:simple.bzl", "simple_disk")

oncall("antlir")

buck_genrule(
    name = "parent_large_file",
    out = "parent_large_file",
    cmd = """
        # it's important that this is properly random so that we don't have to
        # account for compression
        head -c 100M </dev/urandom >$OUT
    """,
    visibility = [],
)

image.layer(
    name = "parent",
    features = [
        feature.install(
            src = ":parent_large_file",
            dst = "/parent_large_file",
        ),
        feature.install_text(
            dst = "/foo",
            text = "foo\n",
        ),
    ],
)

package.sendstream_v2(
    name = "parent.sendstream",
    layer = ":parent",
)

buck_genrule(
    name = "child_large_file",
    out = "child_large_file",
    cmd = """
        # it's important that this is properly random so that we don't have to
        # account for compression
        head -c 10M </dev/urandom >$OUT
    """,
    visibility = [],
)

image.layer(
    name = "child",
    features = [
        feature.install(
            src = ":child_large_file",
            dst = "/child_large_file",
        ),
        feature.install_text(
            dst = "/bar",
            text = "bar\n",
        ),
    ],
    parent_layer = ":parent",
)

package.sendstream_v2(
    name = "child.sendstream",
    incremental_parent = ":parent.sendstream",
    layer = ":child",
)

image.layer(
    name = "foo",
    features = [
        feature.install_text(
            dst = "/foo",
            text = "foo",
        ),
    ],
)

vm.host(
    name = "vm",
    disks = [
        simple_disk.default_boot_disk,
        disk.create_empty_disk(
            name = "scratch-disk",
            size_mib = 1024,
        ),
    ],
)

vm.python_test(
    name = "test-incremental",
    srcs = ["test-incremental.py"],
    compatible_with = ["ovr_config//cpu:x86_64"],
    resources = {
        ":child.sendstream": "child.sendstream",
        ":parent.sendstream": "parent.sendstream",
    },
    vm_host = ":vm",
)

python_unittest(
    name = "test-incremental-size",
    srcs = ["test_incremental_size.py"],
    resources = {
        ":child.sendstream": "child.sendstream",
        ":parent.sendstream": "parent.sendstream",
    },
)
