load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/testing:image_diff_test.bzl", "image_diff_test")
load("//antlir/antlir2/testing:image_test.bzl", "image_python_test")
load("//antlir/bzl:build_defs.bzl", "buck_genrule", "buck_sh_test", "export_file", "python_binary", "rust_binary")
load("//antlir/bzl:constants.bzl", "REPO_CFG")

image.layer(
    name = "base",
    features = [
        feature.rpms_install(rpms = ["bash"]),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

image.layer(
    name = "install-file",
    features = [
        feature.install(
            src = "hello.txt",
            dst = "/hello",
            mode = "a+rw",
        ),
    ],
    parent_layer = ":base",
)

image_diff_test(
    name = "test-install-file",
    diff = "install-file.toml",
    layer = ":install-file",
)

buck_genrule(
    name = "genrule-dir",
    out = "out",
    cmd = """
      mkdir $OUT
      mkdir $OUT/foo
      touch $OUT/foo/bar
      echo "I am bar" > $OUT/foo/bar
    """,
)

image.layer(
    name = "install-dir",
    features = [
        feature.install(
            src = ":genrule-dir",
            dst = "/installed-dir/",
            mode = "a+rw,u+w",
        ),
    ],
    parent_layer = ":base",
)

image_diff_test(
    name = "test-install-dir",
    diff = "install-dir.toml",
    layer = ":install-dir",
)

image.layer(
    name = "child-image-install-dir",
    features = [
        # Create a subdir underneath a dir that exists
        # at least one level below the top of `:genrule-dir`.
        # This verifies that the dep graph is aware of sub-dirs
        # coming in implicitly.
        feature.ensure_subdirs_exist(
            into_dir = "/installed-dir/foo",
            subdirs_to_create = "child",
        ),
    ],
    parent_layer = ":install-dir",
)

image_diff_test(
    name = "test-child-image-install-dir",
    diff = "child-image-install-dir.toml",
    layer = ":child-image-install-dir",
)

# use a fresh binaries that we know will not have already been materialized for
# some other use case
rust_binary(
    name = "true-rs",
    srcs = ["true.rs"],
    crate_root = "true.rs",
    unittests = False,
)

# hide that this is a binary using an export_file, otherwise antlir2 will apply
# the binary split debuginfo feature
export_file(
    name = "true-rs.unstripped",
    src = ":true-rs",
)

python_binary(
    name = "true-py",
    srcs = ["true.py"],
    main_module = "antlir.antlir2.test_images.install.true",
)

image.layer(
    name = "installed-binary",
    features = [
        feature.rpms_install(
            rpms = [
                "bash",
                "coreutils",
                "gdb",
                # @oss-disable
            ],
        ),
        feature.install(
            src = ":true-rs",
            dst = "/usr/bin/true-rs",
        ),
        feature.install(
            src = ":true-rs.unstripped",
            dst = "/usr/bin/true-rs.unstripped",
        ),
        feature.install(
            src = ":true-py",
            dst = "/usr/bin/true-py",
        ),
    ],
    flavor = "//antlir/antlir2/test_images:test-image-flavor",
)

image_python_test(
    name = "test-installed-binary",
    srcs = ["test_installed_binary.py"],
    layer = ":installed-binary",
)

export_file(
    name = "true.precompiled",
)

buck_genrule(
    name = "deterministic-binary",
    cmd = "cp --reflink=auto $(location :true.precompiled) $OUT",
    executable = True,
)

# precompiled binary so that image_diff_test can be used to validate the split
# debug info support
image.layer(
    name = "deterministic-split-debuginfo",
    features = [
        feature.install(
            src = ":deterministic-binary",
            dst = "/true",
        ),
    ],
    parent_layer = ":base",
)

image_diff_test(
    name = "test-deterministic-split-debuginfo",
    diff = "deterministic-split-debuginfo.opt.toml",
    layer = ":deterministic-split-debuginfo",
) if not REPO_CFG.artifacts_require_repo else buck_sh_test(
    name = "test-deterministic-split-debuginfo",
    test = ":true-rs",
)
