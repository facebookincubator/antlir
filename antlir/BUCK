load("//antlir/bzl:constants.bzl", "REPO_CFG", "repo_config_t")
load("//antlir/bzl:image_gpt.bzl", "gpt_partition_t", "gpt_t")
load("//antlir/bzl:image_python_unittest.bzl", "image_python_unittest")
load("//antlir/bzl:layer_resource.bzl", "layer_resource")
load("//antlir/bzl:loopback_opts.bzl", "loopback_opts_t")
load("//antlir/bzl:oss_shim.bzl", "export_file", "python_binary", "python_library", "python_unittest", "third_party")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/compiler:defs.bzl", "TEST_IMAGE_PREFIX")

python_library(
    name = "common",
    srcs = ["common.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/cm/antlir/...",
        "//tupperware/image/scripts/...",
    ],
)

python_unittest(
    name = "test-common",
    srcs = [
        "tests/test_common.py",
    ],
    deps = [
        ":common",
    ],
)

python_library(
    name = "cli",
    srcs = ["cli.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/cm/antlir/...",
    ],
    deps = [
        ":common",
        ":fs_utils",
    ],
)

python_library(
    name = "fs_utils",
    srcs = ["fs_utils.py"],
    visibility = [
        "//antlir/...",
        "//scripts/jtru/tw:mixin-check",
        "//scripts/jtru/tw:mixin-check-library",
        "//tupperware/cm/antlir/...",
        "//tupperware/image/composable_services/tests:systemd_test_framework",
        "//tupperware/image/scripts/...",
    ],
    deps = [":common"],
)

# This helper for the `Path.resource` test exercises our most fragile
# use-case, embedding binaries within binaries.
python_binary(
    name = "test-helper-binary",
    srcs = ["tests/test_helper_binary.py"],
    main_module = "antlir.tests.test_helper_binary",
)

python_unittest(
    name = "test-fs-utils",
    srcs = [
        "tests/test_fs_utils.py",
        # Added for coverage, redundant with `test-fs-utils-path-resource-*`
        "tests/test_fs_utils_path_resource.py",
    ],
    needed_coverage = [(
        100,
        ":fs_utils",
    )],
    resources = {":test-helper-binary": "tests/helper-binary"},
    deps = [":fs_utils"],
)

export_file(
    name = "tests/test_fs_utils_path_resource.py",
)

# This is meant to get full functional coverage for `Path.resource`,
# exercising it across all supported `par_style`s.  We cannot do
# `needed_coverage` here, but `test-fs-utils` checks part of the function.
[
    python_unittest(
        name = "test-fs-utils-path-resource-" + style,
        srcs = {
            ":tests/test_fs_utils_path_resource.py": "tests/test_fs_utils_path_resource.py",
        },
        par_style = style,
        resources = {":test-helper-binary": "tests/helper-binary"},
        deps = [":fs_utils"],
    )
    for style in [
        "fastzip",
        "zip",
        # XARs are tested internally only, since OSS does not currently support
        # XAR python_binary targets
    ]
]

python_library(
    name = "testlib_layer_resource",
    srcs = ["tests/layer_resource.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg-library",
    ],
    deps = [":find_built_subvol"],
)

python_library(
    name = "testlib_subvol_helpers",
    srcs = ["tests/subvol_helpers.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg-library",
    ],
    deps = [
        ":subvol_utils",
        ":testlib_flavor_helpers",
        "//antlir/btrfs_diff:testlib_render_subvols",
    ],
)

python_library(
    name = "testlib_image_package_testbase",
    srcs = ["tests/image_package_testbase.py"],
    visibility = ["//antlir/..."],
    deps = [
        ":subvol_utils",
        ":testlib_subvol_helpers",
        ":unshare",
    ],
)

python_library(
    name = "unshare",
    srcs = ["unshare.py"],
)

python_unittest(
    name = "test-unshare",
    srcs = ["tests/test_unshare.py"],
    needed_coverage = [(
        100,
        ":unshare",
    )],
)

python_library(
    name = "loopback",
    srcs = ["loopback.py"],
    deps = [
        ":common",
        ":unshare",
    ],
)

python_unittest(
    name = "test-loopback",
    srcs = ["tests/test_loopback.py"],
    needed_coverage = [(
        100,
        ":loopback",
    )],
    resources = {
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops.sendstream",
    },
    deps = [
        ":common",
        ":fs_utils",
        ":loopback",
    ],
)

python_library(
    name = "subvol_utils",
    srcs = ["subvol_utils.py"],
    deps = [
        ":artifacts_dir",
        ":common",
        ":fs_utils",
        ":loopback",
        ":loopback_opts_t",
        ":unshare",
        "//antlir/compiler:subvolume_on_disk",
    ],
)

python_unittest(
    name = "test-subvol-utils",
    srcs = [
        "tests/test_subvol_utils.py",
        "tests/test_subvol_utils_inner.py",
    ],
    needed_coverage = [(
        100,
        ":subvol_utils",
    )],
    resources = {
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops.sendstream",
        TEST_IMAGE_PREFIX + "hello_world_base": "tests/hello_world_base",
    },
    deps = [
        ":artifacts_dir",
        ":subvol_utils",
        ":testlib_layer_resource",
        ":testlib_subvol_helpers",
        ":volume_for_repo",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
    ],
)

image_python_unittest(
    name = "test-subvol-utils-inner",
    srcs = ["tests/test_subvol_utils_inner.py"],
    hostname = "test-subvol-utils-inner",
    layer = TEST_IMAGE_PREFIX + "test-layer",
    # Needed to make subvolumes
    run_as_user = "root",
    deps = [
        ":fs_utils",
        ":subvol_utils",
    ],
)

python_library(
    name = "volume_for_repo",
    srcs = ["volume_for_repo.py"],
    # `get_volume_for_current_repo()` needs this to be our sibling in the PAR.
    resources = {"set_up_volume.sh": "set_up_volume.sh"},
    deps = [
        ":fs_utils",
        "//antlir/facebook:sudo_error",
    ],
)

python_unittest(
    name = "test-volume-for-repo",
    srcs = ["tests/test_volume_for_repo.py"],
    needed_coverage = [(
        100,
        ":volume_for_repo",
    )],
    deps = [":volume_for_repo"],
)

python_library(
    name = "artifacts_dir",
    srcs = ["artifacts_dir.py"],
    visibility = ["PUBLIC"],
    deps = [":fs_utils"],
)

python_unittest(
    name = "test-artifacts-dir",
    srcs = ["tests/test_artifacts_dir.py"],
    deps = [
        ":artifacts_dir",
    ],
)

python_library(
    name = "subvolume_garbage_collector",
    srcs = ["subvolume_garbage_collector.py"],
    deps = [
        ":fs_utils",
        ":subvol_utils",
    ],
)

python_library(
    name = "find_built_subvol",
    srcs = ["find_built_subvol.py"],
    deps = [
        ":artifacts_dir",
        ":fs_utils",
        ":subvol_utils",
        "//antlir/compiler:subvolume_on_disk",
    ],
)

python_binary(
    name = "find-built-subvol",
    main_module = "antlir.find_built_subvol",
    visibility = ["PUBLIC"],
    deps = [":find_built_subvol"],
)

python_unittest(
    name = "test-find-built-subvol",
    srcs = ["tests/test_find_built_subvol.py"],
    needed_coverage = [(
        100,
        ":find_built_subvol",
    )],
    resources = {
        TEST_IMAGE_PREFIX + "hello_world_base": "tests/hello_world_base",
    },
    deps = [":find_built_subvol"],
)

python_binary(
    name = "layer-mount-config",
    srcs = ["layer_mount_config.py"],
    main_module = "antlir.layer_mount_config",
    visibility = ["PUBLIC"],
)

python_unittest(
    name = "test-layer-mount-config",
    srcs = ["tests/test_layer_mount_config.py"],
    needed_coverage = [(100, ":layer-mount-config-library")],
)

python_unittest(
    name = "test-subvolume-garbage-collector",
    srcs = ["tests/test_subvolume_garbage_collector.py"],
    needed_coverage = [(
        100,
        ":subvolume_garbage_collector",
    )],
    deps = [
        ":subvolume_garbage_collector",
    ],
)

# No unit-test since this is simple, its output is random, and we are
# unlikely to need to change it.  Be sure to test your changes manually!
python_library(
    name = "subvolume_version",
    srcs = ["subvolume_version.py"],
)

# These binaries are basically a work-around for the fact that `sudo -C`
# is forbidden by default :/

python_binary(
    name = "recv-fds-and-run",
    srcs = ["recv_fds_and_run.py"],
    main_module = "antlir.recv_fds_and_run",
    deps = [
        ":common",
        ":fs_utils",
    ],
)

python_library(
    name = "send_fds_and_run",
    srcs = ["send_fds_and_run.py"],
    resources = {":recv-fds-and-run": "recv-fds-and-run"},
    deps = [
        ":common",
        ":fs_utils",
    ],
)

python_unittest(
    name = "test-send-fds-and-run",
    srcs = ["tests/test_send_fds_and_run.py"],
    needed_coverage = [(100, ":send_fds_and_run")],
    deps = [":send_fds_and_run"],
)

python_binary(
    name = "send-fds-and-run",
    main_module = "antlir.send_fds_and_run",
    deps = [":send_fds_and_run"],
)

# These binaries are used by `image_layer.py` as build-time helpers.

python_binary(
    name = "artifacts-dir",
    main_module = "antlir.artifacts_dir",
    visibility = ["PUBLIC"],
    deps = [":artifacts_dir"],
)

python_binary(
    name = "compiler",
    main_module = "antlir.compiler.compiler",
    visibility = ["PUBLIC"],
    deps = ["//antlir/compiler:compiler"],
)

python_binary(
    name = "subvolume-garbage-collector",
    main_module = "antlir.subvolume_garbage_collector",
    visibility = ["PUBLIC"],
    deps = [":subvolume_garbage_collector"],
)

python_binary(
    name = "subvolume-version",
    main_module = "antlir.subvolume_version",
    visibility = ["PUBLIC"],
    deps = [":subvolume_version"],
)

python_binary(
    name = "volume-for-repo",
    main_module = "antlir.volume_for_repo",
    visibility = ["PUBLIC"],
    deps = [":volume_for_repo"],
)

python_library(
    name = "update_package_db",
    srcs = ["update_package_db.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/image/scripts/...",
    ],
    deps = [
        "//antlir:common",
        "//antlir:fs_utils",
    ],
)

python_unittest(
    name = "test-update-package-db",
    srcs = ["tests/test_update_package_db.py"],
    needed_coverage = [(100, ":update_package_db")],
    deps = [":update_package_db"],
)

shape.loader(
    name = "loopback_opts_t",
    shape = loopback_opts_t,
    classname = "loopback_opts_t",
)

python_binary(
    name = "package-image",
    srcs = ["package_image.py"],
    main_module = "antlir.package_image",
    visibility = ["PUBLIC"],
    deps = [
        ":find_built_subvol",
        ":loopback_opts_t",
        ":subvol_utils",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

# Also tests the Buck macro `image_package.bzl`, but we cannot assert coverage.
python_unittest(
    name = "test-package-image",
    srcs = ["tests/test_package_image.py"],
    needed_coverage = [(100, ":package-image-library")],
    resources = {
        # Same comment re: mutate_ops as in `test_layer_from_demo_sendstreams`.
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops-original.sendstream",
        TEST_IMAGE_PREFIX + "create_ops.sendstream": "tests/create_ops.sendstream",
        TEST_IMAGE_PREFIX + "create_ops": "tests/create_ops.layer",
        TEST_IMAGE_PREFIX + "create_ops_cpio_gz": "tests/create_ops_cpio_gz",
        TEST_IMAGE_PREFIX + "create_ops_squashfs": "tests/create_ops_squashfs",
        TEST_IMAGE_PREFIX + "create_ops_ext3": "tests/create_ops_ext3",
        TEST_IMAGE_PREFIX + "create_ops-layer-via-tarball-package": "tests/create_ops-layer-via-tarball-package",
        TEST_IMAGE_PREFIX + "vfat-test.layer": "tests/vfat-test.layer",
        TEST_IMAGE_PREFIX + "vfat-test.vfat": "tests/vfat-test.vfat",
        TEST_IMAGE_PREFIX + "child-sized/layer.btrfs": "tests/fixed-size.btrfs",
        layer_resource(REPO_CFG.artifact["build_appliance.newest"]): "tests/build-appliance",
    },
    deps = [
        ":find_built_subvol",
        ":fs_utils",
        ":package-image-library",
        ":subvol_utils",
        ":testlib_flavor_helpers",
        ":testlib_image_package_testbase",
        ":testlib_layer_resource",
        ":testlib_subvol_helpers",
        ":unshare",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_unittest(
    name = "test-gpt",
    srcs = ["tests/test_gpt.py"],
    env = {
        "test-gpt-json": shape.do_not_cache_me_json(
            shape.new(
                gpt_t,
                name = "gpt_test",
                table = [
                    shape.new(
                        gpt_partition_t,
                        package = TEST_IMAGE_PREFIX + "vfat-test.vfat",
                        is_esp = True,
                    ),
                    shape.new(
                        gpt_partition_t,
                        package = TEST_IMAGE_PREFIX + "create_ops_ext3",
                        is_esp = False,
                    ),
                ],
            ),
        ),
    },
    needed_coverage = [(100, ":gpt-library")],
    resources = {
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops-original.sendstream",
        TEST_IMAGE_PREFIX + "vfat-test.vfat": "tests/vfat-test.vfat",
        TEST_IMAGE_PREFIX + "create_ops_ext3": "tests/create_ops_ext3",
        TEST_IMAGE_PREFIX + "gpt_test": "tests/gpt_test",
        layer_resource(REPO_CFG.artifact["build_appliance.newest"]): "tests/build-appliance",
    },
    deps = [
        ":gpt-library",
        ":testlib_image_package_testbase",
        ":testlib_layer_resource",
        ":unshare",
    ],
)

python_unittest(
    name = "test-execute-installed",
    srcs = ["tests/test_execute_installed.py"],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "installed-executables",
        ): "tests/exe-layer",
    },
    deps = [
        "//antlir:testlib_layer_resource",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_library(
    name = "unionfind",
    srcs = ["unionfind.py"],
    deps = [],
)

python_unittest(
    name = "test-unionfind",
    srcs = ["tests/test_unionfind.py"],
    needed_coverage = [
        (100, ":unionfind"),
    ],
    deps = [":unionfind"],
)

python_library(
    name = "test_utils",
    srcs = ["test_utils.py"],
    deps = [],
)

python_library(
    name = "shape",
    srcs = ["shape.py"],
    visibility = ["PUBLIC"],
    deps = [
        ":fs_utils",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
    ],
)

shape.loader(
    name = "repo_config_t",
    shape = repo_config_t,
    classname = "repo_config_t",
    resources = {
        shape.json_file(
            name = "config.json",
            instance = REPO_CFG,
        ): "config.json",
    },
)

python_library(
    name = "config",
    srcs = ["config.py"],
    deps = [
        ":artifacts_dir",
        ":fs_utils",
        ":repo_config_t",
    ],
)

python_unittest(
    name = "test-config",
    srcs = ["tests/test_config.py"],
    needed_coverage = [
        (100, ":config"),
    ],
    deps = [
        ":artifacts_dir",
        ":config",
        ":fs_utils",
    ],
)

python_binary(
    name = "serialize-targets-and-outputs",
    srcs = ["serialize_targets_and_outputs.py"],
    main_module = "antlir.serialize_targets_and_outputs",
    visibility = ["PUBLIC"],
)

python_unittest(
    name = "test-serialize-targets-and-outputs",
    srcs = ["tests/test_serialize_targets_and_outputs.py"],
    needed_coverage = [
        (100, ":serialize-targets-and-outputs-library"),
    ],
    deps = [
        ":serialize-targets-and-outputs-library",
    ],
)

python_library(
    name = "render_template",
    srcs = [
        "render_template.py",
    ],
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

python_binary(
    name = "compile-template",
    srcs = [
        "compile_template.py",
    ],
    main_module = "antlir.compile_template",
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

python_binary(
    name = "gpt",
    srcs = ["gpt.py"],
    main_module = "antlir.gpt",
    visibility = ["PUBLIC"],
    deps = [
        ":common",
        ":find_built_subvol",
        ":gpt_t",
        ":subvol_utils",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

shape.loader(
    name = "gpt_t",
    classname = "gpt_t",
    shape = gpt_t,
)

python_library(
    name = "testlib_flavor_helpers",
    srcs = ["tests/flavor_helpers.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg-library",
    ],
    deps = [":config"],
)

export_file(
    name = "empty",
)
