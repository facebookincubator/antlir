# @noautodeps

load("//antlir/bzl:build_defs.bzl", "buck_genrule", "buck_sh_binary", "export_file", "python_binary", "python_library", "python_unittest", "rust_binary", "rust_library", "third_party")
load("//antlir/bzl:constants.bzl", "BZL_CONST", "REPO_CFG")
load("//antlir/bzl:gpt.shape.bzl", "gpt_partition_t", "gpt_t")
load("//antlir/bzl:image_python_unittest.bzl", "image_python_unittest")
load("//antlir/bzl:layer_resource.bzl", "layer_resource")
load("//antlir/bzl:query.bzl", "query")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:target_helpers.bzl", "json_targets_and_outputs")
load("//antlir/compiler:defs.bzl", "TEST_IMAGE_PREFIX")
load("//antlir/rust:defs.bzl", "antlir_rust_extension")

oncall("twimage")

python_library(
    name = "common",
    srcs = ["common.py"],
    visibility = [
        "//antlir/...",
        "//metalos/initrd/facebook/...",
        "//tupperware/cm/...",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
    ],
)

python_unittest(
    name = "test-common",
    srcs = [
        "tests/test_common.py",
    ],
    deps = [
        ":common",
    ],
)

python_library(
    name = "testlib_common",
    srcs = ["tests/common.py"],
    visibility = [
        "//antlir/...",
        "//blockchain/custody/vault/os/...",
        "//metalos/initrd/facebook/...",
        "//ti/platform/edgeos/...",
        "//tupperware/cm/...",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
        "//virt/processvm/agent/...",
    ],
)

python_library(
    name = "cli",
    srcs = ["cli.py"],
    visibility = [
        "//antlir/...",
        "//fbpkg/caf/...",
        "//tupperware/cm/antlir/...",
        "//windtunnel/cogwheel/generators/...",
    ],
    deps = [
        ":common",
        ":config",
        ":fs_utils",
        "//antlir/buck/targets_and_outputs:targets_and_outputs_py",
    ],
)

antlir_rust_extension(
    name = "fs_utils_rs",
    srcs = ["fs_utils_rs.rs"],
    # Doesn't compile on windows.
    compatible_with = [
        "ovr_config//os:linux",
        "ovr_config//os:macos",
    ],
    crate_root = "fs_utils_rs.rs",
    rust_visibility = ["//antlir/..."],
    typestub = "fs_utils_rs.pyi",
    deps = [
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_library(
    name = "fs_utils",
    srcs = ["fs_utils.py"],
    visibility = [
        "//antlir/...",
        "//fbpkg/caf/...",
        "//metalos/initrd/facebook/...",
        "//syseng/yard/installer/...",
        "//ti/platform/edgeos/...",
        "//tupperware/cm/...",
        "//tupperware/image/composable_services/tests:systemd_test_framework",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
    ],
    deps = [
        ":common",
        ":fs_utils_rs",
    ],
)

# This helper for the `Path.resource` test exercises our most fragile
# use-case, embedding binaries within binaries.
python_binary(
    name = "test-helper-binary",
    srcs = ["tests/test_helper_binary.py"],
    main_module = "antlir.tests.test_helper_binary",
)

python_unittest(
    name = "test-fs-utils",
    srcs = [
        "tests/test_fs_utils.py",
        # Added for coverage, redundant with `test-fs-utils-path-resource-*`
        "tests/test_fs_utils_path_resource.py",
    ],
    needed_coverage = [(
        100,
        ":fs_utils",
    )],
    resources = {":test-helper-binary": "tests/helper-binary"},
    deps = [":fs_utils"],
)

python_unittest(
    name = "test-fs_utils_rs",
    srcs = ["tests/test_fs_utils_rs.py"],
    deps = [
        ":fs_utils",
        "//antlir:fs_utils_rs",
    ],
)

export_file(
    name = "tests/test_fs_utils_path_resource.py",
)

# This is meant to get full functional coverage for `Path.resource`,
# exercising it across all supported `par_style`s.  We cannot do
# `needed_coverage` here, but `test-fs-utils` checks part of the function.
[
    python_unittest(
        name = "test-fs-utils-path-resource-" + style,
        srcs = {
            ":tests/test_fs_utils_path_resource.py": "tests/test_fs_utils_path_resource.py",
        },
        par_style = style,
        resources = {":test-helper-binary": "tests/helper-binary"},
        deps = [":fs_utils"],
    )
    for style in [
        "fastzip",
        "zip",
        # XARs are tested internally only, since OSS does not currently support
        # XAR python_binary targets
    ]
]

python_library(
    name = "testlib_layer_resource",
    srcs = ["tests/layer_resource.py"],
    visibility = [
        "//antlir/...",
        "//metalos/initrd/facebook/...",
        "//tupperware/cm/antlir/tests/...",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg-library",
    ],
    deps = [
        ":cli",
        ":find_built_subvol",
    ],
)

python_library(
    name = "testlib_subvol_helpers",
    srcs = ["tests/subvol_helpers.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg-library",
    ],
    deps = [
        ":subvol_utils",
        ":testlib_flavor_helpers",
        "//antlir/btrfs_diff:testlib_render_subvols",
    ],
)

python_library(
    name = "testlib_image_package_testbase",
    srcs = ["tests/image_package_testbase.py"],
    visibility = ["//antlir/..."],
    deps = [
        ":subvol_utils",
        ":testlib_common",
        ":testlib_subvol_helpers",
        ":unshare",
    ],
)

python_library(
    name = "unshare",
    srcs = ["unshare.py"],
)

python_unittest(
    name = "test-unshare",
    srcs = ["tests/test_unshare.py"],
    needed_coverage = [(
        100,
        ":unshare",
    )],
    deps = [
        ":unshare",
    ],
)

btrfsutil_deps = [
    ":common",
    ":fs_utils",
    ":unshare",
    third_party.library(
        "python-btrfs-progs",
        "btrfsutil-py",
    ),
]

python_library(
    name = "btrfsutil",
    srcs = [
        "btrfsutil.py",
    ],
    resources = {
        ":btrfsutil-bin": "btrfsutil-bin",
    },
    type_stubs = [
        "btrfsutil.pyi",
    ],
    deps = btrfsutil_deps,
)

# the btrfsutil wrapper is also packaged as a python_binary so that it can be
# fallen back to with `sudo` in the case of permissions errors in the main
# calling process
python_binary(
    name = "btrfsutil-bin",
    srcs = ["btrfsutil.py"],
    main_module = "antlir.btrfsutil",
    visibility = ["//antlir:btrfsutil"],
    deps = btrfsutil_deps,
)

python_unittest(
    name = "test-btrfsutil",
    srcs = ["tests/test_btrfsutil.py"],
    needed_coverage = [(
        100,
        ":btrfsutil",
    )],
    deps = [
        ":artifacts_dir",
        ":btrfsutil",
        ":subvol_utils",
        ":testlib_common",
        ":unshare",
        ":volume_for_repo",
        third_party.library(
            "python-btrfs-progs",
            "btrfsutil-py",
        ),
    ],
)

antlir_rust_extension(
    name = "signed_source",
    srcs = ["signed_source.rs"],
    crate_root = "signed_source.rs",
    typestub = "signed_source.pyi",
    deps = ["//antlir/signedsource:signedsource"],
)

python_library(
    name = "subvol_utils",
    srcs = ["subvol_utils.py"],
    deps = [
        ":artifacts_dir",
        ":btrfsutil",
        ":common",
        ":fs_utils",
        ":unshare",
        "//antlir/btrfs_diff:freeze",
        "//antlir/bzl:loopback_opts.shape-python",
        "//antlir/compiler:subvolume_on_disk",
    ],
)

python_unittest(
    name = "test-subvol-utils",
    srcs = [
        "tests/test_subvol_utils.py",
        "tests/test_subvol_utils_inner.py",
    ],
    needed_coverage = [(
        100,
        ":subvol_utils",
    )],
    resources = {
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops.sendstream",
        TEST_IMAGE_PREFIX + "hello_world_base": "tests/hello_world_base",
    },
    deps = [
        ":artifacts_dir",
        ":subvol_utils",
        ":testlib_common",
        ":testlib_layer_resource",
        ":testlib_subvol_helpers",
        ":volume_for_repo",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
    ],
)

image_python_unittest(
    name = "test-subvol-utils-inner",
    srcs = ["tests/test_subvol_utils_inner.py"],
    hostname = "test-subvol-utils-inner",
    layer = TEST_IMAGE_PREFIX + "test-layer",
    # Needed to make subvolumes
    run_as_user = "root",
    deps = [
        ":fs_utils",
        ":subvol_utils",
    ],
)

python_library(
    name = "volume_for_repo",
    srcs = ["volume_for_repo.py"],
    deps = [
        ":btrfsutil",
        ":errors",
        ":fs_utils",
        "//antlir/facebook:sudo_error",
    ],
)

python_unittest(
    name = "test-volume-for-repo",
    srcs = ["tests/test_volume_for_repo.py"],
    needed_coverage = [(
        100,
        ":volume_for_repo",
    )],
    deps = [
        ":volume_for_repo",
        "//antlir:artifacts_dir",
    ],
)

antlir_rust_extension(
    name = "artifacts_dir_rs",
    srcs = ["artifacts_dir_rs.rs"],
    crate_root = "artifacts_dir_rs.rs",
    rust_visibility = ["//antlir/..."],
    typestub = "artifacts_dir_rs.pyi",
    deps = [
        ":fs_utils_rs-rust",
        "//antlir:find_root",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_library(
    name = "artifacts_dir",
    srcs = ["artifacts_dir.py"],
    visibility = ["PUBLIC"],
    deps = [
        ":artifacts_dir_rs",
        ":common",
        ":errors",
        ":fs_utils",
        "//antlir/bzl/buck_isolation:buck_isolation",
    ],
)

rust_library(
    name = "find_root",
    srcs = ["find_root.rs"],
    crate_root = "find_root.rs",
    test_deps = [
        "anyhow",
        "tempdir",
    ],
    visibility = ["PUBLIC"],
    deps = [
        "thiserror",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_unittest(
    name = "test-artifacts-dir",
    srcs = ["tests/test_artifacts_dir.py"],
    deps = [
        ":artifacts_dir",
    ],
)

python_library(
    name = "subvolume_garbage_collector",
    srcs = ["subvolume_garbage_collector.py"],
    deps = [
        ":fs_utils",
        ":subvol_utils",
    ],
)

python_library(
    name = "find_built_subvol",
    srcs = ["find_built_subvol.py"],
    deps = [
        ":artifacts_dir",
        ":find_built_subvol_rs",
        ":fs_utils",
        ":subvol_utils",
    ],
)

python_binary(
    name = "find-built-subvol",
    main_module = "antlir.find_built_subvol",
    visibility = ["PUBLIC"],
    deps = [":find_built_subvol"],
)

python_unittest(
    name = "test-find-built-subvol",
    srcs = ["tests/test_find_built_subvol.py"],
    needed_coverage = [(
        100,
        ":find_built_subvol",
    )],
    resources = {
        TEST_IMAGE_PREFIX + "hello_world_base": "tests/hello_world_base",
    },
    deps = [":find_built_subvol"],
)

python_binary(
    name = "layer-mount-config",
    srcs = ["layer_mount_config.py"],
    main_module = "antlir.layer_mount_config",
    visibility = ["PUBLIC"],
)

python_unittest(
    name = "test-layer-mount-config",
    srcs = ["tests/test_layer_mount_config.py"],
    needed_coverage = [(100, ":layer-mount-config-library")],
    deps = [
        ":layer-mount-config-library",
    ],
)

python_unittest(
    name = "test-subvolume-garbage-collector",
    srcs = ["tests/test_subvolume_garbage_collector.py"],
    needed_coverage = [(
        100,
        ":subvolume_garbage_collector",
    )],
    deps = [
        ":subvolume_garbage_collector",
    ],
)

# No unit-test since this is simple, its output is random, and we are
# unlikely to need to change it.  Be sure to test your changes manually!
python_library(
    name = "subvolume_version",
    srcs = ["subvolume_version.py"],
)

# These binaries are basically a work-around for the fact that `sudo -C`
# is forbidden by default :/

python_binary(
    name = "recv-fds-and-run",
    srcs = ["recv_fds_and_run.py"],
    main_module = "antlir.recv_fds_and_run",
    deps = [
        ":common",
        ":fs_utils",
    ],
)

python_library(
    name = "send_fds_and_run",
    srcs = ["send_fds_and_run.py"],
    resources = {":recv-fds-and-run": "recv-fds-and-run"},
    deps = [
        ":common",
        ":fs_utils",
    ],
)

python_unittest(
    name = "test-send-fds-and-run",
    srcs = ["tests/test_send_fds_and_run.py"],
    needed_coverage = [(100, ":send_fds_and_run")],
    deps = [":send_fds_and_run"],
)

python_binary(
    name = "send-fds-and-run",
    main_module = "antlir.send_fds_and_run",
    deps = [":send_fds_and_run"],
)

# These binaries are used by `image_layer.py` as build-time helpers.

python_binary(
    name = "artifacts-dir",
    main_module = "antlir.artifacts_dir",
    visibility = ["PUBLIC"],
    deps = [":artifacts_dir"],
)

python_binary(
    name = "compiler",
    main_module = "antlir.compiler.compiler",
    visibility = ["PUBLIC"],
    deps = ["//antlir/compiler:compiler"],
)

python_binary(
    name = "subvolume-garbage-collector",
    main_module = "antlir.subvolume_garbage_collector",
    visibility = ["PUBLIC"],
    deps = [":subvolume_garbage_collector"],
)

python_binary(
    name = "subvolume-version",
    main_module = "antlir.subvolume_version",
    visibility = ["PUBLIC"],
    deps = [":subvolume_version"],
)

python_binary(
    name = "volume-for-repo",
    main_module = "antlir.volume_for_repo",
    visibility = ["PUBLIC"],
    deps = [":volume_for_repo"],
)

python_library(
    name = "update_package_db",
    srcs = ["update_package_db.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/cm/antlir/...",
        "//tupperware/image/scripts/...",
    ],
    deps = [
        ":common",
        ":fs_utils",
        ":signed_source",
    ],
)

python_unittest(
    name = "test-update-package-db",
    srcs = ["tests/test_update_package_db.py"],
    needed_coverage = [(100, ":update_package_db")],
    deps = [":update_package_db"],
)

python_binary(
    name = "package-image",
    srcs = ["package_image.py"],
    main_module = "antlir.package_image",
    resources = {
        "//antlir/btrfs_send_stream_upgrade:btrfs_send_stream_upgrade": "btrfs-send-stream-upgrade",
    },
    visibility = ["PUBLIC"],
    deps = [
        ":find_built_subvol",
        ":subvol_utils",
        "//antlir/btrfs_send_stream_upgrade:btrfs_send_stream_upgrade",
        "//antlir/bzl:loopback_opts.shape-python",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

TEST_PACKAGE_RESOURCES = {
    TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops-original.sendstream",
    TEST_IMAGE_PREFIX + "create_ops.sendstream": "tests/create_ops.sendstream",
    TEST_IMAGE_PREFIX + "create_ops": "tests/create_ops.layer",
    TEST_IMAGE_PREFIX + "create_ops.cpio.gz": "tests/create_ops.cpio.gz",
    TEST_IMAGE_PREFIX + "create_ops_ext3": "tests/create_ops_ext3",
    TEST_IMAGE_PREFIX + "empty.layer": "tests/empty.layer",
    TEST_IMAGE_PREFIX + "empty_bios_boot": "tests/empty_bios_boot",
    TEST_IMAGE_PREFIX + "vfat-test.layer": "tests/vfat-test.layer",
    TEST_IMAGE_PREFIX + "vfat-test.vfat": "tests/vfat-test.vfat",
    layer_resource(TEST_IMAGE_PREFIX + "build_appliance_testing"): "tests/build-appliance-testing",
}

package_image_query = query.attrregexfilter(
    expr = query.deps(
        depth = query.UNBOUNDED,
        expr = query.set(TEST_PACKAGE_RESOURCES.keys()),
    ),
    label = "type",
    pattern = "image_layer*",
)

json_targets_and_outputs(
    name = "test-package-image-targets-and-outputs",
    query = package_image_query,
    visibility = ["//antlir:test-package-image"],
)

# Also tests the Buck macro `image/package/new.bzl`, but we cannot assert coverage.
python_unittest(
    name = "test-package-image",
    srcs = ["tests/test_package_image.py"],
    env = {
        "target_map": "$(location :test-package-image-targets-and-outputs)/targets-and-outputs.json",
    },
    needed_coverage = [(100, ":package-image-library")],
    resources = TEST_PACKAGE_RESOURCES,
    deps = [
        ":find_built_subvol",
        ":fs_utils",
        ":package-image-library",
        ":subvol_utils",
        ":testlib_flavor_helpers",
        ":testlib_image_package_testbase",
        ":testlib_layer_resource",
        ":testlib_subvol_helpers",
        ":unshare",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_unittest(
    name = "test-gpt",
    srcs = ["tests/test_gpt.py"],
    env = {
        "test-gpt-json": shape.do_not_cache_me_json(
            gpt_t(
                name = "gpt_test",
                disk_guid = "93fb3e53-4350-44ee-a98b-6a1e8fe7488f",
                table = [
                    shape.new(
                        gpt_partition_t,
                        is_bios_boot = False,
                        is_esp = True,
                        package = TEST_IMAGE_PREFIX + "vfat-test.vfat",
                    ),
                    shape.new(
                        gpt_partition_t,
                        name = "create_ops_ext3",
                        is_bios_boot = False,
                        is_esp = False,
                        package = TEST_IMAGE_PREFIX + "create_ops_ext3",
                    ),
                    shape.new(
                        gpt_partition_t,
                        is_bios_boot = True,
                        is_esp = False,
                        package = TEST_IMAGE_PREFIX + "empty_bios_boot",
                    ),
                ],
            ),
        ),
    },
    needed_coverage = [(100, ":gpt-library")],
    resources = {
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops-original.sendstream",
        TEST_IMAGE_PREFIX + "vfat-test.vfat": "tests/vfat-test.vfat",
        TEST_IMAGE_PREFIX + "create_ops_ext3": "tests/create_ops_ext3",
        TEST_IMAGE_PREFIX + "empty_bios_boot": "tests/empty_bios_boot",
        TEST_IMAGE_PREFIX + "gpt_test": "tests/gpt_test",
        layer_resource(REPO_CFG.artifact["build_appliance.newest"]): "tests/build-appliance",
    },
    deps = [
        ":gpt-library",
        ":testlib_image_package_testbase",
        ":testlib_layer_resource",
        ":unshare",
    ],
)

python_library(
    name = "unionfind",
    srcs = ["unionfind.py"],
    deps = [],
)

python_unittest(
    name = "test-unionfind",
    srcs = ["tests/test_unionfind.py"],
    needed_coverage = [
        (100, ":unionfind"),
    ],
    deps = [":unionfind"],
)

python_library(
    name = "shape",
    srcs = ["shape.py"],
    visibility = ["PUBLIC"],
    deps = [
        ":fs_utils",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
        "//antlir/btrfs_diff:freeze",
    ],
)

python_library(
    name = "config",
    srcs = ["config.py"],
    resources = {
        ":revision_time_iso8601": "revision_time_iso8601",
        ":revision_timestamp": "revision_timestamp",
        ":vcs_revision": "vcs_revision",
    },
    deps = [
        ":artifacts_dir",
        ":fs_utils",
        ":vcs-library",
        shape.python_data(
            name = "repo_config_t",
            instance = REPO_CFG,
            shape_impl = "//antlir/bzl:constants.shape",
            type_name = "repo_config_t",
        ),
    ],
)

python_binary(
    name = "print-config",
    main_module = "antlir.config",
    deps = [":config"],
)

buck_genrule(
    name = "config.json",
    out = "config.json",
    cmd = "$(exe :print-config) > $OUT",
)

rust_binary(
    name = "repo-root",
    srcs = ["repo_root.rs"],
    crate_root = "repo_root.rs",
    visibility = ["PUBLIC"],
    deps = [
        ":find_root",
    ],
)

python_library(
    name = "bzl_const",
    srcs = ["bzl_const.py"],
    deps = [
        shape.python_data(
            name = "bzl_const_t",
            instance = BZL_CONST,
            shape_impl = "//antlir/bzl:constants.shape",
            type_name = "bzl_const_t",
        ),
    ],
)

python_unittest(
    name = "test-config",
    srcs = ["tests/test_config.py"],
    needed_coverage = [
        (100, ":config"),
    ],
    deps = [
        ":artifacts_dir",
        ":config",
        ":fs_utils",
    ],
)

python_library(
    name = "render_template",
    srcs = [
        "render_template.py",
    ],
    visibility = ["PUBLIC"],
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

python_binary(
    name = "compile-template",
    srcs = [
        "compile_template.py",
    ],
    main_module = "antlir.compile_template",
    visibility = ["PUBLIC"],
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

python_binary(
    name = "gpt",
    srcs = ["gpt.py"],
    main_module = "antlir.gpt",
    visibility = ["PUBLIC"],
    deps = [
        ":common",
        ":find_built_subvol",
        ":subvol_utils",
        "//antlir/bzl:gpt.shape-python",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_binary(
    name = "rpm-manifest",
    srcs = ["rpm_manifest.py"],
    main_module = "antlir.rpm_manifest",
    visibility = ["PUBLIC"],
    deps = [
        ":common",
        ":find_built_subvol",
        ":fs_utils",
        ":subvol_utils",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_library(
    name = "testlib_flavor_helpers",
    srcs = ["tests/flavor_helpers.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg-library",
    ],
    deps = [":config"],
)

# Some rust dependencies are only used in OSS, add this target to be able to easily
# bring in third-party crates that will show up in `buck query` within fbcode
rust_library(
    name = "extra_oss_deps",
    mapped_srcs = {
        "//antlir:empty": "src/lib.rs",
    },
)

export_file(
    name = "empty",
    visibility = ["PUBLIC"],
)

export_file(
    name = "empty.json",
    visibility = ["PUBLIC"],
)

buck_sh_binary(
    name = "empty.bin",
    main = "empty.sh",
    visibility = ["PUBLIC"],
)

python_binary(
    name = "vcs",
    srcs = ["vcs.py"],
    main_module = "antlir.vcs",
    deps = [
        ":artifacts_dir",
        ":fs_utils",
    ],
)

# Note: there is no coverage metric for this because this supports
# both git and hg, but internally at Meta we can only guarantee
# that hg is present, and externally we can only guarantee that
# git is present
# For both variations we have CI that should confirm the expected
# output.
python_unittest(
    name = "test-vcs",
    srcs = ["tests/test_vcs.py"],
    deps = [":vcs-library"],
)

python_unittest(
    name = "test-signed-source",
    srcs = ["tests/test_signed_source.py"],
    deps = [
        ":signed_source",
        ":testlib_common",
    ],
)

python_library(
    name = "errors",
    srcs = ["errors.py"],
)

# Generate a vcs hash file and make it public.
buck_genrule(
    name = "vcs_revision",
    cmd = "$(exe :vcs) --rev >$OUT",
    visibility = ["PUBLIC"],
)

# Generate UNIX timestamp of the current revision and make it public.
buck_genrule(
    name = "revision_timestamp",
    cmd = "$(exe :vcs) --revision_timestamp >$OUT",
    visibility = ["PUBLIC"],
)

# Generate iso8601 datetime of the current revision and make it public.
buck_genrule(
    name = "revision_time_iso8601",
    cmd = "$(exe :vcs) --revision_time_iso8601 >$OUT",
    visibility = ["PUBLIC"],
)

rust_library(
    name = "find_built_subvol_rust_lib",
    srcs = ["find_built_subvol_lib.rs"],
    crate_root = "find_built_subvol_lib.rs",
    visibility = ["PUBLIC"],
    deps =
        [
            "anyhow",
            "serde",
            "serde_json",
            "thiserror",
            "//antlir:find_root",
            "//antlir/filesystem/absolute_path:absolute_path",
        ],
)

antlir_rust_extension(
    name = "find_built_subvol_rs",
    srcs = ["find_built_subvol_rs.rs"],
    crate_root = "find_built_subvol_rs.rs",
    typestub = "find_built_subvol_rs.pyi",
    deps = [
        ":artifacts_dir_rs-rust",
        ":find_built_subvol_rust_lib",
        ":find_root",
        ":fs_utils_rs-rust",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_binary(
    name = "delete-subvolume-recursive",
    srcs = ["delete_subvolume_recursive.py"],
    main_module = "antlir.delete_subvolume_recursive",
    deps = [":btrfsutil"],
)
