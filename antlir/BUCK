# @noautodeps

load("//antlir/bzl:build_defs.bzl", "buck_sh_binary", "export_file", "python_binary", "python_library", "python_unittest", "rust_binary", "rust_library", "third_party")
load("//antlir/rust:defs.bzl", "antlir_rust_extension")

oncall("antlir")

python_library(
    name = "common",
    srcs = ["common.py"],
    visibility = [
        "//antlir/...",
        "//metalos/initrd/facebook/...",
        "//registry/builder/fbpkg/tests/...",
        "//tupperware/cm/...",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
    ],
)

python_library(
    name = "testlib_common",
    srcs = ["tests/common.py"],
    visibility = [
        "//antlir/...",
        "//blockchain/custody/vault/os/...",
        "//metalos/initrd/facebook/...",
        "//ti/platform/edgeos/...",
        "//tupperware/cm/...",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
        "//virt/processvm/agent/...",
    ],
)

python_library(
    name = "cli",
    srcs = ["cli.py"],
    visibility = [
        "//antlir/...",
        "//fbpkg/caf/...",
        "//tupperware/cm/antlir/...",
        "//windtunnel/cogwheel/generators/...",
    ],
    deps = [
        ":common",
        ":fs_utils",
    ],
)

antlir_rust_extension(
    name = "fs_utils_rs",
    srcs = ["fs_utils_rs.rs"],
    # Doesn't compile on windows.
    compatible_with = [
        "ovr_config//os:linux",
        "ovr_config//os:macos",
    ],
    crate_root = "fs_utils_rs.rs",
    rust_visibility = ["//antlir/..."],
    typestub = "fs_utils_rs.pyi",
    deps = [
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_library(
    name = "fs_utils",
    srcs = ["fs_utils.py"],
    visibility = [
        "//antlir/...",
        "//fbpkg/caf/...",
        "//kernel/kernels:test_selection_lib",
        "//metalos/initrd/facebook/...",
        "//registry/builder/fbpkg/tests/...",
        "//syseng/yard/installer/...",
        "//ti/platform/edgeos/...",
        "//tupperware/cm/...",
        "//tupperware/image/composable_services/tests:systemd_test_framework",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
    ],
    deps = [
        ":common",
        ":fs_utils_rs",
    ],
)

python_library(
    name = "unshare",
    srcs = ["unshare.py"],
)

antlir_rust_extension(
    name = "signed_source",
    srcs = ["signed_source.rs"],
    crate_root = "signed_source.rs",
    typestub = "signed_source.pyi",
    deps = ["//antlir/signedsource:signedsource"],
)

antlir_rust_extension(
    name = "artifacts_dir_rs",
    srcs = ["artifacts_dir_rs.rs"],
    crate_root = "artifacts_dir_rs.rs",
    rust_visibility = ["//antlir/..."],
    typestub = "artifacts_dir_rs.pyi",
    deps = [
        ":fs_utils_rs-rust",
        "//antlir:find_root",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_library(
    name = "artifacts_dir",
    srcs = ["artifacts_dir.py"],
    visibility = ["PUBLIC"],
    deps = [
        ":artifacts_dir_rs",
        ":common",
        ":errors",
        ":fs_utils",
        "//antlir/bzl/buck_isolation:buck_isolation",
    ],
)

rust_library(
    name = "find_root",
    srcs = ["find_root.rs"],
    crate_root = "find_root.rs",
    test_deps = [
        "anyhow",
        "tempfile",
    ],
    visibility = ["PUBLIC"],
    deps = [
        "thiserror",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

# These binaries are used by `image_layer.py` as build-time helpers.

python_binary(
    name = "artifacts-dir",
    main_function = "antlir.artifacts_dir.main",
    visibility = ["PUBLIC"],
    deps = [":artifacts_dir"],
)

python_library(
    name = "update_package_db",
    srcs = ["update_package_db.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/cm/antlir/...",
        "//tupperware/image/scripts/...",
    ],
    deps = [
        ":common",
        ":fs_utils",
        ":signed_source",
    ],
)

python_unittest(
    name = "test-update-package-db",
    srcs = ["tests/test_update_package_db.py"],
    needed_coverage = [(100, ":update_package_db")],
    deps = [":update_package_db"],
)

python_library(
    name = "shape",
    srcs = ["shape.py"],
    visibility = ["PUBLIC"],
    deps = [
        ":fs_utils",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
        "//antlir/btrfs_diff:freeze",
    ],
)

rust_binary(
    name = "repo-root",
    srcs = ["repo_root.rs"],
    crate_root = "repo_root.rs",
    visibility = ["PUBLIC"],
    deps = [
        ":find_root",
    ],
)

python_library(
    name = "render_template",
    srcs = [
        "render_template.py",
    ],
    visibility = ["PUBLIC"],
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

python_binary(
    name = "compile-template",
    srcs = [
        "compile_template.py",
    ],
    main_function = "antlir.compile_template.main",
    visibility = ["PUBLIC"],
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

# Some rust dependencies are only used in OSS, add this target to be able to easily
# bring in third-party crates that will show up in `buck query` within fbcode
rust_library(
    name = "extra_oss_deps",
    mapped_srcs = {
        "//antlir:empty": "src/lib.rs",
    },
)

export_file(
    name = "empty",
    visibility = ["PUBLIC"],
)

export_file(
    name = "empty.json",
    visibility = ["PUBLIC"],
)

buck_sh_binary(
    name = "empty.bin",
    main = "empty.sh",
    visibility = ["PUBLIC"],
)

python_binary(
    name = "vcs",
    srcs = ["vcs.py"],
    main_function = "antlir.vcs.main",
    deps = [
        ":artifacts_dir",
        ":fs_utils",
    ],
)

python_library(
    name = "errors",
    srcs = ["errors.py"],
)

# Keep around until D53708598 pushes to Sandcastle
export_file(
    name = "compiler",
    src = "empty",
    visibility = ["PUBLIC"],
)
