# @noautodeps

load("//antlir/bzl:build_defs.bzl", "buck_genrule", "buck_sh_binary", "export_file", "python_binary", "python_library", "python_unittest", "rust_binary", "rust_library", "third_party")
load("//antlir/bzl:constants.bzl", "BZL_CONST", "REPO_CFG")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/rust:defs.bzl", "antlir_rust_extension")

oncall("antlir")

python_library(
    name = "common",
    srcs = ["common.py"],
    visibility = [
        "//antlir/...",
        "//metalos/initrd/facebook/...",
        "//registry/builder/fbpkg/tests/...",
        "//tupperware/cm/...",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
    ],
)

python_library(
    name = "testlib_common",
    srcs = ["tests/common.py"],
    visibility = [
        "//antlir/...",
        "//blockchain/custody/vault/os/...",
        "//metalos/initrd/facebook/...",
        "//ti/platform/edgeos/...",
        "//tupperware/cm/...",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
        "//virt/processvm/agent/...",
    ],
)

python_library(
    name = "cli",
    srcs = ["cli.py"],
    visibility = [
        "//antlir/...",
        "//fbpkg/caf/...",
        "//tupperware/cm/antlir/...",
        "//windtunnel/cogwheel/generators/...",
    ],
    deps = [
        ":common",
        ":config",
        ":fs_utils",
        "//antlir/buck/targets_and_outputs:targets_and_outputs_py",
    ],
)

antlir_rust_extension(
    name = "fs_utils_rs",
    srcs = ["fs_utils_rs.rs"],
    # Doesn't compile on windows.
    compatible_with = [
        "ovr_config//os:linux",
        "ovr_config//os:macos",
    ],
    crate_root = "fs_utils_rs.rs",
    rust_visibility = ["//antlir/..."],
    typestub = "fs_utils_rs.pyi",
    deps = [
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_library(
    name = "fs_utils",
    srcs = ["fs_utils.py"],
    visibility = [
        "//antlir/...",
        "//fbpkg/caf/...",
        "//metalos/initrd/facebook/...",
        "//registry/builder/fbpkg/tests/...",
        "//syseng/yard/installer/...",
        "//ti/platform/edgeos/...",
        "//tupperware/cm/...",
        "//tupperware/image/composable_services/tests:systemd_test_framework",
        "//tupperware/image/scripts/...",
        "//tupperware/scripts/...",
    ],
    deps = [
        ":common",
        ":fs_utils_rs",
    ],
)

python_library(
    name = "unshare",
    srcs = ["unshare.py"],
)

btrfsutil_deps = [
    ":common",
    ":fs_utils",
    ":unshare",
    third_party.library(
        "python-btrfs-progs",
        "btrfsutil-py",
    ),
]

python_library(
    name = "btrfsutil",
    srcs = [
        "btrfsutil.py",
    ],
    labels = ["uses_sudo"],
    resources = {
        ":btrfsutil-bin": "btrfsutil-bin",
    },
    type_stubs = [
        "btrfsutil.pyi",
    ],
    deps = btrfsutil_deps,
)

# the btrfsutil wrapper is also packaged as a python_binary so that it can be
# fallen back to with `sudo` in the case of permissions errors in the main
# calling process
python_binary(
    name = "btrfsutil-bin",
    srcs = ["btrfsutil.py"],
    main_function = "antlir.btrfsutil.main",
    visibility = ["//antlir:btrfsutil"],
    deps = btrfsutil_deps,
)

antlir_rust_extension(
    name = "signed_source",
    srcs = ["signed_source.rs"],
    crate_root = "signed_source.rs",
    typestub = "signed_source.pyi",
    deps = ["//antlir/signedsource:signedsource"],
)

python_library(
    name = "subvol_utils",
    srcs = ["subvol_utils.py"],
    labels = ["uses_sudo"],
    deps = [
        ":artifacts_dir",
        ":btrfsutil",
        ":common",
        ":fs_utils",
        ":unshare",
        "//antlir/btrfs_diff:freeze",
        "//antlir/bzl:loopback_opts.shape-python",
        "//antlir/compiler:subvolume_on_disk",
    ],
)

python_library(
    name = "volume_for_repo",
    srcs = ["volume_for_repo.py"],
    deps = [
        ":btrfsutil",
        ":errors",
        ":fs_utils",
        "//antlir/facebook:sudo_error",
    ],
)

antlir_rust_extension(
    name = "artifacts_dir_rs",
    srcs = ["artifacts_dir_rs.rs"],
    crate_root = "artifacts_dir_rs.rs",
    rust_visibility = ["//antlir/..."],
    typestub = "artifacts_dir_rs.pyi",
    deps = [
        ":fs_utils_rs-rust",
        "//antlir:find_root",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_library(
    name = "artifacts_dir",
    srcs = ["artifacts_dir.py"],
    visibility = ["PUBLIC"],
    deps = [
        ":artifacts_dir_rs",
        ":common",
        ":errors",
        ":fs_utils",
        "//antlir/bzl/buck_isolation:buck_isolation",
    ],
)

rust_library(
    name = "find_root",
    srcs = ["find_root.rs"],
    crate_root = "find_root.rs",
    test_deps = [
        "anyhow",
        "tempfile",
    ],
    visibility = ["PUBLIC"],
    deps = [
        "thiserror",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_library(
    name = "subvolume_garbage_collector",
    srcs = ["subvolume_garbage_collector.py"],
    deps = [
        ":fs_utils",
        ":subvol_utils",
    ],
)

python_library(
    name = "find_built_subvol",
    srcs = ["find_built_subvol.py"],
    deps = [
        ":artifacts_dir",
        ":find_built_subvol_rs",
        ":fs_utils",
        ":subvol_utils",
    ],
)

python_binary(
    name = "find-built-subvol",
    main_function = "antlir.find_built_subvol.main",
    visibility = ["PUBLIC"],
    deps = [":find_built_subvol"],
)

python_binary(
    name = "layer-mount-config",
    srcs = ["layer_mount_config.py"],
    main_function = "antlir.layer_mount_config.invoke_main",
    visibility = ["PUBLIC"],
)

# No unit-test since this is simple, its output is random, and we are
# unlikely to need to change it.  Be sure to test your changes manually!
python_library(
    name = "subvolume_version",
    srcs = ["subvolume_version.py"],
)

# These binaries are basically a work-around for the fact that `sudo -C`
# is forbidden by default :/

python_binary(
    name = "recv-fds-and-run",
    srcs = ["recv_fds_and_run.py"],
    main_function = "antlir.recv_fds_and_run.main",
    deps = [
        ":common",
        ":fs_utils",
    ],
)

python_library(
    name = "send_fds_and_run",
    srcs = ["send_fds_and_run.py"],
    resources = {":recv-fds-and-run": "recv-fds-and-run"},
    deps = [
        ":common",
        ":fs_utils",
    ],
)

python_binary(
    name = "send-fds-and-run",
    main_function = "antlir.send_fds_and_run.main",
    deps = [":send_fds_and_run"],
)

# These binaries are used by `image_layer.py` as build-time helpers.

python_binary(
    name = "artifacts-dir",
    main_function = "antlir.artifacts_dir.main",
    visibility = ["PUBLIC"],
    deps = [":artifacts_dir"],
)

python_binary(
    name = "compiler",
    main_function = "antlir.compiler.compiler.main",
    visibility = [
        "//antlir/...",
        "//bot_generated/antlir/...",
        # There are almost zero antlir1 images left, just a few stragglers.
        #
        # DO NOT ADD TO THIS LIST
        # If you are creating a new directory with an image in it and it is not
        # blocked by CVM, DO NOT add your directory to this list. Instead, use
        # the new antlir2 APIs in your TARGETS/bzl files (load from
        # //antlir/antlir2 instead of //antlir/bzl)
        # If you're just calling a macro that uses the old antlir1 interface,
        # just add this setting to a PACKAGE file in your new directory
        # https://www.internalfb.com/intern/staticdocs/antlir2/docs/migration-guide/#the-fastest-way
        #
        # CVM issues due to incorrect assumption about buck target output always
        # having the same checksum within a build (invalid because of different
        # configurations)
        # https://fb.workplace.com/groups/antlirusers/permalink/1822464761518641/
        "//admarket/adtech/identity/prediction/service/tw:",
        "//admarket/adtech/tee_aem/sandbox/tw_container_manifest:",
        "//admarket/adtech/tee_aem/tw_container_manifest:",
        "//crypto/keychain_service/tee:",
        "//security/hsm/experimental/amd_tee/keychain_service:",
        "//security/hsm/experimental/vesta_tee:",
        "//security/ra/ssh/images:",
        "//tazo/identity/sev_snp/tests/cogwheel:",
        "//tee/snp/cogwheel:",
        "//tee/snp/image:",
        "//tee/snp/image/examples:",
        "//virt/processvm/agent:",
        # Kept available as base image for the stragglers
        "//tupperware/image/base:",
        "//tupperware/image/bzl/tests:",
        # CMv1 tests that will be deleted when the CVM CMs are moved to antlir2
        # and no antlir1 images are left
        "//tupperware/cm/antlir/tests:",
        "//tupperware/regtest/container_manifest:",
        # IMPORTANT!!!! DO NOT ADD TO THIS LIST
        # SEE COMMENT AT TOP OF THIS LIST
    ],
    deps = ["//antlir/compiler:compiler"],
)

python_binary(
    name = "subvolume-garbage-collector",
    main_function = "antlir.subvolume_garbage_collector.main",
    visibility = ["PUBLIC"],
    deps = [":subvolume_garbage_collector"],
)

python_binary(
    name = "subvolume-version",
    main_module = "antlir.subvolume_version",
    visibility = ["PUBLIC"],
    deps = [":subvolume_version"],
)

python_binary(
    name = "volume-for-repo",
    main_function = "antlir.volume_for_repo.main",
    visibility = ["PUBLIC"],
    deps = [":volume_for_repo"],
)

python_library(
    name = "update_package_db",
    srcs = ["update_package_db.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/cm/antlir/...",
        "//tupperware/image/scripts/...",
    ],
    deps = [
        ":common",
        ":fs_utils",
        ":signed_source",
    ],
)

python_unittest(
    name = "test-update-package-db",
    srcs = ["tests/test_update_package_db.py"],
    needed_coverage = [(100, ":update_package_db")],
    deps = [":update_package_db"],
)

python_binary(
    name = "package-image",
    srcs = ["package_image.py"],
    main_function = "antlir.package_image.main",
    resources = {
        "//antlir/btrfs_send_stream_upgrade:btrfs_send_stream_upgrade": "btrfs-send-stream-upgrade",
    },
    visibility = ["PUBLIC"],
    deps = [
        ":find_built_subvol",
        ":subvol_utils",
        "//antlir/btrfs_send_stream_upgrade:btrfs_send_stream_upgrade",
        "//antlir/bzl:loopback_opts.shape-python",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_library(
    name = "unionfind",
    srcs = ["unionfind.py"],
    deps = [],
)

python_library(
    name = "shape",
    srcs = ["shape.py"],
    visibility = ["PUBLIC"],
    deps = [
        ":fs_utils",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
        "//antlir/btrfs_diff:freeze",
    ],
)

python_library(
    name = "config",
    srcs = ["config.py"],
    resources = {
        ":revision_time_iso8601": "revision_time_iso8601",
        ":revision_timestamp": "revision_timestamp",
        ":vcs_revision": "vcs_revision",
    },
    deps = [
        ":artifacts_dir",
        ":fs_utils",
        ":vcs-library",
        shape.python_data(
            name = "repo_config_t",
            instance = REPO_CFG,
            shape_impl = "//antlir/bzl:constants.shape",
            type_name = "repo_config_t",
        ),
    ],
)

python_binary(
    name = "print-config",
    main_function = "antlir.config.main",
    deps = [":config"],
)

buck_genrule(
    name = "config.json",
    out = "config.json",
    cmd = "$(exe :print-config) > $OUT",
)

rust_binary(
    name = "repo-root",
    srcs = ["repo_root.rs"],
    crate_root = "repo_root.rs",
    visibility = ["PUBLIC"],
    deps = [
        ":find_root",
    ],
)

python_library(
    name = "bzl_const",
    srcs = ["bzl_const.py"],
    deps = [
        shape.python_data(
            name = "bzl_const_t",
            instance = BZL_CONST,
            shape_impl = "//antlir/bzl:constants.shape",
            type_name = "bzl_const_t",
        ),
    ],
)

python_library(
    name = "render_template",
    srcs = [
        "render_template.py",
    ],
    visibility = ["PUBLIC"],
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

python_binary(
    name = "compile-template",
    srcs = [
        "compile_template.py",
    ],
    main_function = "antlir.compile_template.main",
    visibility = ["PUBLIC"],
    deps = [
        third_party.library(
            "jinja2",
            platform = "python",
        ),
    ],
)

python_binary(
    name = "gpt",
    srcs = ["gpt.py"],
    main_function = "antlir.gpt.main",
    visibility = ["PUBLIC"],
    deps = [
        ":common",
        ":find_built_subvol",
        ":subvol_utils",
        "//antlir/bzl:gpt.shape-python",
        "//antlir/nspawn_in_subvol:args",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_library(
    name = "testlib_flavor_helpers",
    srcs = ["tests/flavor_helpers.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg",
        "//tupperware/image/bzl/tests:test-tw-image-install-fbpkg-library",
    ],
    deps = [":config"],
)

# Some rust dependencies are only used in OSS, add this target to be able to easily
# bring in third-party crates that will show up in `buck query` within fbcode
rust_library(
    name = "extra_oss_deps",
    mapped_srcs = {
        "//antlir:empty": "src/lib.rs",
    },
)

export_file(
    name = "empty",
    visibility = ["PUBLIC"],
)

export_file(
    name = "empty.json",
    visibility = ["PUBLIC"],
)

buck_sh_binary(
    name = "empty.bin",
    main = "empty.sh",
    visibility = ["PUBLIC"],
)

python_binary(
    name = "vcs",
    srcs = ["vcs.py"],
    main_function = "antlir.vcs.main",
    deps = [
        ":artifacts_dir",
        ":fs_utils",
    ],
)

python_library(
    name = "errors",
    srcs = ["errors.py"],
)

# Generate a vcs hash file and make it public.
buck_genrule(
    name = "vcs_revision",
    cmd = "$(exe :vcs) --rev >$OUT",
    visibility = ["PUBLIC"],
)

# Generate UNIX timestamp of the current revision and make it public.
buck_genrule(
    name = "revision_timestamp",
    cmd = "$(exe :vcs) --revision_timestamp >$OUT",
    visibility = ["PUBLIC"],
)

# Generate iso8601 datetime of the current revision and make it public.
buck_genrule(
    name = "revision_time_iso8601",
    cmd = "$(exe :vcs) --revision_time_iso8601 >$OUT",
    visibility = ["PUBLIC"],
)

rust_library(
    name = "find_built_subvol_rust_lib",
    srcs = ["find_built_subvol_lib.rs"],
    crate_root = "find_built_subvol_lib.rs",
    visibility = ["PUBLIC"],
    deps =
        [
            "anyhow",
            "serde",
            "serde_json",
            "thiserror",
            "//antlir:find_root",
            "//antlir/filesystem/absolute_path:absolute_path",
        ],
)

antlir_rust_extension(
    name = "find_built_subvol_rs",
    srcs = ["find_built_subvol_rs.rs"],
    crate_root = "find_built_subvol_rs.rs",
    typestub = "find_built_subvol_rs.pyi",
    deps = [
        ":artifacts_dir_rs-rust",
        ":find_built_subvol_rust_lib",
        ":find_root",
        ":fs_utils_rs-rust",
        "//antlir/filesystem/absolute_path:absolute_path",
    ],
)

python_binary(
    name = "delete-subvolume-recursive",
    srcs = ["delete_subvolume_recursive.py"],
    main_function = "antlir.delete_subvolume_recursive.main",
    deps = [":btrfsutil"],
)
