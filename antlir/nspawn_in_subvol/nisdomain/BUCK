load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "export_file")
load("//antlir/bzl/image/feature:defs.bzl", "feature")

image.layer(
    name = "setup",
    features = [
        feature.rpms_install([
            "hostname",
        ]),
    ],
    parent_layer = flavor_helpers.get_build_appliance(),
)

# Rebuild this file with:
# clang -static -o nis_domainname nis_domainname.c
#
# Yeah, checking in a binary is awful, but this absolutely needs to be a FULLY
# static binary and building it in an antlir layer is really really slow and
# takes on a circular dependency that is hard to break.
export_file(
    name = "nis_domainname",
    # All =container targets take a direct dep on this.
    visibility = ["PUBLIC"],
)

image.layer(
    name = "test-layer",
    features = [
        feature.ensure_dirs_exist("/build"),
        feature.install(
            ":nis_domainname",
            "/build/nis_domainname",
            mode = "a+rx",
        ),
    ],
    parent_layer = ":setup",
)

# Exercise both the "booted" and "unbooted" code paths, they differ slightly
[
    image.python_unittest(
        name = "test-nis-domainname-" + ("booted" if boot else "unbooted"),
        srcs = ["test_nis_domainname.py"],
        boot = boot,
        layer = ":test-layer",
        run_as_user = "root",
    )
    for boot in [
        False,
        True,
    ]
]
