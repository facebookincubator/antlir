# Future: we should eventually add per-library unit test coverage, as
# appropriate, while also retaining integration test coverage.

load("//antlir/bzl:layer_resource.bzl", "layer_resource")
load("//antlir/bzl:oss_shim.bzl", "python_binary", "python_library", "python_unittest", "third_party")
load("//antlir/compiler:defs.bzl", "TEST_IMAGE_PREFIX")

# Gets test coverage via `:test-run`
python_library(
    name = "args",
    srcs = ["args.py"],
    deps = [
        "//antlir:cli",
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
    ],
)

python_library(
    name = "common",
    srcs = ["common.py"],
    deps = ["//antlir:fs_utils"],
)

python_unittest(
    name = "test-common",
    srcs = ["tests/test_common.py"],
    needed_coverage = [(100, ":common")],
)

# Gets test coverage via `:test-run`
python_library(
    name = "cmd",
    srcs = ["cmd.py"],
    deps = [
        ":args",
        "//antlir:config",
        "//antlir:find_built_subvol",
        "//antlir:send_fds_and_run",
        "//antlir:subvol_utils",
        "//antlir/compiler:procfs_serde",
        "//antlir/compiler/items:common",
        "//antlir/compiler/items:mount",
    ],
)

# Gets test coverage via `plugins:test-yum-dnf-versionlock`
python_library(
    name = "plugin_hooks",
    srcs = ["plugin_hooks.py"],
    deps = [
        ":args",
        ":cmd",
        "//antlir/nspawn_in_subvol/plugins:plugins",
    ],
)

# Gets test coverage via `:test-run`
python_library(
    name = "nspawn",
    srcs = ["nspawn.py"],
    resources = {
        third_party.library("busybox", "bin/busybox"): "busybox",
        "//antlir/nspawn_in_subvol/clonecaps:clonecaps": "clonecaps",
    },
    deps = [
        ":args",
        ":cmd",
        ":common",
        ":plugin_hooks",
        "//antlir:common",
        "//antlir:send_fds_and_run",
    ],
)

python_library(
    name = "ba_runner",
    srcs = ["ba_runner.py"],
    deps = [
        ":args",
        ":nspawn",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
    ],
)

python_binary(
    name = "run",
    srcs = ["run.py"],
    main_module = "antlir.nspawn_in_subvol.run",
    visibility = ["PUBLIC"],
    deps = [
        ":args",
        ":cmd",
        ":nspawn",
        "//antlir:common",
        "//antlir/nspawn_in_subvol/plugins:plugins",
        "//antlir/nspawn_in_subvol/plugins:rpm",
    ],
)

python_library(
    name = "testlib_base",
    srcs = ["tests/base.py"],
    deps = [
        ":run-library",
        "//antlir:testlib_layer_resource",
    ],
)

python_unittest(
    name = "test-run",
    srcs = [
        "tests/test_run.py",
    ],
    env = {
        # Needed to cover the `TERM` branch in `nspawn.py` because FB's test
        # runner otherwise strips out `TERM`.
        "TERM": "linux-clown",
    },
    # This is the integration test for the CLI and underlying library, so
    # it's supposed to cover everything.
    needed_coverage = [(100, target) for target in [
        ":args",
        ":nspawn",
        ":cmd",
        ":run-library",
    ]],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "test-layer",
        ): "tests/test-layer",
        layer_resource(
            TEST_IMAGE_PREFIX + "test-layer-with-mounts",
        ): "tests/test-layer-with-mounts",
        layer_resource(
            TEST_IMAGE_PREFIX + "hello_world_base",
        ): "tests/test-hello-world-base",
        layer_resource(
            TEST_IMAGE_PREFIX + "create_ops-from-layer",
        ): "tests/test-create-ops-from-layer",
        layer_resource(
            TEST_IMAGE_PREFIX + "bootable-systemd-os",
        ): "tests/bootable-systemd-os",
        layer_resource(
            TEST_IMAGE_PREFIX + "test-layer-iproute",
        ): "tests/test-layer-iproute",
    },
    deps = [":testlib_base"],
)

python_unittest(
    name = "test-slow-sudo",
    srcs = ["tests/test_slow_sudo.py"],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "tests/build-appliance",
    },
    deps = [":testlib_base"],
)

python_binary(
    name = "run-test",
    srcs = ["run_test.py"],
    main_module = "antlir.nspawn_in_subvol.run_test",
    visibility = ["PUBLIC"],
    deps = [
        ":args",
        ":cmd",
        ":run-library",
    ],
)

python_unittest(
    name = "test-run-test",
    srcs = ["tests/test_run_test.py"],
    needed_coverage = [(100, ":run-test-library")],
    deps = [":run-test-library"],
)
