/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

use std::ffi::OsStr;
use std::path::PathBuf;

use antlir2_compile::CompileFeature;
use antlir2_compile::CompilerContext;
use antlir2_depgraph::Graph;
use anyhow::Context;
use clap::Parser;
use json_arg::JsonFile;

use crate::Result;

#[derive(Parser, Debug)]
/// Compile image features into a directory
pub(crate) struct Compile {
    #[clap(long)]
    /// Root directory of under-construction image. Must already exist (either
    /// empty or as a snapshot of a parent layer)
    pub(crate) root: PathBuf,
    #[clap(long)]
    /// Path to outside-world proxy UNIX socket
    pub(crate) proxy_socket: PathBuf,
    #[clap(flatten)]
    pub(crate) public: PublicCompileArgs,
}

#[derive(Parser, Debug)]
/// Compile arguments that are _always_ passed "publicly" (in other words, by
/// buck2 actions) and are never generated by internal code in the 'isolate'
/// subcommand.
pub(crate) struct PublicCompileArgs {
    #[clap(long = "depgraph-json")]
    /// Path to input depgraph json file with features to include in this image
    pub(crate) depgraph: JsonFile<Graph<'static>>,
}

impl Compile {
    #[deny(unused_variables)]
    pub(crate) fn to_args(&self) -> [&OsStr; 6] {
        let Self {
            public: PublicCompileArgs { depgraph },
            root,
            proxy_socket,
        } = self;
        [
            OsStr::new("--depgraph-json"),
            depgraph.path().as_os_str(),
            OsStr::new("--root"),
            root.as_os_str(),
            OsStr::new("--proxy-socket"),
            proxy_socket.as_os_str(),
        ]
    }
}

impl Compile {
    #[tracing::instrument(name = "compile", skip(self))]
    pub(crate) fn run(self) -> Result<()> {
        let ctx = CompilerContext::new(self.root, self.proxy_socket)
            .context("while preparing CompilerContext")?;

        for feature in self.public.depgraph.pending_features() {
            feature.compile(&ctx)?;
        }
        Ok(())
    }
}
