load("//antlir/bzl:build_defs.bzl", "third_party")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/linux:defs.bzl", "linux")

oncall("antlir")

# The `busybox.install()` feature requires a source image.layer
# from which to clone `/busybox` from.  These targets produce
# image layers with `busybox` installed at `/`, one built from
# the default Build Appliance and the other built from a
# `third_party.library` target.
image.layer(
    name = "busybox-src-from-img",
    features = [
        feature.rpms_install(["busybox"]),
    ],
    # TODO: change back to antlir_test when it's no longer c7: D45719236
    flavor = "centos9",
)

image.layer(
    name = "busybox-src-from-third-party",
    features = [
        feature.install(
            third_party.library(
                "busybox",
                "bin/busybox",
                platform = "genrule",
            ),
            "/busybox",
        ),
    ],
    flavor = "antlir_test",
)

# Now use the respective busybox source layers to construct
# test linux layers.
image.layer(
    name = "test-linux-busybox-from-img",
    features = [
        linux.filesystem.install(),
        linux.busybox.install(
            src = ":busybox-src-from-img",
            src_path = "/usr/sbin/busybox",
        ),
    ],
    flavor = "antlir_test",
)

image.layer(
    name = "test-linux-busybox-from-third-party",
    features = [
        linux.filesystem.install(),
        linux.busybox.install(
            src = ":busybox-src-from-third-party",
            src_path = "/busybox",
        ),
    ],
    flavor = "antlir_test",
)

# Time tests
image.layer(
    name = "test-layer-timezone-utc",
    features = [linux.time.timezone(zone = "UTC")],
    parent_layer = flavor_helpers.get_build_appliance(),
)

image.python_unittest(
    name = "test-timezone-utc",
    srcs = ["test_time.py"],
    env = {
        "ANTLIR_TEST_EXPECTED_TIMEZONES": "UTC",
    },
    layer = ":test-layer-timezone-utc",
)

image.layer(
    name = "test-layer-timezone-us-pacific",
    features = [linux.time.timezone(zone = "US/Pacific")],
    parent_layer = flavor_helpers.get_build_appliance(),
)

image.python_unittest(
    name = "test-timezone-us-pacific",
    srcs = ["test_time.py"],
    env = {
        "ANTLIR_TEST_EXPECTED_TIMEZONES": "PDT PST",
    },
    layer = ":test-layer-timezone-us-pacific",
)

image.layer(
    name = "test-layer-os-release",
    features = [
        linux.release.install(
            api_versions = {
                "BAR": 22,
                "FOO_QUX": 7,
            },
            layer = ":test-layer-os-release",
            os_id = "centos",
            os_name = "AntlirTest",
            # dummy select to ensure that selects are resolved instead of just
            # being dumped with 'repr'
            os_version = select({
                "ovr_config//cpu:arm64": "9",
                "ovr_config//cpu:x86_64": "9",
            }),
            path = "/usr/lib/os-release",
            variant = "Test",
        ),
    ],
    parent_layer = flavor_helpers.get_build_appliance(),
)

image.python_unittest(
    name = "test-os-release",
    srcs = ["test_os_release.py"],
    layer = ":test-layer-os-release",
    deps = [
        "//antlir:fs_utils",
    ],
)
