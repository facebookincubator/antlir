load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")

oncall("antlir")

image.layer(
    name = "deps",
    features = [
        feature.rpms_install(subjects = select({
            "ovr_config//cpu:arm64": [
                "grub2-efi-aa64",
                "grub2-efi-aa64-modules",
            ],
            "ovr_config//cpu:x86_64": [
                "grub2-efi-x64",
                "grub2-efi-x64-modules",
            ],
        })),
    ],
    visibility = [],
)

grub2_modules = [
    "all_video",
    "blscfg",
]

# The base image.layer for a systemd boot partition
# There is no kernel, initrd, or loader entries
# configured in this layer.
image.layer(
    name = "base",
    features = [
        feature.ensure_subdirs_exist(
            into_dir = "/",
            subdirs_to_create = "EFI",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/EFI",
            subdirs_to_create = "BOOT",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/EFI",
            subdirs_to_create = "centos",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/",
            subdirs_to_create = "grub2",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/grub2",
            subdirs_to_create = select({
                "ovr_config//cpu:arm64": "arm64-efi",
                "ovr_config//cpu:x86_64": "x86_64-efi",
            }),
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/",
            subdirs_to_create = "loader",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/loader",
            subdirs_to_create = "entries",
        ),
        feature.clone(
            dst_path = select({
                "ovr_config//cpu:arm64": "/EFI/centos/grubaa64.efi",
                "ovr_config//cpu:x86_64": "/EFI/centos/grubx64.efi",
            }),
            src_layer = ":deps",
            src_path = select({
                "ovr_config//cpu:arm64": "/boot/efi/EFI/centos/grubaa64.efi",
                "ovr_config//cpu:x86_64": "/boot/efi/EFI/centos/grubx64.efi",
            }),
        ),
        feature.clone(
            dst_path = select({
                "ovr_config//cpu:arm64": "/EFI/BOOT/BOOTAA64.efi",
                "ovr_config//cpu:x86_64": "/EFI/BOOT/BOOTX64.efi",
            }),
            src_layer = ":deps",
            src_path = select({
                "ovr_config//cpu:arm64": "/boot/efi/EFI/centos/grubaa64.efi",
                "ovr_config//cpu:x86_64": "/boot/efi/EFI/centos/grubx64.efi",
            }),
        ),
        feature.install(
            src = "grub.cfg",
            dst = "/EFI/BOOT/grub.cfg",
        ),
    ] + [
        feature.clone(
            dst_path = select({
                "ovr_config//cpu:arm64": "/grub2/arm64-efi/{}.mod".format(i),
                "ovr_config//cpu:x86_64": "/grub2/x86_64-efi/{}.mod".format(i),
            }),
            src_layer = ":deps",
            src_path = select({
                "ovr_config//cpu:arm64": "/usr/lib/grub/arm64-efi/{}.mod".format(i),
                "ovr_config//cpu:x86_64": "/usr/lib/grub/x86_64-efi/{}.mod".format(i),
            }),
        )
        for i in grub2_modules
    ],
    visibility = ["PUBLIC"],
)
