load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/bzl:build_defs.bzl", "alias")

oncall("antlir")

image.layer(
    name = "deps",
    features = [
        feature.rpms_install(rpms = ["systemd-boot-unsigned"]),
    ],
    visibility = [],
)

# The base image.layer for a systemd boot partition
# There is no kernel, initrd, or loader entries
# configured in this layer.
image.layer(
    name = "base",
    features = [
        feature.ensure_subdirs_exist(
            into_dir = "/",
            subdirs_to_create = "EFI",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/EFI",
            subdirs_to_create = "BOOT",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/EFI",
            subdirs_to_create = "Linux",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/EFI",
            subdirs_to_create = "systemd",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/",
            subdirs_to_create = "loader",
        ),
        feature.ensure_subdirs_exist(
            into_dir = "/loader",
            subdirs_to_create = "entries",
        ),
        feature.clone(
            dst_path = "/EFI/systemd/systemd-bootx64.efi",
            src_layer = ":deps",
            src_path = "/usr/lib/systemd/boot/efi/systemd-bootx64.efi",
        ),
        feature.clone(
            dst_path = "/EFI/BOOT/BOOTX64.efi",
            src_layer = ":deps",
            src_path = "/usr/lib/systemd/boot/efi/systemd-bootx64.efi",
        ),
    ],
    visibility = ["PUBLIC"],
)

alias(
    name = "base.antlir2",
    actual = ":base",
    visibility = ["PUBLIC"],
)
