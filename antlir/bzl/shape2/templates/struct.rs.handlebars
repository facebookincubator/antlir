#[derive(Debug, Clone, Deserialize, Serialize, TypedBuilder, PartialEq, Eq)]
pub struct {{name}} {
    {{#each fields}}
    {{#if (has-default-value this)}}
    #[serde(default = "{{../name}}::default_{{@key}}")]
    #[builder(default_code = r###"{{../name}}::default_{{@key}}()"###)]
    {{/if}}
    {{#if required}}
    {{#if (eq (type type) "i64")}}
    #[serde(deserialize_with = "::shape::deserialize_i64")]
    {{/if}}
    pub r#{{@key}}: {{type type}},
    {{else}}
    {{#if (eq (type type) "i64")}}
    #[serde(default, deserialize_with = "::shape::deserialize_optional_i64")]
    {{/if}}
    pub r#{{@key}}: ::std::option::Option<{{type type}}>,
    {{/if}}
    {{/each}}
}

impl {{name}} {
    {{#each fields}}
    {{#if (has-default-value this)}}
    fn default_{{@key}}() ->
    {{#if required}}
        {{type type}}
    {{else}}
        ::std::option::Option<{{type type}}>
    {{/if}}
    {
        serde_json::from_str(r###"{{json default_value}}"###).expect("default json is always good")
    }
    {{/if}}
    {{/each}}
}

{{#if thrift_fields}}
impl ::fbthrift::ttype::GetTType for {{name}} {
    const TTYPE: ::fbthrift::ttype::TType = ::fbthrift::ttype::TType::Struct;
}

impl<P> ::fbthrift::Serialize<P> for {{name}}
where P: ::fbthrift::protocol::ProtocolWriter
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("{{name}}");
        {{#each thrift_fields}}
        {{#if this.1.required}}
        p.write_field_begin("{{this.0}}", <{{type this.1.type}} as ::fbthrift::ttype::GetTType>::TTYPE, {{@key}});
        ::fbthrift::Serialize::write(&self.r#{{this.0}}, p);
        {{else}}
        if let Some(x) = &self.r#{{this.0}} {
            p.write_field_begin("{{this.0}}", <{{type this.1.type}} as ::fbthrift::ttype::GetTType>::TTYPE, {{@key}});
            ::fbthrift::Serialize::write(x, p);
        }
        {{/if}}
        p.write_field_end();
        {{/each}}
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for {{name}}
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        {{#each thrift_fields}}
        {{#if (has-default-value this.1)}}
        {{#if this.1.required}}
        let mut r#field_{{this.0}} = ::std::option::Option::Some({{../name}}::default_{{this.0}}());
        {{else}}
        let mut r#field_{{this.0}} = {{../name}}::default_{{this.0}}();
        {{/if}}
        {{else}}
        let mut r#field_{{this.0}} = ::std::option::Option::None;
        {{/if}}
        {{/each}}
        let FIELDS: &[::fbthrift::Field] = &[
            {{#each thrift_fields}}
            ::fbthrift::Field::new("{{@key}}", <{{type this.1.type}} as ::fbthrift::ttype::GetTType>::TTYPE, {{@key}}),
            {{/each}}
        ];
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            if fty == ::fbthrift::TType::Stop {
                break;
            }
            {{#each thrift_fields}}
            else if (fty == <{{type this.1.type}} as ::fbthrift::ttype::GetTType>::TTYPE) && (fid == {{@key}}) {
                r#field_{{this.0}} = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?);
            }
            {{/each}}
            else {
                p.skip(fty)?;
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            {{#each thrift_fields}}
            {{#if this.1.required}}
            r#{{this.0}}: r#field_{{this.0}}.context("required field {{this.0}} ({{@key}}) is missing")?,
            {{else}}
            r#{{this.0}}: r#field_{{this.0}},
            {{/if}}
            {{/each}}
        })
    }
}
{{/if}}

{{#if (can-default fields)}}
impl Default for {{name}} {
    fn default() -> Self {
        Self {
        {{#each fields}}
        {{#if (has-default-value this)}}
            r#{{@key}}: {{../name}}::default_{{@key}}(),
        {{ else }}
            r#{{@key}}: None,
        {{/if}}
        {{/each}}
        }
    }
}
{{/if}}

impl ::pyo3::conversion::IntoPy<::pyo3::PyObject> for &{{name}} {
    fn into_py(self, py: ::pyo3::Python<'_>) -> ::pyo3::PyObject {
        let json_str = ::serde_json::to_string(self)
            .expect("this came from json, serialization cannot fail");
        let module = ::pyo3::types::PyModule::import(py, crate::PYTHON_MODULE)
            .unwrap_or_else(|_| panic!("py module '{}' not available", crate::PYTHON_MODULE));
        let cls = module.getattr("{{name}}")
            .expect("module did not contain class '{{name}}'");
        cls.call_method1("parse_raw", (&json_str,))
            .expect("this is a valid shape, pydantic must be able to deserialize it")
            .into_py(py)
    }
}
