load("@fbcode//clifoundation/cli_target/buck_defs:cli.bzl", "cli")
load("//antlir/bzl:build_defs.bzl", "rust_binary", "rust_library")

oncall("antlir")

rust_library(
    name = "ir",
    srcs = ["ir.rs"],
    doctests = False,  # FIXME
    deps = [
        "anyhow",
        "derive_more",
        "serde",
        "serde_json",
    ],
)

rust_binary(
    name = "bzl2ir",
    srcs = ["bzl2ir.rs"],
    crate = "bzl2ir",
    test_deps = ["maplit"],
    visibility = [
        "PUBLIC", # @oss-enable
    ],
    deps = [
        "allocative",
        "anyhow",
        "clap",
        "derive_more",
        "serde",
        "serde_json",
        "slotmap",
        "starlark",
        ":ir",
        "//antlir/util/cli/json_arg:json_arg",
    ],
)

rust_binary(
    name = "ir2code",
    srcs = ["ir2code.rs"],
    visibility = ["PUBLIC"],
    deps = [
        "anyhow",
        "clap",
        "derive_more",
        "handlebars",
        "itertools",
        "serde",
        "serde_json",
        ":ir",
    ],
)

rust_library(
    name = "shape",
    srcs = ["shape.rs"],
    visibility = ["PUBLIC"],
    deps = [
        "anyhow",
        "fbthrift",
        "serde",
    ],
)

cli.deployer(
    name = "bzl2ir.clideployer",
    distribution = cli.distribution(
        bump_diffs = cli.bump_diffs(
            destinations = [
                cli.destination(
                    branch = "master",
                    paths = [
                        "fbcode/antlir/bzl/shape2/facebook/bzl2ir",
                    ],
                    repository = cli.repository.FBSOURCE,
                ),
            ],
        ),
    ),
    metadata = cli.metadata(
        binary_name = "antlir_bzl2ir",
        description = "Generated by MSDK -> dotslash.builder migration. MSDK schedule: https://www.internalfb.com/intern/msdk/bump/?action=view&schedule_fbid=1557948664955699",
        executable = ":bzl2ir",
        oncall = "metalos",
    ),
    packaging = cli.packaging(
        dotslash = cli.dotslash(
            platforms = [
                cli.platform.linux(
                    architectures = [
                        cli.architecture.AARCH64,
                        cli.architecture.X86_64,
                    ],
                ),
            ],
        ),
    ),
    release = cli.release(
        artifact_ci_config = cli.artifact_ci_config(
            relevant_target_directories = [
                "//antlir/bzl/shape2/...",
            ],
        ),
        conveyor = cli.conveyor(
            frequency = cli.frequency.WEEKLY,
            holiday_countries = [
                cli.holiday_country.UNITED_STATES,
            ],
            timezone = "US/Pacific",
        ),
        srconveyor = cli.srconveyor(
            rollout = cli.rollout.AT_ONCE,
        ),
    ),
)
