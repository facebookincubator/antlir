load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "export_file", "python_library", "python_unittest")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/tests:shape_test.bzl", "run_shape_selftests")
load("//antlir/compiler:defs.bzl", "TEST_IMAGE_PREFIX")
load(":container_and_vm_test.bzl", "cpp_container_and_vm_test", "python_container_and_vm_test")

python_library(
    name = "coverage_test_helper",
    srcs = ["coverage_test_helper.py"],
)

image.python_unittest(
    name = "test-image-python-unittest",
    srcs = ["test_image_python_unittest.py"],
    layer = TEST_IMAGE_PREFIX + "test-layer-with-mounts",
    needed_coverage = [(100, ":coverage_test_helper")],
    deps = [":coverage_test_helper"],
    env = {"kitteh": "meow"},
)

image.python_unittest(
    name = "test-boot-image-python-unittest",
    srcs = ["test_image_python_unittest.py"],
    layer = TEST_IMAGE_PREFIX + "test-layer-with-mounts",
    needed_coverage = [(100, ":coverage_test_helper")],
    deps = [":coverage_test_helper"],
    env = {"kitteh": "meow"},
    boot = True,
)

# This doesn't have a C++ counterpart since the impl should be shared, and
# duplicating tests across languages doesn't scale.
image.python_unittest(
    name = "test-image-unittest-repo-server",
    srcs = ["test_image_unittest_repo_server.py"],
    layer = TEST_IMAGE_PREFIX + "build_appliance_testing",
    serve_rpm_snapshots = ["//antlir/rpm:repo-snapshot-for-tests"],
    run_as_user = "root",
    deps = [
        "//antlir:fs_utils",
        "//antlir/rpm:find_snapshot",
    ],
)

image.python_unittest(
    name = "test-image-hostname-python",
    srcs = ["test_image_hostname.py"],
    layer = TEST_IMAGE_PREFIX + "test-layer",
    hostname = "test-hostname.com",
)

# to do: support `user` kwarg in vmtest See T62319183
# Future: have vmtest's default user as `nobody` to match `nspawn_in_subvol`
# vmtest currently runs as `root`, whereas nspawn runs as user `nobody`.
# For now, we will leave these as `image.cpp_unittest` instead of migrating
# to cpp_container_and_vm_test
image.cpp_unittest(
    name = "test-image-cpp-unittest",
    srcs = ["ImageCppUnittestTest.cpp"],
    layer = TEST_IMAGE_PREFIX + "test-layer",
    env = {"kitteh": "meow"},
)

image.cpp_unittest(
    name = "test-boot-image-cpp-unittest",
    srcs = ["ImageCppUnittestTest.cpp"],
    layer = TEST_IMAGE_PREFIX + "test-layer",
    env = {"kitteh": "meow"},
    boot = True,
)

image.cpp_unittest(
    name = "test-image-hostname-cpp",
    srcs = ["ImageHostnameTest.cpp"],
    layer = TEST_IMAGE_PREFIX + "test-layer",
    env = {},
    hostname = "test-hostname.com",
)

# Ensures that BUCK_BUILD_ID isn't just missing from the container tests by
# accident, but rather that it's explicitly sanitized.
python_unittest(
    name = "test-unsanitized-env",
    srcs = ["test_unsanitized_env.py"],
    env = {"kitteh": "meow"},
)

# systemd unit features
export_file(name = "cheese-export.service")

export_file(name = "cheese-source.service")

buck_genrule(
    name = "cheese-generator",
    out = "dir",
    bash = """
    mkdir -p ${OUT}
    cat > ${OUT}/cheese-generated.service <<'EOF'
[Unit]
Description=A generated cheese service.

[Service]
ExecStart=/bin/true
EOF
    """,
)

image.layer(
    name = "systemd_feature-layer",
    parent_layer = REPO_CFG.build_appliance_default,
    features = [
        # A target with a dest
        systemd.install_unit(
            ":cheese-export.service",
            dest = "cheese-export-with-dest.service",
        ),
        systemd.enable_unit("cheese-export-with-dest.service"),

        # A target with no dest and enabled in a non-default target
        systemd.install_unit(":cheese-export.service"),
        systemd.enable_unit(
            "cheese-export.service",
            target = "sysinit.target",
        ),

        # Local file syntax sugar with no dest
        systemd.install_unit("cheese-file.service"),
        systemd.enable_unit("cheese-file.service"),

        # Image source from a genrule, with a path
        systemd.install_unit(image.source(
            ":cheese-generator",
            path = "cheese-generated.service",
        )),

        # Image source with no path
        systemd.install_unit(image.source(
            ":cheese-source.service",
        )),
        # Mask a unit
        systemd.mask_units(["cheese-source.service"]),
    ],
)

image.python_unittest(
    name = "test-systemd-features",
    layer = ":systemd_feature-layer",
    srcs = ["test_systemd_features.py"],
    deps = ["//antlir:fs_utils"],
)

image.layer(
    name = "layer-with-unique-path",
    parent_layer = "//tupperware/image/vmtest:base",
    features = [
        image.mkdir("/", "unique"),
        image.mkdir("/unique", "test"),
        image.mkdir("/unique/test", "path"),
    ],
)

cpp_container_and_vm_test(
    name = "test-cpp-runs-in-layer",
    srcs = ["RunsInLayerTest.cpp"],
    layer = ":layer-with-unique-path",
    deps = ["//common/files:files"],
)

python_container_and_vm_test(
    name = "test-python-runs-in-layer",
    srcs = ["test_runs_in_layer.py"],
    layer = ":layer-with-unique-path",
    needed_coverage = [(100, ":coverage_test_helper")],
    deps = [":coverage_test_helper"],
)

example = shape.shape(
    answer = int,
    field = shape.field(bool),
    say_hi = shape.field(
        str,
        optional = True,
    ),
    nested = shape.shape(inner = bool),
    tp = shape.tuple(
        bool,
        int,
        shape.shape(nested = bool),
        optional = True,
    ),
    lst = shape.list(
        shape.shape(id = int),
        optional = True,
    ),
    dct = shape.dict(str, str),
    dct_w_shape = shape.dict(
        str,
        shape.shape(number = int),
    ),
)

instance = shape.new(
    example,
    field = True,
    answer = 42,
    nested = shape.new(
        example.nested,
        inner = True,
    ),
    tp = (
        True,
        42,
        shape.new(
            example.tp.item_types[2],
            nested = True,
        ),
    ),
    lst = [
        shape.new(
            example.lst.item_type,
            id = 0,
        ),
        shape.new(
            example.lst.item_type,
            id = 1,
        ),
    ],
    dct = {"hello": "world"},
    dct_w_shape = {
        "apollo": shape.new(
            example.dct_w_shape.val_type,
            number = 11,
        ),
    },
)

shape.loader(
    name = "example_loader",
    shape = example,
    classname = "example",
)

python_unittest(
    name = "test-shape",
    srcs = [
        "test_shape.py",
        shape.python_file(
            name = "pyfile_shape",
            shape = instance,
        ),
    ],
    resources = {
        shape.json_file(
            name = "example",
            shape = instance,
        ): "example.json",
    },
    deps = [":example_loader"],
)

run_shape_selftests()
