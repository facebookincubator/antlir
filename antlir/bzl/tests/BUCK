load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "export_file", "python_binary", "python_library", "python_unittest")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/compiler:defs.bzl", "TEST_IMAGE_PREFIX")

# Powers `image.test_rpm_names`
python_library(
    name = "check_rpm_names",
    srcs = ["check_rpm_names.py"],
    visibility = ["PUBLIC"],
    deps = ["//antlir:fs_utils"],
)

# Useful together with `image.test_rpm_names`
python_binary(
    name = "rpms-with-reason",
    srcs = ["rpms_with_reason.py"],
    main_module = "antlir.bzl.tests.rpms_with_reason",
    visibility = ["PUBLIC"],
)

python_library(
    name = "coverage_test_helper",
    srcs = ["coverage_test_helper.py"],
)

image.python_unittest(
    name = "test-image-python-unittest",
    srcs = ["test_image_python_unittest.py"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "test-layer-with-mounts",
    container_opts = image.opts(internal_only_logs_tmpfs = True),
    needed_coverage = [(100, ":coverage_test_helper")],
    deps = [":coverage_test_helper"],
    env = {"kitteh": "meow"},
)

image.python_unittest(
    name = "test-boot-image-python-unittest",
    srcs = ["test_image_python_unittest.py"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "test-layer-with-mounts",
    container_opts = image.opts(internal_only_logs_tmpfs = True),
    needed_coverage = [(100, ":coverage_test_helper")],
    deps = [":coverage_test_helper"],
    env = {"kitteh": "meow"},
    boot = True,
)

# This doesn't have a C++ counterpart since the impl should be shared, and
# duplicating tests across languages doesn't scale.
image.python_unittest(
    name = "test-image-unittest-repo-server",
    srcs = ["test_image_unittest_repo_server.py"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "build_appliance_testing",
    container_opts = image.opts(shadow_proxied_binaries = True),
    run_as_user = "root",
    deps = [
        "//antlir:fs_utils",
        "//antlir:testlib_flavor_helpers",
        "//antlir/rpm:find_snapshot",
    ],
)

image.python_unittest(
    name = "test-image-hostname-python",
    srcs = ["test_image_hostname.py"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "test-layer",
    hostname = "test-hostname.com",
)

image.cpp_unittest(
    name = "test-image-cpp-unittest",
    srcs = ["ImageCppUnittestTest.cpp"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "test-layer",
    env = {"kitteh": "meow"},
)

image.cpp_unittest(
    name = "test-boot-image-cpp-unittest",
    srcs = ["ImageCppUnittestTest.cpp"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "test-layer",
    env = {"kitteh": "meow"},
    boot = True,
)

image.cpp_unittest(
    name = "test-image-hostname-cpp",
    srcs = ["ImageHostnameTest.cpp"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "test-layer",
    env = {},
    hostname = "test-hostname.com",
)

# Ensures that BUCK_BUILD_ID isn't just missing from the container tests by
# accident, but rather that it's explicitly sanitized.
python_unittest(
    name = "test-unsanitized-env",
    srcs = ["test_unsanitized_env.py"],
    env = {"kitteh": "meow"},
)

image.rust_unittest(
    name = "test-image-rust-unittest",
    srcs = ["image_rust_unittest.rs"],
    flavor = "antlir_test",
    layer = TEST_IMAGE_PREFIX + "test-layer",
    env = {
        "dogsgo": "woof",
        "kitteh": "meow",
    },
    crate_root = "image_rust_unittest.rs",
)

# systemd unit features
export_file(name = "cheese-export.service")

export_file(name = "cheese-source.service")

buck_genrule(
    name = "cheese-generator",
    out = "dir",
    bash = """
    mkdir -p ${OUT}
    cat > ${OUT}/cheese-generated.service <<'EOF'
[Unit]
Description=A generated cheese service.

[Service]
ExecStart=/bin/true
EOF
    """,
)

export_file(name = "cheese-dropin.conf")

buck_genrule(
    name = "cheese-dropin-generator",
    out = "dir",
    bash = """
    mkdir -p ${OUT}
    cp $(location :cheese-dropin.conf) $OUT/
    """,
)

image.layer(
    name = "systemd_feature-layer",
    parent_layer = flavor_helpers.default_flavor_build_appliance,
    features = [
        # A target with a dest
        systemd.install_unit(
            ":cheese-export.service",
            dest = "cheese-export-with-dest.service",
        ),
        systemd.enable_unit("cheese-export-with-dest.service"),
        systemd.install_dropin(
            "cheese-dropin.conf",
            "cheese-export-with-dest.service",
            dest = "cheese-dropin-with-dest.conf",
        ),

        # A target with no dest and enabled in a non-default target
        systemd.install_unit(":cheese-export.service"),
        systemd.enable_unit(
            "cheese-export.service",
            target = "sysinit.target",
        ),
        systemd.install_dropin(":cheese-dropin.conf", "cheese-export.service"),

        # Local file syntax sugar with no dest
        systemd.install_unit("cheese-file.service"),
        systemd.enable_unit("cheese-file.service"),
        systemd.install_dropin("cheese-dropin.conf", "cheese-file.service"),

        # Enable in a target with Requires= dep type
        systemd.install_unit("cheese-requires.service"),
        systemd.enable_unit(
            "cheese-requires.service",
            target = "example.target",
            dep_type = "requires",
        ),

        # Image source from a genrule, with a path
        systemd.install_unit(image.source(
            ":cheese-generator",
            path = "cheese-generated.service",
        )),
        systemd.install_dropin(
            image.source(
                ":cheese-dropin-generator",
                path = "cheese-dropin.conf",
            ),
            "cheese-generated.service",
        ),

        # Image source with no path
        systemd.install_unit(image.source(
            ":cheese-source.service",
        )),
        systemd.install_dropin(
            image.source(":cheese-dropin.conf"),
            "cheese-source.service",
        ),
        # Mask a unit
        systemd.mask_units(["cheese-source.service"]),
        # Mask a tmpfiles.d config
        systemd.mask_tmpfiles(["testconfig.conf"]),
    ],
)

image.python_unittest(
    name = "test-systemd-features",
    layer = ":systemd_feature-layer",
    srcs = ["test_systemd_features.py"],
    deps = ["//antlir:fs_utils"],
)

python_unittest(
    name = "test-fail-with-message",
    srcs = ["test_fail_with_message.py"],
    needed_coverage = [
        (100, "//antlir/bzl:fail-with-message-library"),
    ],
    resources = {"//antlir/bzl:fail-with-message": "fail-with-message"},
    deps = [
        "//antlir/bzl:fail-with-message-library",
    ],
)
