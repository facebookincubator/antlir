load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/testing:image_test.bzl", "image_python_test")
load("//antlir/bzl:build_defs.bzl", "export_file")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl/starlark_unittest:defs.bzl", "starlark_unittest")
load(":test_stat.bzl", "test_parse", "test_simple_parse")

oncall("antlir")

# systemd unit features
export_file(name = "cheese-export.service")

export_file(name = "cheese-source.service")

export_file(name = "cheese-dropin.conf")

image.layer(
    name = "systemd_feature-layer",
    features = [
        feature.rpms_install(rpms = ["systemd"]),
        # A target with a dest
        systemd.install_unit(
            ":cheese-export.service",
            dest = "cheese-export-with-dest.service",
        ),
        systemd.enable_unit("cheese-export-with-dest.service"),
        systemd.install_dropin(
            "cheese-dropin.conf",
            "cheese-export-with-dest.service",
            dest = "cheese-dropin-with-dest.conf",
        ),

        # A target with no dest and enabled in a non-default target
        systemd.install_unit(":cheese-export.service"),
        systemd.enable_unit(
            "cheese-export.service",
            target = "sysinit.target",
        ),
        systemd.install_dropin(":cheese-dropin.conf", "cheese-export.service"),

        # Local file syntax sugar with no dest
        systemd.install_unit("cheese-file.service"),
        systemd.enable_unit("cheese-file.service"),
        systemd.install_dropin("cheese-dropin.conf", "cheese-file.service"),

        # Enable in a target with Requires= dep type
        systemd.install_unit("cheese-requires.service"),
        systemd.enable_unit(
            "cheese-requires.service",
            dep_type = "requires",
            target = "example.target",
        ),

        # Image source with no path
        systemd.install_unit(":cheese-source.service"),
        systemd.install_dropin(
            ":cheese-dropin.conf",
            "cheese-source.service",
        ),
        # Mask a unit
        systemd.mask_units(["cheese-source.service"]),
        # Mask a tmpfiles.d config
        systemd.mask_tmpfiles(["testconfig.conf"]),

        # Install and enable a user service
        systemd.install_user_unit("cheese-user.service"),
        systemd.enable_user_unit("cheese-user.service"),

        # Install and enable a template unit
        systemd.install_unit("cheese-template@.service"),
        systemd.enable_unit("cheese-template@foo.service"),
    ],
)

image_python_test(
    name = "test-systemd-features",
    srcs = ["test_systemd_features.py"],
    layer = ":systemd_feature-layer",
    deps = ["//antlir:fs_utils"],
)

starlark_unittest(
    name = "test-sha256",
    srcs = ["test_sha256.bzl"],
    deps = [
        "//antlir/bzl:sha256.bzl",
    ],
)

# These tests are for Starlark code so they run on load for any target here
test_simple_parse()

test_parse()
