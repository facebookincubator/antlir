# @noautodeps

load("//antlir/bzl:defs.bzl", "bzl_to_py")
load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "python_library", "python_unittest", "rust_unittest", "third_party")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:template.bzl", "template")
load(":test.shape.bzl", "affiliations_t", "character_collection_t", "character_t", "hashable_t", "lightsaber_t")

shape.impl(
    name = "test.shape",
    deps = ["//antlir/bzl:target.shape"],
    rust_crate = "test_shape",
)

buck_genrule(
    name = "luke-lightsaber",
    out = "out",
    bash = "echo 'luke-lightsaber' > $OUT",
    visibility = [],
)

buck_genrule(
    name = "vader-lightsaber",
    out = "out",
    bash = "echo 'vader-lightsaber' > $OUT",
    visibility = [],
)

characters = [
    shape.new(
        character_t,
        name = "Luke Skywalker",
        appears_in = [
            4,
            5,
            6,
        ],
        friends = [
            shape.new(
                character_t.friends.item_type,
                name = "Han Solo",
            ),
            shape.new(
                character_t.friends.item_type,
                name = "Leia Organa",
            ),
            shape.new(
                character_t.friends.item_type,
                name = "C-3PO",
            ),
        ],
        weapon = shape.new(
            lightsaber_t,
            color = "green",
            target = ":luke-lightsaber",
        ),
        affiliations = shape.new(
            affiliations_t,
            faction = "Rebellion",
        ),
        personnel_file = "/rebellion/luke_skywalker.txt",
    ),
    shape.new(
        character_t,
        name = "Darth Vader",
        appears_in = [
            4,
            5,
            6,
        ],
        friends = [],
        weapon = shape.new(
            lightsaber_t,
            color = "red",
            target = ":vader-lightsaber",
        ),
        affiliations = shape.new(
            affiliations_t,
            faction = "Empire",
        ),
    ),
    shape.new(
        character_t,
        name = "C-3PO",
        appears_in = [
            1,
            2,
            3,
            4,
            5,
            6,
        ],
        friends = [
            shape.new(
                character_t.friends.item_type,
                name = "R2-D2",
            ),
        ],
        metadata = {"Droid-Function": "Protocol"},
    ),
]

python_unittest(
    name = "test-shape",
    srcs = ["test_shape.py"],
    env = {
        "characters": shape.do_not_cache_me_json(
            shape.new(
                character_collection_t,
                characters = characters,
            ),
        ),
    },
    needed_coverage = [
        (100, "//antlir:shape"),
    ],
    resources = {
        shape.json_file(
            name = "data.json",
            instance = shape.new(
                hashable_t,
                name = "Stormtrooper",
                appears_in = [1],
            ),
        ): "data.json",
        shape.render_template(
            name = "template",
            instance = shape.new(
                character_t,
                name = "Stormtrooper",
                appears_in = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                ],
                friends = [
                    shape.new(
                        character_t.friends.item_type,
                        name = name,
                    )
                    for name in [
                        "Vader",
                        "Palpatine",
                        "Tarkin",
                    ]
                ],
            ),
            template = ":example-template",
        ): "template.txt",
    },
    deps = [
        ":test.shape-python",
        shape.python_data(
            name = "data",
            instance = shape.new(
                hashable_t,
                name = "Stormtrooper",
                appears_in = [1],
            ),
            shape_impl = ":test.shape",
            module = "data",
            type_name = "hashable_t",
        ),
        "//antlir/bzl:target.shape",
    ],
)

template(
    name = "example-template",
    srcs = ["template.jinja2"],
)

# construct files with some shims to allow the python_unittest below to import
# shape.bzl as a valid python source file

bzl_to_py(
    name = "target_tagger_helper_bzl.py",
    bzl_target = "//antlir/bzl:target_tagger_helper.bzl",
    imports = ["from .shape_bzl_shims import *"],
)

bzl_to_py(
    name = "shape_bzl.py",
    bzl_target = "//antlir/bzl:shape.bzl",
    imports = [
        "from .shape_bzl_shims import *",
        "from .target_tagger_helper_bzl import target_tagger_helper",
    ],
)

python_library(
    name = "shape_bzl",
    srcs = {
        ":shape_bzl.py": "shape_bzl.py",
        ":target_tagger_helper_bzl.py": "target_tagger_helper_bzl.py",
        "shape_bzl_shims.py": "shape_bzl_shims.py",
    },
)

python_unittest(
    name = "test-shape-bzl",
    srcs = [
        "test_shape_bzl.py",
    ],
    needed_coverage = [
        (100, ":shape_bzl"),
    ],
    deps = [
        ":shape_bzl",
    ],
)

rust_unittest(
    name = "test-shape-rs",
    srcs = ["test_shape.rs"],
    crate_root = "test_shape.rs",
    env = {
        "characters": shape.do_not_cache_me_json(
            shape.new(
                character_collection_t,
                characters = characters,
            ),
        ),
    },
    deps = [
        ":test.shape-rust",
    ] + third_party.libraries(
        [
            "anyhow",
            "serde_json",
        ],
        platform = "rust",
    ),
)
