# @noautodeps

load("//antlir/bzl:build_defs.bzl", "buck_genrule", "python_library", "python_unittest", "rust_unittest")
load("//antlir/bzl:defs.bzl", "bzl_to_py")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:template.bzl", "template")
load(":test.shape.bzl", "affiliations_t", "character_collection_t", "character_t", "friend_t", "hashable_t", "lightsaber_t")

oncall("antlir")

shape.impl(
    name = "test.shape",
    rust_crate = "test_shape",
    deps = [
        "//antlir/bzl:target.shape",
    ],
)

buck_genrule(
    name = "luke-lightsaber",
    out = "out",
    bash = "echo 'luke-lightsaber' > $OUT",
    visibility = [],
)

buck_genrule(
    name = "vader-lightsaber",
    out = "out",
    bash = "echo 'vader-lightsaber' > $OUT",
    visibility = [],
)

characters = [
    character_t(
        name = "Luke Skywalker",
        affiliations = affiliations_t(
            faction = "Rebellion",
        ),
        appears_in = [
            4,
            5,
            6,
        ],
        friends = [
            friend_t(name = "Han Solo"),
            friend_t(name = "Leia Organa"),
            friend_t(name = "C-3PO"),
        ],
        personnel_file = "/rebellion/luke_skywalker.txt",
        weapon = lightsaber_t(
            color = "green",
            target = ":luke-lightsaber",
        ),
    ),
    character_t(
        name = "Darth Vader",
        affiliations = affiliations_t(
            faction = "Empire",
        ),
        appears_in = [
            4,
            5,
            6,
        ],
        friends = [],
        weapon = lightsaber_t(
            color = "red",
            target = ":vader-lightsaber",
        ),
    ),
    character_t(
        name = "C-3PO",
        appears_in = [
            1,
            2,
            3,
            4,
            5,
            6,
        ],
        friends = [
            friend_t(
                name = "R2-D2",
            ),
        ],
        metadata = {"Droid-Function": "Protocol"},
    ),
]

shape.json_file(
    name = "characters.json",
    instance = character_collection_t(
        characters = characters,
    ),
)

python_unittest(
    name = "test-shape",
    srcs = ["test_shape.py"],
    env = {
        "characters": shape.do_not_cache_me_json(
            character_collection_t(
                characters = characters,
            ),
        ),
    },
    needed_coverage = [
        (100, "//antlir:shape"),
    ],
    resources = {
        shape.json_file(
            name = "data.json",
            instance = hashable_t(
                name = "Stormtrooper",
                appears_in = [1],
            ),
        ): "data.json",
        shape.render_template(
            name = "template",
            instance = character_t(
                name = "Stormtrooper",
                appears_in = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                ],
                friends = [
                    shape.new(
                        friend_t,
                        name = name,
                    )
                    for name in [
                        "Vader",
                        "Palpatine",
                        "Tarkin",
                    ]
                ],
            ),
            template = ":example-template",
        ): "template.txt",
    },
    deps = [
        ":test.shape-python",
        shape.python_data(
            name = "data",
            instance = hashable_t(
                name = "Stormtrooper",
                appears_in = [1],
            ),
            module = "data",
            shape_impl = ":test.shape",
            type_name = "hashable_t",
        ),
    ],
)

template(
    name = "example-template",
    srcs = ["template.jinja2"],
)

# construct files with some shims to allow the python_unittest below to import
# shape.bzl as a valid python source file

bzl_to_py(
    name = "shape_bzl.py",
    bzl_target = "//antlir/bzl:shape.bzl",
    imports = [
        "from .shape_bzl_shims import *",
    ],
)

python_library(
    name = "shape_bzl",
    srcs = {
        ":shape_bzl.py": "shape_bzl.py",
        "shape_bzl_shims.py": "shape_bzl_shims.py",
    },
)

python_unittest(
    name = "test-shape-bzl",
    srcs = [
        "test_shape_bzl.py",
    ],
    needed_coverage = [
        (100, ":shape_bzl"),
    ],
    deps = [
        ":shape_bzl",
    ],
)

rust_unittest(
    name = "test-shape-rs",
    srcs = ["test_shape.rs"],
    crate_root = "test_shape.rs",
    env = {
        "characters": shape.do_not_cache_me_json(
            character_collection_t(
                characters = characters,
            ),
        ),
    },
    deps = [
        "anyhow",
        "fbthrift",
        "serde_json",
        ":test.shape-rust",
    ],
)
