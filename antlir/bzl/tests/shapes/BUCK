load("//antlir/bzl:oss_shim.bzl", "buck_genrule", "python_library", "python_unittest")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl:template.bzl", "template")

# There are a lot of shapes that are used in test cases.
# This would rapidly clutter targets in antlir/bzl/tests, so define them all
# here in a file dedicated to shape test cases

affiliations_t = shape.shape(faction = str)

# A shape that references buck targets
lightsaber_t = shape.shape(
    color = shape.enum("red", "green", "blue"),
    target = shape.target(optional = True),
)

# Test data adapted from the GraphQL Star Wars examples
character_t = shape.shape(
    name = str,
    appears_in = shape.list(int),
    friends = shape.list(shape.shape(
        name = str,
    )),
    lightsaber = shape.field(
        lightsaber_t,
        optional = True,
    ),
    callsign = shape.tuple(
        str,
        int,
        optional = True,
    ),
    metadata = shape.dict(
        str,
        str,
        default = {"species": "human"},
    ),
    affiliations = shape.field(
        affiliations_t,
        default = shape.new(
            affiliations_t,
            faction = "Rebellion",
        ),
    ),
    personnel_file = shape.path(optional = True),
)

# TODO when read-only dicts land just use character_t
hashable_t = shape.shape(
    name = str,
    appears_in = shape.list(int),
    lightsaber_color = shape.field(
        str,
        optional = True,
    ),
    callsign = shape.tuple(
        str,
        int,
        optional = True,
    ),
)

buck_genrule(
    name = "luke-lightsaber",
    out = "out",
    bash = "echo 'luke-lightsaber' > $OUT",
    visibility = [],
)

buck_genrule(
    name = "vader-lightsaber",
    out = "out",
    bash = "echo 'vader-lightsaber' > $OUT",
    visibility = [],
)

characters = [
    shape.new(
        character_t,
        name = "Luke Skywalker",
        appears_in = [
            4,
            5,
            6,
        ],
        friends = [
            shape.new(
                character_t.friends.item_type,
                name = "Han Solo",
            ),
            shape.new(
                character_t.friends.item_type,
                name = "Leia Organa",
            ),
            shape.new(
                character_t.friends.item_type,
                name = "C-3PO",
            ),
        ],
        lightsaber = shape.new(
            lightsaber_t,
            color = "green",
            target = ":luke-lightsaber",
        ),
        callsign = ("Red", 5),
        affiliations = shape.new(
            affiliations_t,
            faction = "Rebellion",
        ),
        personnel_file = "/rebellion/luke_skywalker.txt",
    ),
    shape.new(
        character_t,
        name = "Darth Vader",
        appears_in = [
            4,
            5,
            6,
        ],
        friends = [],
        lightsaber = shape.new(
            lightsaber_t,
            color = "red",
            target = ":vader-lightsaber",
        ),
        affiliations = shape.new(
            affiliations_t,
            faction = "Empire",
        ),
    ),
    shape.new(
        character_t,
        name = "C-3PO",
        appears_in = [
            1,
            2,
            3,
            4,
            5,
            6,
        ],
        friends = [
            shape.new(
                character_t.friends.item_type,
                name = "R2-D2",
            ),
        ],
        metadata = {"Droid-Function": "Protocol"},
    ),
]

character_collection_t = shape.shape(characters = shape.list(character_t))

shape.loader(
    name = "hashable_t",
    shape = hashable_t,
    classname = "hashable_t",
)

shape.loader(
    name = "character_t",
    shape = character_t,
    classname = "character_t",
)

shape.loader(
    name = "character_collection_t",
    shape = character_collection_t,
    classname = "character_collection_t",
)

python_unittest(
    name = "test-shape",
    srcs = ["test_shape.py"],
    env = {
        "characters": shape.do_not_cache_me_json(
            shape.new(
                character_collection_t,
                characters = characters,
            ),
        ),
    },
    needed_coverage = [
        (100, "//antlir:shape"),
    ],
    resources = {
        shape.json_file(
            name = "data.json",
            instance = shape.new(
                hashable_t,
                name = "Stormtrooper",
                appears_in = [1],
            ),
        ): "data.json",
        shape.render_template(
            name = "template",
            instance = shape.new(
                character_t,
                name = "Stormtrooper",
                appears_in = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                ],
                friends = [
                    shape.new(
                        character_t.friends.item_type,
                        name = name,
                    )
                    for name in [
                        "Vader",
                        "Palpatine",
                        "Tarkin",
                    ]
                ],
            ),
            template = ":example-template",
        ): "template.txt",
    },
    deps = [
        ":character_collection_t",
        ":character_t",
        ":hashable_t",
        shape.python_data(
            name = "data",
            instance = shape.new(
                hashable_t,
                name = "Stormtrooper",
                appears_in = [1],
            ),
            module = "data",
            classname = "StormtrooperArgsType",
        ),
    ],
)

template(
    name = "example-template",
    srcs = ["template.jinja2"],
)

# construct a file with some shims to allow the python_unittest below to import
# shape.bzl as a valid python source file
buck_genrule(
    name = "shape_bzl.py",
    out = "shape_bzl.py",
    cmd = """
    echo "from .shape_bzl_shims import *" > $OUT
    # small hack to keep line numbers the same as the original source, just
    # remove the first line which is a comment anyway
    tail -n +2 $(location //antlir/bzl:shape.bzl) >> $OUT
    """,
)

python_library(
    name = "shape_bzl",
    srcs = {
        ":shape_bzl.py": "shape_bzl.py",
        "shape_bzl_shims.py": "shape_bzl_shims.py",
    },
)

python_unittest(
    name = "test-shape-bzl",
    srcs = [
        "test_shape_bzl.py",
    ],
    needed_coverage = [
        (100, ":shape_bzl"),
    ],
)
