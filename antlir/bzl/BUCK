load("//antlir/bzl:oss_shim.bzl", "export_file", "python_binary")
load(":defs.bzl", "fake_macro_library")

# IMPORTANT: If you add new `.bzl` files or dependencies in `antlir/`,
# make sure their dependency structure is reflected below.  Just run `grep
# 'load(":'` from `antlir/`, and visually compare with the below.  Future:
# this could easily be automated in the style of Bistro's
# `targets_to_cmake_lists.py`.

# The following rules are "fake" in the sense that their build artifacts are
# actually discarded.  However, they are required to trigger automatic
# builds and tests on changes to .bzl files, so it is important to keep
# these up-to-date.  Furthermore, when you add a new rule type, you'll need
# to make its targets depend on the corresponding `fake_macro_library`.
# This should eventually become unnecessary, follow Q10141.

fake_macro_library(
    name = "flavor_helpers",
    srcs = ["flavor_helpers.bzl"],
    deps = [
        ":constants",
        ":structs",
    ],
)

fake_macro_library(
    name = "compile_image_features",
    srcs = ["compile_image_features.bzl"],
    deps = [
        ":constants",
        ":flavor_helpers",
        ":target_tagger",
        "//antlir/bzl/image/feature:new",
    ],
)

fake_macro_library(
    name = "constants",
    srcs = ["constants.bzl"],
    deps = [":snapshot_install_dir"],
)

fake_macro_library(
    name = "container_opts",
    srcs = ["container_opts.bzl"],
    deps = [
        ":shape",
        ":snapshot_install_dir",
    ],
)

fake_macro_library(
    name = "layer_resource",
    srcs = ["layer_resource.bzl"],
)

fake_macro_library(
    name = "target_helpers",
    srcs = ["target_helpers.bzl"],
    deps = [":sha256"],
)

fake_macro_library(
    name = "image_source",
    srcs = ["image_source.bzl"],
    deps = [":maybe_export_file"],
)

fake_macro_library(
    name = "image_layer_utils",
    srcs = ["image_layer_utils.bzl"],
)

fake_macro_library(
    name = "image_utils",
    srcs = ["image_utils.bzl"],
)

fake_macro_library(
    name = "add_stat_options",
    srcs = ["add_stat_options.bzl"],
)

fake_macro_library(
    name = "maybe_export_file",
    srcs = ["maybe_export_file.bzl"],
)

fake_macro_library(
    name = "target_tagger",
    srcs = ["target_tagger.bzl"],
    deps = [
        ":image_source",
        ":structs",
        ":target_helpers",
        ":wrap_runtime_deps",
    ],
)

fake_macro_library(
    name = "rpm_repo_snapshot",
    srcs = ["rpm_repo_snapshot.bzl"],
    deps = [
        ":image_layer",
        ":maybe_export_file",
        ":snapshot_install_dir",
        ":target_helpers",
        ":wrap_runtime_deps",
        "//antlir/bzl/image_actions:ensure_dirs_exist",
        "//antlir/bzl/image_actions:install",
        "//antlir/bzl/image_actions:remove",
        "//antlir/bzl/image_actions:symlink",
    ],
)

fake_macro_library(
    name = "snapshot_install_dir",
    srcs = ["snapshot_install_dir.bzl"],
    deps = [":target_helpers"],
)

fake_macro_library(
    name = "wrap_runtime_deps",
    srcs = ["wrap_runtime_deps.bzl"],
    deps = [
        ":target_helpers",
    ],
)

fake_macro_library(
    name = "image",
    srcs = ["image.bzl"],
    deps = [
        ":compile_image_features",
        ":constants",
        ":image_cpp_unittest",
        ":image_genrule_layer",
        ":image_gpt",
        ":image_layer",
        ":image_layer_alias",
        ":image_layer_from_package",
        ":image_layer_utils",
        ":image_package",
        ":image_packaged_layer",
        ":image_python_unittest",
        ":image_rust_unittest",
        ":image_source",
        ":image_test_rpm_names",
        ":image_utils",
        "//antlir/bzl/image_actions:clone",
        "//antlir/bzl/image_actions:ensure_dirs_exist",
        "//antlir/bzl/image_actions:install",
        "//antlir/bzl/image_actions:mount",
        "//antlir/bzl/image_actions:remove",
        "//antlir/bzl/image_actions:rpms",
        "//antlir/bzl/image_actions:symlink",
        "//antlir/bzl/image_actions:tarball",
    ],
)

fake_macro_library(
    name = "image_genrule_layer",
    srcs = ["image_genrule_layer.bzl"],
    deps = [
        ":compile_image_features",
        ":container_opts",
        ":image_layer_utils",
        ":image_utils",
        ":shape",
        ":structs",
        ":target_tagger",
    ],
)

fake_macro_library(
    name = "image_layer",
    srcs = ["image_layer.bzl"],
    deps = [
        ":compile_image_features",
        ":image_layer_utils",
        ":image_utils",
    ],
)

fake_macro_library(
    name = "image_packaged_layer",
    srcs = ["image_packaged_layer.bzl"],
    deps = [
        ":image_package",
    ],
)

fake_macro_library(
    name = "image_layer_from_package",
    srcs = ["image_layer_from_package.bzl"],
    deps = [
        ":compile_image_features",
        ":constants",
        ":image_layer_utils",
        ":image_utils",
        ":target_tagger",
    ],
)

fake_macro_library(
    name = "image_layer_alias",
    srcs = ["image_layer_alias.bzl"],
)

fake_macro_library(
    name = "fetched_package_layer",
    srcs = ["fetched_package_layer.bzl"],
    deps = [
        ":image_layer",
        ":target_helpers",
        "//antlir/bzl/image/feature:new",
    ],
)

fake_macro_library(
    name = "image_package",
    srcs = ["image_package.bzl"],
    deps = [":image_utils"],
)

fake_macro_library(
    name = "image_gpt",
    srcs = ["image_gpt.bzl"],
    deps = [":image_utils"],
)

fake_macro_library(
    name = "image_unittest_helpers",
    srcs = ["image_unittest_helpers.bzl"],
    deps = [
        ":constants",
        ":container_opts",
        ":image_layer",
        ":image_utils",
        ":snapshot_install_dir",
        ":structs",
        "//antlir/bzl/image_actions:install",
    ],
)

fake_macro_library(
    name = "image_python_unittest",
    srcs = ["image_python_unittest.bzl"],
    deps = [":image_unittest_helpers"],
)

fake_macro_library(
    name = "image_cpp_unittest",
    srcs = ["image_cpp_unittest.bzl"],
    deps = [":image_unittest_helpers"],
)

fake_macro_library(
    name = "image_rust_unittest",
    srcs = ["image_rust_unittest.bzl"],
    deps = [":image_unittest_helpers"],
)

fake_macro_library(
    name = "image_test_rpm_names",
    srcs = ["image_test_rpm_names.bzl"],
    deps = [":image_python_unittest"],
)

fake_macro_library(
    name = "sha256",
    srcs = ["sha256.bzl"],
)

fake_macro_library(
    name = "shape",
    srcs = ["shape.bzl"],
    deps = [
        ":sha256",
        ":structs",
        ":target_helpers",
    ],
)

export_file(
    name = "shape.bzl",
)

fake_macro_library(
    name = "structs",
    srcs = ["structs.bzl"],
)

fake_macro_library(
    name = "systemd",
    srcs = ["systemd.bzl"],
    deps = [
        ":shape",
    ],
)

fake_macro_library(
    name = "linux_busybox",
    srcs = [
        "linux/busybox.bzl",
    ],
)

fake_macro_library(
    name = "linux_filesystem",
    srcs = [
        "linux/filesystem.bzl",
    ],
)

python_binary(
    name = "fail-with-message",
    srcs = ["fail_with_message.py"],
    main_module = "antlir.bzl.fail_with_message",
    visibility = ["PUBLIC"],
    deps = ["//antlir:cli"],
)
