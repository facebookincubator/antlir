load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "export_file", "python_binary")
load("//antlir/bzl:test_rpms.bzl", "test_rpms")
load("//antlir/bzl/genrule/rpmbuild:rpmbuild.bzl", "image_import_rpm_public_key_layer", "image_rpmbuild")
load("//antlir/bzl/image/feature:defs.bzl", "feature")

export_file(
    name = "toy_srcs",
)

export_file(
    name = "toy.spec",
)

# An example of an RPM signer that can sign an RPM with a test key.
#
# When signing with an existing key in a gpg agent or keyring, you can omit the
# `resources` argument below and update the script with the appropriate value
# for `$GNUPGHOME`, and correct key ID to `rpmsign`.
# For this use-case (i.e. "existing key in gpg agent or keyring"), a clean
# approach would involve:
# - A macro like `def gnupg_key_signer(name, key_id)`.  To minimize odds of
#   collision, replace `key_id` with `fingerprint` (ideally `sha256_fingerprint`
#   though it's not immediately obvious if one can force this to be usable
#   regardless of the setting on the ambient OS).
# - Internally, the analog of `rpm_sign_with_test_key.sh` would use a
#   `$GNUPGHOME` available on the ambient OS.
# - The build is still deterministic because we trust that the identifier
#   (e.g. fingeprint) we used for the key identifies it uniquely.
python_binary(
    name = "rpm-sign-with-test-key",
    srcs = ["rpm_sign_with_test_key.py"],
    main_module = "antlir.bzl.genrule.rpmbuild.tests.rpm_sign_with_test_key",
    resources = {
        "//antlir/rpm/tests/gpg_test_keypair:gpg-test-signing-key": "gpg-test-signing-key",
    },
    visibility = [
        "//antlir/bzl/genrule/rpmbuild/facebook/...",
        "//antlir/bzl/genrule/rpmbuild/tests/...",
    ],
)

image_rpmbuild(
    name = "toy-rpm",
    signer = ":rpm-sign-with-test-key",
    source = ":toy_srcs",
    specfile = ":toy.spec",
)

# Tests that the internals of the `image_rpmbuild` layers are as we expect.
image.python_unittest(
    name = "test-toy-rpm-build",
    srcs = ["test_toy_rpm_build.py"],
    layer = ":toy-rpm-rpmbuild-build",
    deps = ["//antlir/rpm:rpm_metadata"],
)

# Because `toy.rpm` was signed with a test key that isn't pre-installed in the
# parent_layer, we need to import it before we install the RPM (below).
image_import_rpm_public_key_layer(
    name = "install-rpm-pubkey",
    # Inherit from the BA so that we have users and utilities set up for the
    # unit test below.
    parent_layer = "//antlir/compiler/test_images:build_appliance_testing",
    pubkeys = [
        image.source(
            "//antlir/rpm/tests/gpg_test_keypair:gpg-test-public-key",
        ),
    ],
)

# Install a signed RPM via `image.source`.  Installing an unsigned RPM fails.
image.layer(
    name = "install-signed-toy-rpm",
    parent_layer = ":install-rpm-pubkey",
    features = [
        test_rpms.add([
            image.source(
                ":toy-rpm",
                path = "toy.rpm",
            ),
        ]),
        image.ensure_dirs_exist("/antlir"),
        feature.install(
            image.source(
                ":toy-rpm",
                path = "toy.rpm",
            ),
            "/antlir/toy.rpm",
        ),
    ],
)

# Check the result of installing the RPM we built.
image.python_unittest(
    name = "test-install-signed-toy-rpm",
    srcs = ["test_install_signed_toy_rpm.py"],
    layer = ":install-signed-toy-rpm",
)
