# @noautodeps

# NB: There is no binary here because the image compiler does not get built
# by Buck, it is executed in-place using the system Python.

load("//antlir/bzl:constants.bzl", "REPO_CFG")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:layer_resource.bzl", "LAYER_SLASH_ENCODE", "layer_resource")
load("//antlir/bzl:oss_shim.bzl", "python_library", "python_unittest")
load("//antlir/compiler:defs.bzl", "READ_MY_DOC_image_feature_target", "TEST_IMAGE_PREFIX", "image_feature_python_unittest")

python_unittest(
    name = "test-subvolume-on-disk",
    srcs = ["test_subvolume_on_disk.py"],
    needed_coverage = [(
        100,
        "//antlir/compiler:subvolume_on_disk",
    )],
    deps = ["//antlir/compiler:subvolume_on_disk"],
)

python_unittest(
    name = "test-procfs-serde",
    srcs = ["test_procfs_serde.py"],
    needed_coverage = [(
        100,
        "//antlir/compiler:procfs_serde",
    )],
    deps = [
        "//antlir:subvol_utils",
        "//antlir:testlib_subvol_helpers",
        "//antlir/compiler:procfs_serde",
    ],
)

python_unittest(
    name = "test-requires-provides",
    srcs = ["test_requires_provides.py"],
    needed_coverage = [(
        100,
        "//antlir/compiler:requires_provides",
    )],
    deps = ["//antlir/compiler:requires_provides"],
)

python_unittest(
    name = "test-dep-graph",
    srcs = ["test_dep_graph.py"],
    needed_coverage = [(
        100,
        "//antlir/compiler:dep_graph",
    )],
    deps = [
        "//antlir:subvol_utils",
        "//antlir/compiler:dep_graph",
        "//antlir/compiler/items:ensure_dirs_exist",
        "//antlir/compiler/items:install_file",
        "//antlir/compiler/items:remove_path",
        "//antlir/compiler/items:symlink",
    ],
)

python_library(
    name = "sample_items",
    srcs = ["sample_items.py"],
    deps = [
        "//antlir:bzl_const",
        "//antlir/compiler/items:all-items",
    ],
)

# Transitive deps of `tests:feature_kitchen_sink` --

TEST_IMAGE_FEATURE_TRANSITIVE_DEPS = [
    READ_MY_DOC_image_feature_target("feature_dirs"),
    READ_MY_DOC_image_feature_target("feature_bad_dir"),
    READ_MY_DOC_image_feature_target("feature_bad_dir_mode_mismatch"),
    READ_MY_DOC_image_feature_target("feature_symlinks"),
    READ_MY_DOC_image_feature_target("feature_tar_and_rpms"),
    "rpm-test-cheese-2-1.rpm",
    READ_MY_DOC_image_feature_target("feature_mount"),
    "print-ok",
    "dir-print-ok",
    "dir-with-script",
    READ_MY_DOC_image_feature_target("feature_install_files"),
    READ_MY_DOC_image_feature_target("feature_kitchen_sink"),
    "hello_world_base",
    "hello_world.tar",
    "shadow_me",
]

TEST_IMAGE_WRAPPED_TRANSITIVE_DEPS = ([
    "dir-print-ok",
    "print-ok",
] if REPO_CFG.artifacts_require_repo else [])

image_feature_python_unittest(
    name = "test-image-feature",
    srcs = ["test_image_feature.py"],
    # I cannot get coverage for `image_feature.py` here, because that is
    # executed by the Buck Python runtime.  I could conceivably shim all
    # that out, but it seems entirely not worth the trouble.
    needed_coverage = [(
        100,
        "//antlir/compiler:items_for_features",
    )],
    test_image_feature_transitive_deps = TEST_IMAGE_FEATURE_TRANSITIVE_DEPS,
    test_image_feature_wrapped_transitive_deps = TEST_IMAGE_WRAPPED_TRANSITIVE_DEPS,
    deps = [
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/compiler:dep_graph",
        "//antlir/compiler:items_for_features",
    ],
)

image_feature_python_unittest(
    name = "test-compiler",
    srcs = [
        "test_compiler.py",
        "test_compiler_integration.py",
    ],
    needed_coverage = [(
        100,
        "//antlir/compiler:compiler",
    )],
    resources = {
        "//antlir:compiler": "compiler-binary",
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "test-build-appliance",
        layer_resource(flavor_helpers.default_flavor_build_appliance): "default-build-appliance",
    },
    test_image_feature_transitive_deps = TEST_IMAGE_FEATURE_TRANSITIVE_DEPS,
    test_image_feature_wrapped_transitive_deps = TEST_IMAGE_WRAPPED_TRANSITIVE_DEPS,
    deps = [
        "//antlir:bzl_const",
        "//antlir:testlib_flavor_helpers",
        "//antlir:testlib_layer_resource",
        "//antlir:testlib_subvol_helpers",
        "//antlir/bzl:constants.shape-python",
        "//antlir/compiler:compiler",
    ],
)

IMAGE_LAYER_DEPS = [
    "genrule-layer",
    "genrule-layer-with-mounts",
    "layer-with-non-default-snapshot-rpm",
    "installed-files",
    "cloned-files",
    "child/layer",
    "parent_layer",
    "base_cheese_layer",
    "older_cheese_layer",
    "newer_cheese_layer",
    "reinstall_cheese_layer",
    "hello_world_base",
    "create_ops",
    "create_ops-from-dir",
    "create_ops-from-layer",
    "create_ops-alias",
] + [
    "validates-{}-build-appliance".format(i)
    for i in flavor_helpers.get_rpm_installers_supported()
]

python_unittest(
    name = "test-image-layer",
    srcs = ["test_image_layer.py"],
    # Python `deps` don't work as you'd expect in fbcode -- they have to be
    # other `python_*` rules.  `cpp_deps` is the kitchen sink?
    cpp_deps = [
        # Buck bug: `env` does not create a dependency; do it explicitly.
        TEST_IMAGE_PREFIX + t
        for t in IMAGE_LAYER_DEPS
    ],
    # NB: We could replace this with `resources` if this breaks, but while
    # the `env` thing works, the effort isn't worth the reward.  One upside
    # of ditching `env` is that the test will start working stand-alone
    # (running `test-image-layer#binary.par`) without needing `buck test`.
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + t,
        ): "test_image_layer_path_to_" + t.replace("/", LAYER_SLASH_ENCODE)
        for t in IMAGE_LAYER_DEPS
    },
    # As with `test-image-feature`, we cannot get `image_layer.py` coverage.
    deps = [
        ":sample_items",
        "//antlir:artifacts_dir",
        "//antlir:config",
        "//antlir:find_built_subvol",
        "//antlir:testlib_flavor_helpers",
        "//antlir:testlib_layer_resource",
        "//antlir:testlib_subvol_helpers",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
        "//antlir/compiler:procfs_serde",
    ],
)

# This isn't explicitly covering any single library, so no coverage claims.
python_unittest(
    name = "test-add-remove-conflict",
    srcs = ["test_add_remove_conflict.py"],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "addremove_conflict_child",
        ): "child",
        layer_resource(
            TEST_IMAGE_PREFIX + "addremove_conflict_parent",
        ): "parent",
    },
    deps = [
        "//antlir:testlib_flavor_helpers",
        "//antlir:testlib_layer_resource",
        "//antlir:testlib_subvol_helpers",
    ],
)
