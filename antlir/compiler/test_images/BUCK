# @noautodeps

load("//antlir/bzl:container_opts.shape.bzl", "shadow_path_t")
load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:rpm_repo_snapshot.bzl", "add_rpm_repo_snapshots_layer")
load("//antlir/bzl:systemd.bzl", "systemd")
load("//antlir/bzl:test_rpms.bzl", "test_rpms")
load("//antlir/bzl:wrap_runtime_deps.bzl", "maybe_wrap_executable_target")
load("//antlir/bzl/genrule/librename_shadowed:librename_shadowed.bzl", "image_build_librename_shadowed")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/bzl/image/feature:usergroup.bzl", "SHELL_NOLOGIN")
load("//antlir/bzl/image/package:btrfs.bzl", "btrfs")
load("//antlir/bzl/image/package:defs.bzl", "package")
load(":defs.bzl", "defs")

# While the reproducible-builds.org instructions (see below) ensure that a
# hash-stable artifact can be generated on the same system using the same
# bit-wise tools, it does not guarantee that the same bit-wise artifact can be
# generated by non-identical tools.  As such, this script will actually
# *not* generate the same bit-wise artifact across different linux
# distro/version combinations.  To compensate for that and to ensure that
# the `hello_world.tar` target generates a file with the same hash no matter
# what environment it's operating in we provide an already constructed tar
# file.

# The prebuilt tar file is generated via these steps:
#   tmp_dir=$(mktemp -d)
#   # the outer "$tmp_dir" (`mktemp` makes those restrictive by default.)
#   mkdir "$tmp_dir"/d/
#   touch "$tmp_dir"/d/hello_world
#   # Use deterministic options to create this tarball, as per
#   # reproducible-builds.org.  This ensures its hash is stable.
#   tar --sort=name --mtime=2018-01-01 --owner=0 --group=0 --numeric-owner \
#       -C "$tmp_dir/d" "./prebuilt_hello_world.tar" -cf .

oncall("twimage")

# Notes on what breaks across distros/versions:
# See https://www.gnu.org/software/tar/manual/html_node/Standard.html for
# the details on the tar structure.  The 1 part of the tar header that
# is not identical between systems is the `tv_nsec` part of the `mtime`
# attribute. This will cause the last 6 bytes of the `mtime` (offset 142) of
# each file header to be different between systems.  This then causes the
# full 8-byte `chksum` (offset 148) to be different as well.
defs.export_file(
    name = "hello_world.tar",
    src = "prebuilt_hello_world.tar",
)

# The rule `hello_world.tar` must be deterministic to be used in images.
hello_tar_hash = (
    "sha256:" +
    "dd83365abc69fe39990096a9396d9d2d6fbf75f849ab1640a10fdf9614d8d03d"
)

# This layer is currently just a rename of the default build appliance for the
# purpose of testing the nspawn runtime.  We use the build appliance
# because we know that it has the necessary tools and doesn't require us
# to build a special 'just for test' image from scratch.
# For completeness sake, especially for bootstrapping these tests we really
# should have a carefully constructed (probably by hand) unit test image layer
# that does not impose a circular dependency.  But for now, this works.
image.layer(
    name = "test-layer",
    features = [
        # `test_non_ephemeral_snapshot` needs a place to write as `nobody`.
        feature.ensure_subdirs_exist(
            "/home",
            "nobody",
            group = "nobody",
            mode = "u+rwx,og+rx",
            user = "nobody",
        ),
        "//antlir/features:build_artifact_cleanup",
    ],
    parent_layer = flavor_helpers.get_build_appliance("antlir_test"),
    runtime = ["systemd"],
    visibility = [
        "//antlir/...",
        "//metalos/...",
    ],
)

image.layer(
    name = "test-layer-iproute",
    features = [
        feature.rpms_install(
            [
                # Needed to check CAP_NET_ADMIN
                "iproute",
            ],
        ),
        "//antlir/features:build_artifact_cleanup",
    ],
    parent_layer = flavor_helpers.get_build_appliance(),
    visibility = ["//antlir/..."],
)

# Some tests require a bootable container. For now, these are the same as the
# "default" test layer, but in the future it may not be (as it was before), so
# preserve the intention of a separate bootable layer for tests that need it.
image.layer_alias(
    name = "bootable-systemd-os",
    layer = ":test-layer",
    runtime = ["systemd"],
    visibility = ["//antlir/nspawn_in_subvol/..."],
)

defs.python_binary(
    name = "fake-systemd-generator",
    srcs = ["fake_systemd_generator.py"],
    main_module = "antlir.compiler.test_images.fake_systemd_generator",
)

defs.python_binary(
    name = "fake-service",
    srcs = ["fake_service.py"],
    main_module = "antlir.compiler.test_images.fake_service",
)

feature.new(
    name = "systemd_buck_runnables",
    features = [
        # This generator makes a unit for `:fake-service`, and
        # `nspawn_in_subvol:test-run` ensures that the unit starts.
        feature.ensure_subdirs_exist("/etc/systemd", "system-generators"),
        feature.install_buck_runnable(":fake-systemd-generator", "/etc/systemd/system-generators/fake-systemd-generator"),
        feature.install_buck_runnable(":fake-service", "/fake-service"),
        systemd.install_unit("fake-static.service"),
        systemd.enable_unit("fake-static.service", "multi-user.target"),
    ],
    visibility = ["//antlir/vm/tests:"],
)

# Verifies that both units and generators can `install_buck_runnable`
# without the special marking of `wrap_runtime_deps.bzl`, i.e.  that
# `ANTLIR_CONTAINER_IS_NOT_PART_OF_A_BUILD_STEP=1` is passed to `systemd`.
image.layer(
    name = "bootable-systemd-os-with-buck-runnables",
    features = [":systemd_buck_runnables"],
    parent_layer = ":bootable-systemd-os",
    runtime = ["systemd"],
    visibility = ["//antlir/nspawn_in_subvol/..."],
)

# This assumes that the host provides `cc`, since we cannot install packages
# on top of the read-only host clone.
image_build_librename_shadowed(
    name = "build-librename-shadowed",
    parent_layer = ":test-layer",
)

defs.export_file(name = "shadow_me")

# Verified by `test_*_build_appliance` in `test-image-layer`.
[
    image.layer(
        name = "validates-{}-build-appliance".format(rpm_installer),
        features = [
            feature.install(":shadow_me", "/shadow_me"),
            test_rpms.add(["rpm-test-milk"]),
        ],
        flavor = "antlir_test",
        flavor_config_override = image.opts(
            rpm_installer = rpm_installer,
            rpm_repo_snapshot = None,
        ),
        visibility = ["//antlir/compiler/..."],
    )
    for rpm_installer in flavor_helpers.get_rpm_installers_supported()
]

# Since `rpm-test-milk` provides `/bin/sh`, use it to exercise genrule layers.
image.genrule_layer(
    name = "genrule-layer",
    antlir_rule = "user-internal",
    cmd = [
        "/bin/sh",
        "-c",
        "exec -a cp /bin/sh /shadow_me /I_AM_GENRULE_LAYER",
    ],
    container_opts = image.opts(
        # `shadow_proxied_binaries` and `serve_rpm_snapshots` are covered by
        # `rpmbuild.bzl` tests.
        shadow_paths = [shadow_path_t(
            src = "/rpm_test/milk.txt",
            dst = "/shadow_me",
        )],
        # The `internal_only_*` things are covered by the stuff that uses them.
    ),
    parent_layer = ":validates-dnf-build-appliance",
    rule_type = "test_genrule_layer",
    user = "root",
    visibility = ["//antlir/compiler/..."],
)

image.genrule_layer(
    name = "genrule-layer-with-mounts",
    antlir_rule = "user-internal",
    cmd = [
        "/bin/sh",
        "-c",
        "/bin/mount > /GENRULE_LAYER_MOUNTS",
    ],
    parent_layer = ":test-layer-with-mounts",
    rule_type = "test_genrule_layer",
    user = "root",
    visibility = ["//antlir/compiler/..."],
)

# Test that we can properly access to the bind mounted repo
# from a genrule layer
image.genrule_layer(
    name = "genrule-layer-validate-bind-repo-ro",
    antlir_rule = "user-internal",
    bind_repo_ro = True,
    cmd = [
        "/bin/sh",
        "-c",
        "test -e $(location :shadow_me)",
    ],
    parent_layer = ":test-layer",
    rule_type = "test_genrule_layer",
)

image.layer(
    name = "test-layer-no-antlir-dir",
    features = [feature.remove("/__antlir__")],
    parent_layer = ":test-layer",
)

# Test that `dnf` just works in a non-BA parent with `attach_antlir_dir`
image.genrule_layer(
    name = "genrule-layer-validate-attach-antlir-dir",
    antlir_rule = "user-internal",
    cmd = [
        "dnf",
        "install",
        "-y",
        "rpm-test-carrot",
    ],
    container_opts = image.opts(
        attach_antlir_dir = True,
        shadow_proxied_binaries = True,
    ),
    parent_layer = ":test-layer-no-antlir-dir",
    rule_type = "test_genrule_layer",
    user = "root",
)

# The next two targets exercise:
#  - all forms of constructing a directory creation request
#  - specifying `stat` options, like user:group & mode

feature.new(
    name = "feature_dirs",
    features = [
        feature.ensure_subdirs_exist("/", "foo/bar"),
        feature.ensure_subdirs_exist("/foo/bar", "baz"),
        feature.ensure_dirs_exist(
            "/alpha",
            mode = "a+rx",
        ),
        feature.ensure_subdirs_exist(
            "/alpha",
            "beta",
            mode = "a+rwx",
        ),
    ],
    visibility = ["//antlir/compiler/..."],
)

feature.new(
    name = "feature_bad_dir_mode_mismatch",
    features = [
        feature.ensure_dirs_exist(
            "/alpha",
            mode = "a+rwx",
        ),
    ],
    visibility = ["//antlir/compiler/..."],
)

# The permissions are bad, so any attempt to add this into a layer will fail.
feature.new(
    name = "feature_bad_dir",
    features = [
        feature.ensure_subdirs_exist(
            "/foo",
            "borf/beep",
            group = "ggg",
            mode = "a+rwx",
            user = "uuu",
        ),
        # /etc/passwd and /etc/group are needed
        # because the {User,Group}Items require them
        # explicitly.
        feature.ensure_subdirs_exist("/", "etc"),
        feature.install(
            ":shadow_me",
            "/etc/passwd",
        ),
        feature.install(
            ":shadow_me",
            "/etc/group",
        ),
        feature.user_add(
            home_dir = "/foo/bar",
            primary_group = "ggg",
            shell = "/foo/bar/installed/print-ok",
            username = "uuu",
        ),
        feature.group_add(
            groupname = "ggg",
        ),
    ],
    visibility = ["//antlir/compiler/..."],
)

# Exercises:
#   - all forms of specifying symlinks
feature.new(
    name = "feature_symlinks",
    features = [
        feature.install(":hello_world.tar", "/foo/hello_world.tar"),
        feature.ensure_dir_symlink("/foo/bar", "/foo/fighter"),
        feature.ensure_dir_symlink("/foo/bar", "/foo/face"),
        feature.ensure_dir_symlink("/foo/bar", "/foo/bar/baz/"),  # / -> "bar" basename
        feature.ensure_file_symlink("/foo/hello_world.tar", "/foo/symlink_to_hello_world.tar"),
        # /dev/null is allowlisted to be a dangling symlink
        feature.ensure_file_symlink("/dev/null", "/foo/symlink_to_dev_null"),
    ],
    visibility = ["//antlir/compiler/..."],
)

# These RPMs were generated as follows:
#
#  for ((i=1; i<=3; ++i)); do
#    /usr/bin/rpmbuild -bb rpm-test-cheese-$i-1.spec
#    mv ~/rpmbuild/RPMS/noarch/rpm-test-cheese-$i-1.noarch.rpm \
#      rpm-test-cheese-$i-1.rpm
#  done
#  # Optionally, clean up the mess:
#  rm -rf ~/rpmbuild
#
# You can build the RPMs with `rpmbuild` or update the spec section
# in antlir/rpm/tests/temp_repos.py to build with this spec.
#
defs.sign_rpm_test_file(
    name = "rpm-test-cheese-1-1.rpm",
    filename = "rpm-test-cheese-1-1.x86_64.rpm",
)

defs.sign_rpm_test_file(
    name = "rpm-test-cheese-2-1.rpm",
    filename = "rpm-test-cheese-2-1.x86_64.rpm",
)

defs.sign_rpm_test_file(
    name = "rpm-test-cheese-3-1.rpm",
    filename = "rpm-test-cheese-3-1.x86_64.rpm",
)

# See docblock for ":layer-with-only-one-locally-installed-rpm" for why
# we need this.
image.layer(
    name = "layer-with-non-default-snapshot-no-rpms",
    features = test_rpms.remove([
        "rpm-test-cake",
        "rpm-test-cheese",
    ]),
    parent_layer = ":layer-with-non-default-snapshot-rpm",
    visibility = ["//antlir/compiler/items/..."],
)

# Our repo snapshotting code forces GPG checks on all RPMs installed.
# For rpm-test-cheese-*.rpm, which are local RPM files and not signed, we need
# to import the key for installation. When the RPM is not part of a repo, you
# would do that with `rpm --import <gpg key>`. However it's a bit complicated
# to do that from these test layers because they do not have the `rpm` RPM.
#
# To work around that we have another layer install rpm-test-cheese, which
# is already a part of //antlir/rpm:non-default-repo-snapshot-for-tests so it
# is signed and has its gpgkey set up in the yum/dnf config. The key is imported
# on installation. Then we sign the local files using those same keys (from
# //antlir/rpm/tests/gpg_test_keypair:gpg-test-keypair) and install the signed
# local files into the layer.
#
image.layer(
    name = "layer-with-only-one-locally-installed-rpm",
    features = test_rpms.add([
        # A drive-by test that `image.source` syntax works in "rpms".  This
        # could have been just a target path, as in `feature_tar_and_rpms`.
        image.source(":rpm-test-cheese-2-1.rpm"),
    ]),
    flavor = "antlir_test",
    parent_layer = ":layer-with-non-default-snapshot-no-rpms",
    visibility = ["//antlir/compiler/..."],
)

# Checks installing from a non-default snapshot
image.layer(
    name = "layer-with-non-default-snapshot-rpm",
    # Installing rpm-test-cheese here so the gpg keys get imported for the
    # local RPM install in ":layer-with-only-one-locally-installed-rpm".
    features = [test_rpms.add([
        "rpm-test-cake",
        "rpm-test-cheese",
    ])],
    flavor = "antlir_test",
    flavor_config_override = image.opts(
        rpm_repo_snapshot = "//antlir/rpm:non-default-repo-snapshot-for-tests",
    ),
    visibility = ["//antlir/compiler/..."],
)

# Exercises:
#  - all forms of specifying a tarball to extract
#  - installing and removing RPMs
# NB: Unlike `feature_install_files`, this **implicitly** depends on some
# feature to provide directories `/foo/borf/`.
feature.new(
    name = "feature_tar_and_rpms",
    features = [
        test_rpms.add(
            [
                # Local RPM file that is not (yet) installed or published
                ":rpm-test-cheese-2-1.rpm",
                "rpm-test-mice",
            ],
        ),
        feature.rpms_remove_if_exists(
            [
                "rpm-test-carrot",  # Installed by `parent_layer`
                # No-op in `child/layer` -- it was never installed
                "rpm-test-milk",
            ],
            flavors = ["antlir_test"],
        ),
        feature.tarball(
            image.source(
                # Check hash validation
                ":hello_world.tar",
                content_hash = hello_tar_hash,
            ),
            "foo/borf",
        ),
        feature.tarball(
            ":hello_world.tar",  # Hash validation is optional
            "foo",
        ),
    ],
    flavors = ["antlir_test"],
    # `rpm-test-*` RPMs may not be mentioned by all of the allowed version
    # sets, so just emit this feature for one.
    visibility = ["//antlir/compiler/..."],
)

feature.new(
    name = "feature_mount",
    features = [
        feature.host_dir_mount("/etc", "/host_etc"),
        feature.host_file_mount("/dev/null", "/dev_null"),
        feature.layer_mount(":hello_world_base", "/meownt"),
    ],
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "first-layer-for-nested-layer-mount",
    features = [
        feature.layer_mount(
            ":create_ops-from-layer",
            "/sendstream_meownt",
        ),
    ],
    parent_layer = ":test-layer",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "test-layer-with-mounts",
    features = [
        ":feature_mount",
        feature.layer_mount(
            ":first-layer-for-nested-layer-mount",
            "/layer_mount",
        ),
        ":feature_install_files",
    ],
    parent_layer = ":test-layer",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "small-layer-with-mounts",
    features = [
        ":feature_mount",
    ],
    flavor = "antlir_test",
    visibility = ["//antlir/compiler/items/..."],
)

defs.python_binary(
    name = "print-arg",
    srcs = ["print_arg.py"],
    main_module = "antlir.compiler.test_images.print_arg",
)

defs.python_binary(
    name = "print-ok",
    srcs = ["print_ok.py"],
    main_module = "antlir.compiler.test_images.print_ok",
)

defs.python_binary(
    name = "print-ok-again",
    srcs = ["print_ok_again.py"],
    main_module = "antlir.compiler.test_images.print_ok_again",
)

defs.buck_genrule(
    name = "dir-print-ok",
    out = "dir",
    bash = '''
    set -ue -o pipefail -o noclobber
    mkdir -p "$OUT/subdir"
    cp $(location {maybe_wrapped_ok}) "$OUT"/subdir/print-ok
    cp $(location {maybe_wrapped_ok_again}) "$OUT"/subdir/print-ok-again
    echo meow > "$OUT"/kitteh
    '''.format(
        # A @mode/dev PAR will break if we copy it into another directory,
        # since it relies on the linktree being its sibling.  Using this
        # wrapper prevents that.
        maybe_wrapped_ok = maybe_wrap_executable_target(
            runs_in_build_steps_causes_slow_rebuilds = False,
            target = ":print-ok",
            visibility = [],
            wrap_suffix = "test-wrap",
        )[1],
        maybe_wrapped_ok_again = maybe_wrap_executable_target(
            runs_in_build_steps_causes_slow_rebuilds = False,
            target = ":print-ok-again",
            visibility = [],
            wrap_suffix = "test-wrap",
        )[1],
    ),
    cacheable = False,  # The wrapper makes our output non-cacheable.
    # As of now, I'm not sure whether this tests anything until we add
    # support for directories to `install_buck_runnable`.  The original
    # comment was: "This is required to be able to `buck run` anything out
    # of the directory."
    executable = True,
)

defs.buck_genrule(
    name = "dir-with-script",
    out = "dir",
    bash = '''
    set -ue -o pipefail -o noclobber
    mkdir -p "$OUT/subdir"
    echo '#!/bin/sh\necho Hello' > "$OUT"/subdir/exe.sh
    chmod u+x "$OUT"/subdir/exe.sh
    echo Hello > "$OUT"/data.txt
    chmod =444 "$OUT"/data.txt
    ''',
)

# Exercises `install_{data,buck_runnable}, taking care to cover all
# reasonable combinations of:
#   - `buck run`nable targets vs non-executable targets
#   - Non-`buck run`nable files having & lacking executable bits.
#   - Installing a single file from a target that outputs a directory
#   - Installing an entire target that outputs a directory
#
# Be sure to add any new installed executables to `test-execute-installed`.
#
# NB: Unlike `feature_tar_and_rpms`, this **explicitly** depends on
# `feature_dirs` to provide directories `/foo/bar/`.  This exercises the
# case where the same feature is pulled in via several dependency paths.
feature.new(
    name = "feature_install_files",
    features = [
        ":feature_dirs",  # We use /foo/bar for a couple of installs.
        feature.ensure_subdirs_exist("/foo/bar", "installed"),  # Most things will go here.
        feature.install(":hello_world.tar", "/foo/bar/hello_world.tar"),
        feature.install(
            ":hello_world.tar",
            "/foo/bar/hello_world_again.tar",
        ),
        feature.install(
            image.source(
                ":dir-print-ok",
                path = "kitteh",
            ),
            "/foo/bar/installed/yittal-kitteh",
            wrap_as_buck_runnable = False,
        ),
        feature.install_buck_runnable(":print-ok", "/foo/bar/installed/print-ok"),
        feature.install_buck_runnable(
            image.source(
                ":dir-print-ok",
                path = "subdir/print-ok",
            ),
            "/foo/bar/installed/print-ok-too",
        ),
        feature.install_buck_runnable(
            image.source(
                ":dir-print-ok",
                path = "subdir/print-ok-again",
            ),
            "/foo/bar/installed/print-ok-again",
        ),
        # Test installing a directory.  Also test a non-`buck run`nable
        # executable both as part of a directory, and solo (these are
        # different code paths)
        feature.install(
            ":dir-with-script",
            "/foo/bar/installed/script-dir",
            wrap_as_buck_runnable = False,
        ),
        feature.install(
            image.source(
                ":dir-with-script",
                path = "subdir/exe.sh",
            ),
            "/foo/bar/installed/solo-exe.sh",
        ),
        feature.install_buck_runnable(
            ":print-arg",
            "/foo/bar/installed/print-arg",
        ),
    ],
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "installed-executables",
    features = [":feature_install_files"],
    parent_layer = ":test-layer",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "installed-files",
    features = [":feature_install_files"],
    flavor = "antlir_test",
    visibility = ["//antlir/compiler/..."],
)

# Exercises `image.clone`, covering the 3 supported trailings / patterns.
feature.new(
    name = "feature_clone",
    features = [
        feature.clone(":installed-files", "/foo/bar", "/"),
        feature.clone(":installed-files", "/foo/bar", "/bar3"),
        feature.ensure_subdirs_exist("/", "bar2"),
        feature.clone(":installed-files", "/foo/bar/", "/bar2/"),
    ],
)

image.layer(
    name = "cloned-files",
    features = [
        ":feature_clone",
    ],
    flavor = "antlir_test",
    visibility = ["//antlir/compiler/..."],
)

# Omnibus feature for test-compiler and test-image-feature.  It currently cannot
# be materialized as an `image.layer` because of `feature_bad_dir` and
# `feature_bad_dir_mode_mismatch`.
#
# Exercises:
#  - all forms of specifying target outputs to copy
#  - copying other targets' outputs into the image, including stat options
#  - making directories & symlinks
#  - extracting tarballs
#  - composition of subsidiary features
#  - removing paths (NB: much of this logic is at build-time, so this is an
#    incomplete test, see also `test-items` and `test-add-remove-conflict`)
#    something installed by an RPM, add T_REMOVE_PATHS to sample_items, etc
feature.new(
    name = "feature_kitchen_sink",
    features = [
        feature.remove("/path/to/remove"),
        feature.remove(
            "/path/to/remove",
            must_exist = False,
        ),
        feature.remove("/another/path/to/remove"),
        ":feature_bad_dir",
        ":feature_bad_dir_mode_mismatch",
        ":feature_dirs",
        ":feature_install_files",
        ":feature_mount",
        ":feature_tar_and_rpms",
        ":feature_symlinks",
    ],
    # We can only build for "no version set" because our child
    # `feature_tar_and_rpms` provides no other version sets.
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "kitchen_sink_layer_parent",
    features = [
        feature.ensure_dirs_exist(
            "/path/to/remove",
        ),
    ],
    flavor = "antlir_test",
)

image.layer(
    name = "kitchen_sink_layer",
    features = [
        ":feature_dirs",
        ":feature_install_files",
        ":feature_mount",
        ":feature_tar_and_rpms",
        feature.ensure_subdirs_exist("/foo", "borf"),  # for :feature_tar
        ":feature_symlinks",
        ":feature_usergroup",
        ":feature_clone",
        feature.remove("/path/to/remove"),
        feature.remove(
            "/non_existent_path/to/remove",
            must_exist = False,
        ),
    ],
    flavor = "antlir_test",
    parent_layer = ":kitchen_sink_layer_parent",
)

##
## The next few targets test the interaction of adding regular,
## dependency-sorted items with `remove_paths`.  This
## `test-add-remove-conflict` shows that:
##     - Removing from a parent layer is OK (`child` layer).
##     - Removing something added in the same layer is not (`both` feature).
##

feature.new(
    name = "feature_addremove_conflict_add",
    features = [
        feature.ensure_subdirs_exist("/", "a/b"),
    ],
    visibility = ["//antlir/..."],
)

feature.new(
    name = "feature_addremove_conflict_remove",
    features = [
        feature.remove("/a"),
    ],
    visibility = ["//antlir/..."],
)

feature.new(
    name = "feature_remove_nonexistent",
    features = [
        feature.remove(
            "/does/not/exist",
            must_exist = False,
        ),
    ],
)

# This feature is added to both layers, which validates that `image.layer`
# can handle an idempotent feature being installed twice.  The layers do not
# directly repeat `feature_remove_nonexistent` because that would not
# reproduce a now-fixed bug with repeated features.
feature.new(
    name = "feature_repeated_removal",
    features = [":feature_remove_nonexistent"],
)

# `test-add-remove-conflict` compiles this feature to produce a failure
feature.new(
    name = "feature_addremove_conflict_both",
    features = [
        ":feature_addremove_conflict_add",
        ":feature_addremove_conflict_remove",
    ],
    visibility = ["//antlir/..."],
)

image.layer(
    name = "addremove_conflict_parent",
    features = [
        ":feature_addremove_conflict_add",
        ":feature_repeated_removal",
    ],
    flavor = "antlir_test",
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "addremove_conflict_child",
    features = [
        ":feature_addremove_conflict_remove",
        ":feature_repeated_removal",
    ],
    parent_layer = ":addremove_conflict_parent",
    visibility = ["//antlir/compiler/..."],
)

##
## The following layers are the basis of an integration test for
## `image.layer`.  Unlike the `feature`s above, they must be actually
## be buildable, not just amenable to dependency analysis -- for this
## reason, we cannot e.g. depend on the broken `:feature_bad_dir` target.
##

image.layer(
    name = "hello_world_base",
    features = [
        feature.tarball(
            image.source(
                content_hash = hello_tar_hash,
                source = ":hello_world.tar",
            ),
            "//",  # Double-slash tests path normalization
        ),
    ],
    flavor = "antlir_test",
    # This tells our hypothetical runtime that in order to mount this layer,
    # it must invoke the "chicken" mount source (which might just download
    # and unpack a serialized versions of this layer).
    mount_config = {"runtime_source": {"type": "chicken"}},
    visibility = ["//antlir/..."],
)

defs.buck_genrule(
    name = "turkey_mount_config",
    out = "ignored",
    bash = '''echo '{"runtime_source": {"type": "turkey"}}' > "$OUT"''',
)

image.layer(
    name = "parent_layer",
    features = [
        ":feature_dirs",
        ":feature_symlinks",
        # Test nested lists of features (in lieu of concatenation).
        [
            [
                feature.install(":hello_world.tar", "/foo/bar/even_more_hello_world.tar"),
            ],
        ],
        feature.install(
            ":hello_world.tar",
            # This directory comes from `rpm-test-carrot`.  This tests
            # that our dependency engine sees RPM contents as a
            # "provides".
            "/rpm_test/hello_world.tar",
        ),
        # NB: `host_{dir,file}_mount` is exercised in test-layer-with-mounts
        feature.layer_mount(":hello_world_base", "/mounted_hello"),
    ] + test_rpms.add(["rpm-test-carrot"]),
    # Unlike `hello_world_base`, this checks dynamically generated mount configs
    mount_config = ":turkey_mount_config",
    parent_layer = ":hello_world_base",
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "parent_layer_with_cheese",
    features = test_rpms.add(["rpm-test-cheese"]),
    flavor = "antlir_test",
    flavor_config_override = image.opts(
        rpm_repo_snapshot = "//antlir/rpm:non-default-repo-snapshot-for-tests",
    ),
    parent_layer = ":parent_layer",
)

image.layer(
    name = "child/layer",  # Checks that `/` is allowed in layer names
    features = [
        ":feature_tar_and_rpms",
        feature.ensure_subdirs_exist("/foo", "borf"),  # for :feature_tar
        feature.ensure_subdirs_exist("/foo", "extracted_hello"),
        feature.ensure_subdirs_exist(
            "/foo",
            "more_extracted_hello",
            mode = 0o711,
        ),
        feature.tarball(":hello_world.tar", "/foo/extracted_hello"),
        feature.tarball(":hello_world.tar", "/foo/more_extracted_hello"),
    ],
    # Using `parent_layer_with_cheese` because it installs an older
    # `rpm-test-cheese` which sets up the GPG keys for the local RPM install
    # done with `feature_tar_and_rpms`.
    parent_layer = ":parent_layer_with_cheese",
    visibility = ["//antlir/..."],
)

package.new(
    name = "child/layer.sendstream",
    format = "sendstream",
    layer = ":child/layer",
)

package.new(
    name = "child/layer.sendstream.v2",
    format = "sendstream.v2",
    layer = ":child/layer",
)

# This will install /rpm_test/cheese2.txt.
image.layer(
    name = "base_cheese_layer",
    features = test_rpms.add([":rpm-test-cheese-2-1.rpm"]),
    parent_layer = ":layer-with-non-default-snapshot-no-rpms",
    visibility = ["//antlir/compiler/..."],
)

# This downgrades and installs /rpm_test/cheese1.txt.
image.layer(
    name = "older_cheese_layer",
    features = test_rpms.add([":rpm-test-cheese-1-1.rpm"]),
    parent_layer = ":base_cheese_layer",
    visibility = ["//antlir/compiler/..."],
)

# This upgrades and installs /rpm_test/cheese3.txt.
image.layer(
    name = "newer_cheese_layer",
    features = test_rpms.add([":rpm-test-cheese-3-1.rpm"]),
    parent_layer = ":base_cheese_layer",
    visibility = ["//antlir/compiler/..."],
)

# This re-installs the same version of /rpm_test/cheese2.txt.
image.layer(
    name = "reinstall_cheese_layer",
    features = test_rpms.add([":rpm-test-cheese-2-1.rpm"]),
    parent_layer = ":base_cheese_layer",
    visibility = ["//antlir/compiler/..."],
)

##
## These few rules help test `image.layer_from_package`.
##

defs.python_binary(
    name = "save-demo-sendstream",
    srcs = ["save_demo_sendstream.py"],
    main_module = "antlir.compiler.test_images.save_demo_sendstream",
    deps = ["//antlir/btrfs_diff:testlib_demo_sendstreams"],
)

# Future: it'd be neat to add `mutate_ops`, but that requires some wrangling
# with btrfs to get it to find the parent subvolume.
op = "create_ops"

defs.buck_genrule(
    name = op + "-original.sendstream",
    out = op + "-original.sendstream",
    bash = "$(exe :save-demo-sendstream) \"$OUT\" " + op,
)

image.layer_from_package(
    name = op,
    flavor = "antlir_test",
    format = "sendstream",
    source = ":" + op + "-original.sendstream",
    visibility = ["//antlir/..."],
)

package.new(
    name = op + ".sendstream",
    format = "sendstream",
    layer = ":" + op,
    subvol_name = op,
    visibility = ["//antlir/..."],
)

##
## Check other forms of `layer_from_package`, also verified in `test-image-layer`
##

defs.buck_genrule(
    name = "create_ops-dir",
    out = op + "create_ops-dir",
    bash = """\
    mkdir "$OUT"
    $(exe :save-demo-sendstream) "$OUT"/sendstream create_ops
    """,
)

image.layer_from_package(
    name = "create_ops-from-dir",
    flavor = "antlir_test",
    format = "sendstream",
    source = image.source(
        ":create_ops-dir",
        path = "sendstream",
    ),
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "create_ops-layer",
    features = [
        feature.install(":create_ops-original.sendstream", "/sendstream"),
    ],
    flavor = "antlir_test",
)

image.layer_from_package(
    name = "create_ops-from-layer",
    flavor = "antlir_test",
    format = "sendstream",
    source = image.source(
        layer = ":create_ops-layer",
        path = "sendstream",
    ),
    visibility = ["//antlir/..."],
)

image.layer_alias(
    name = "create_ops-alias",
    layer = ":create_ops",
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "empty",
    flavor = "antlir_test",
)  # Just ensure this builds, not checking contents :)

package.new(
    name = "create_ops.tar.gz",
    format = "tar.gz",
    layer = ":create_ops",
    visibility = ["//antlir/..."],
)

package.new(
    name = "create_ops.cpio.gz",
    format = "cpio.gz",
    layer = ":create_ops",
    visibility = ["//antlir/..."],
)

package.new(
    name = "create_ops_squashfs",
    format = "squashfs",
    layer = ":create_ops",
    visibility = ["//antlir/..."],
)

# This is referenced by many images in this project via "flavor_to_config"
add_rpm_repo_snapshots_layer(
    name = "build_appliance_testing",
    dnf_snapshot = "//antlir/rpm:repo-snapshot-for-tests" if "dnf" in flavor_helpers.get_rpm_installers_supported() else None,
    # HERE BE DRAGONS: We need this BA to have flavor `antlir_test`, since
    # its default RPM snapshots are specific to these tests. At the same
    # time, it has to derive from a real, working, production BA, whose
    # flavor is surely different.
    flavor = "antlir_test",
    # We have to use "centos7" as a build appliance as long as we have to support yum
    flavor_config_override = image.opts(
        # We must set `build_appliance` since the default would cause
        # a circular dependency -- this very target **IS** the flavor's BA.
        build_appliance = flavor_helpers.get_build_appliance("centos7"),
        # `parent_layer`'s flavor does not match ours, and this is OK here.
        unsafe_bypass_flavor_check = True,
    ),
    make_caches_for_other_snapshot_installers = [
        ("//antlir/rpm:non-default-repo-snapshot-for-tests", installer)
        for installer in flavor_helpers.get_rpm_installers_supported()
    ] + [
        ("//antlir/rpm:rpm-replay-repo-snapshot-for-tests", installer)
        for installer in flavor_helpers.get_rpm_installers_supported()
    ],
    parent_layer = flavor_helpers.get_build_appliance("centos7"),
    visibility = [
        "//antlir/...",
        "//hermetic_infra/hermit/integration/...",
        "//metalos/os/whatchanged/...",
        "//tupperware/cm/antlir/tests/...",
    ],
    yum_snapshot = "//antlir/rpm:repo-snapshot-for-tests" if "yum" in flavor_helpers.get_rpm_installers_supported() else None,
)

image.layer(
    name = "groups-added",
    features = [
        feature.group_add("foo"),
        feature.group_add("leet", 1337),
    ],
    parent_layer = flavor_helpers.get_build_appliance(),
    visibility = ["//antlir/compiler/..."],
)

# This layer requires a parent ancestry that has a
# /etc/passwd and /etc/group because the
# "newuser" user/group is likely not going to exist
# on a host.
image.layer(
    name = "users-added",
    features = [
        feature.group_add("newuser"),
        feature.user_add(
            "newuser",
            home_dir = "/home/newuser",
            primary_group = "newuser",
        ),
        feature.install(
            ":shadow_me",
            "/shadow_me_chown",
            group = "newuser",
            user = "newuser",
        ),
    ],
    parent_layer = flavor_helpers.get_build_appliance(),
    visibility = ["//antlir/compiler/..."],
)

# This layer will build with no issue, because all it does is assert that the
# users/groups added in the ":users-added" layer exist in /etc/{passwd,group}
image.layer(
    name = "users-required",
    features = [
        feature.requires(
            groups = ["newuser"],
            users = ["newuser"],
        ),
    ],
    parent_layer = ":users-added",
    visibility = ["//antlir/compiler/..."],
)

image.layer(
    name = "vfat-test.layer",
    features = [
        feature.ensure_dirs_exist("/EFI/BOOT"),
        feature.install(
            ":shadow_me",
            "/EFI/BOOT/shadow_me",
            mode = "a+rx",
        ),
    ],
    flavor = "antlir_test",
    visibility = ["//antlir/..."],
)

package.new(
    name = "vfat-test.vfat",
    format = "vfat",
    layer = ":vfat-test.layer",
    loopback_opts = image.opts(
        label = "cats",
        size_mb = 32,
    ),
    visibility = ["//antlir/..."],
)

package.new(
    name = "create_ops_ext3",
    format = "ext3",
    layer = ":create_ops",
    loopback_opts = image.opts(
        label = "cats",
        size_mb = 256,
    ),
    visibility = ["//antlir/..."],
)

btrfs.new(
    name = "create_ops_btrfs",
    opts = btrfs.opts.new(
        subvols = {"/volume": btrfs.opts.subvol.new(layer = ":create_ops")},
    ),
    visibility = ["//antlir/..."],
)

btrfs.new(
    name = "create_ops_free_mb_btrfs",
    opts = btrfs.opts.new(
        free_mb = 1024,
        subvols = {"/volume": btrfs.opts.subvol.new(layer = ":create_ops")},
    ),
    visibility = ["//antlir/..."],
)

image.layer(
    name = "empty.layer",
    features = [
        feature.ensure_dirs_exist("/PLACEHOLDER"),
    ],
    flavor = "centos8",
    visibility = ["//antlir/..."],
)

package.new(
    name = "empty_bios_boot",
    format = "ext3",
    layer = ":empty.layer",
    loopback_opts = image.opts(
        label = "cats",
        size_mb = 1,
    ),
    visibility = ["//antlir/..."],
)

image.gpt(
    name = "gpt_test",
    table = [
        image.gpt_partition(
            is_esp = True,
            package = ":vfat-test.vfat",
        ),
        image.gpt_partition(
            name = "create_ops_ext3",
            package = ":create_ops_ext3",
        ),
        image.gpt_partition(
            is_bios_boot = True,
            package = ":empty_bios_boot",
        ),
    ],
    visibility = ["//antlir/..."],
)

feature.new(
    name = "feature_usergroup",
    features = [
        feature.ensure_dirs_exist("/etc"),
        # Importantly for this test, /etc/passwd must be installed first. Prior
        # to the fix for this, /etc/passwd would then also attempt to bind mount
        # /etc/group into the build appliance chroot, which made it impossible
        # to install an actual /etc/group
        feature.install("passwd", "/etc/passwd"),
        feature.install("group", "/etc/group"),
        feature.ensure_dirs_exist("/sbin"),
        feature.install("//antlir:empty", SHELL_NOLOGIN),
        feature.group_add("example"),
        feature.user_add("example", "example", "/", SHELL_NOLOGIN),
    ],
)

image.layer(
    name = "users-groups-from-scratch",
    features = [
        ":feature_usergroup",
    ],
    flavor = "antlir_test",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "meta_store_layer",
    features = [
        feature.meta_store(
            "key2",
            "value2",
            require_keys = ["key1"],
        ),
        feature.meta_store("key1", "value1"),
    ],
    flavor = "antlir_test",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "remove_meta_store_layer",
    features = [
        feature.remove_meta_store(
            "key2",
        ),
    ],
    parent_layer = ":meta_store_layer",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "debian-test-layer",
    flavor = "ubuntu_jammy",
    # Temporary, will remove when build appliance is not built directly on top
    # of the cached base image
    flavor_config_override = image.opts(
        build_appliance = "//antlir/debian/base_images/facebook:antlir.image.ubuntu.jammy.build_appliance",
    ),
    parent_layer = "//antlir/debian/base_images/facebook:antlir.image.ubuntu.jammy.base",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "install_packages",
    features = [
        feature.apt_install([
            "zsh",
            "cowsay",
        ]),
    ],
    parent_layer = ":debian-test-layer",
    visibility = ["//antlir/..."],
)

image.layer(
    name = "remove_package",
    features = [
        feature.apt_remove(["zsh"]),
    ],
    parent_layer = ":install_packages",
    visibility = ["//antlir/..."],
)
