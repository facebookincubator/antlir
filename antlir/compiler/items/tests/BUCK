# @noautodeps

load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:image_python_unittest.bzl", "image_python_unittest")
load("//antlir/bzl:layer_resource.bzl", "layer_resource")
load("//antlir/bzl:oss_shim.bzl", "python_library", "python_unittest", "third_party")
load("//antlir/bzl/image/feature:defs.bzl", "feature")
load("//antlir/compiler:defs.bzl", "TEST_IMAGE_PREFIX")

python_unittest(
    name = "test-clone",
    srcs = ["test_clone.py"],
    needed_coverage = [(100, "//antlir/compiler/items:clone")],
    resources = {
        layer_resource(TEST_IMAGE_PREFIX + "parent_layer"): "src-layer",
        layer_resource(TEST_IMAGE_PREFIX + "create_ops"): "create_ops",
    },
    deps = [
        ":common_testlib",
        "//antlir:common",
        "//antlir:find_built_subvol",
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
        "//antlir/compiler/items:clone",
    ],
)

# A helper for tests, so lacks its own tests.
python_library(
    name = "common_testlib",
    srcs = ["common.py"],
    deps = [
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
        "//antlir:testlib_subvol_helpers",
        "//antlir/compiler:requires_provides",
        "//antlir/compiler/items:common",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_unittest(
    name = "test-group",
    srcs = ["test_group.py"],
    needed_coverage = [(100, "//antlir/compiler/items:group")],
    deps = [
        ":common_testlib",
        "//antlir/compiler/items:group",
    ],
)

python_unittest(
    name = "group-integration-test",
    srcs = ["group_integration_test.py"],
    resources = {
        layer_resource(
            flavor_helpers.default_flavor_build_appliance,
        ): "base-layer",
        layer_resource(
            TEST_IMAGE_PREFIX + "groups-added",
        ): "groups-added",
    },
    deps = [
        ":common_testlib",
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/compiler/items:group",
    ],
)

python_unittest(
    name = "test-phases-provide",
    srcs = ["test_phases_provide.py"],
    needed_coverage = [(100, "//antlir/compiler/items:phases_provide")],
    deps = [
        ":common_testlib",
        "//antlir/compiler/items:phases_provide",
    ],
)

python_library(
    name = "rpm_action_base_testlib",
    srcs = ["rpm_action_base.py"],
    deps = [
        ":common_testlib",
        "//antlir:bzl_const",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/compiler/items:rpm_action",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
    ],
)

image.layer(
    name = "test_rpm_action_layer",
    parent_layer = TEST_IMAGE_PREFIX + "build_appliance_testing",
    features = [
        image.layer_mount(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
            "/test-build-appliance",
        ),
        image.layer_mount(
            TEST_IMAGE_PREFIX + "layer-with-only-one-locally-installed-rpm",
            "/test-with-one-local-rpm",
        ),
        image.layer_mount(
            TEST_IMAGE_PREFIX + "layer-with-non-default-snapshot-no-rpms",
            "/test-with-no-rpm",
        ),
        feature.install(
            TEST_IMAGE_PREFIX + "rpm-test-cheese-2-1.rpm",
            "/rpm-test-cheese-2-1.rpm",
        ),
        feature.install(
            TEST_IMAGE_PREFIX + "rpm-test-cheese-1-1.rpm",
            "/rpm-test-cheese-1-1.rpm",
        ),
    ],
)

image_python_unittest(
    name = "test-rpm-action",
    srcs = ["test_rpm_action.py"],
    container_opts = {
        "serve_rpm_snapshots": ["//antlir/rpm:repo-snapshot-for-tests"],
        "shadow_proxied_binaries": False,
    },
    layer = ":test_rpm_action_layer",
    needed_coverage = [(100, "//antlir/compiler/items:rpm_action")],
    run_as_user = "root",
    deps = [
        ":rpm_action_base_testlib",
        "//antlir:bzl_const",
        "//antlir:find_built_subvol",
        "//antlir:testlib_layer_resource",
    ],
)

python_unittest(
    name = "test-genrule-layer",
    srcs = ["test_genrule_layer.py"],
    needed_coverage = [(100, "//antlir/compiler/items:genrule_layer")],
    resources = {
        layer_resource(
            # We need something with the test RPM snapshot, with a working
            # `sh`, `touch`, and `mkdir`, and `dnf`.  The former 3 could be
            # provided through a busybox binary, but `dnf` pretty much
            # presupposes a full OS, so use the test BA for now.
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "genrule-layer-base",
        layer_resource(
            # Must have a `busybox` binary as `/bin/sh`.
            TEST_IMAGE_PREFIX + "validates-dnf-build-appliance",
        ): "genrule-layer-busybox-base",
    },
    deps = [
        ":common_testlib",
        "//antlir:common",
        "//antlir:find_built_subvol",
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
        "//antlir/compiler/items:make_subvol",
        "//antlir/rpm:find_snapshot",
    ],
)

python_unittest(
    name = "test-ensure-dirs-exist",
    srcs = ["test_ensure_dirs_exist.py"],
    needed_coverage = [(100, "//antlir/compiler/items:ensure_dirs_exist")],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "test-build-appliance",
    },
    deps = [
        ":common_testlib",
        "//antlir:common",
        "//antlir:find_built_subvol",
        "//antlir:subvol_utils",
    ],
)

python_unittest(
    name = "test-stat-options",
    srcs = ["test_stat_options.py"],
    deps = ["//antlir/compiler/items:stat_options"],
)

python_unittest(
    name = "test-symlink",
    srcs = [
        "test_symlink.py",
    ],
    needed_coverage = [
        (100, "//antlir/compiler/items:symlink"),
    ],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "test-build-appliance",
    },
    deps = [
        ":common_testlib",
        "//antlir/compiler/items:install_file",
        "//antlir/compiler/items:symlink",
    ],
)

python_unittest(
    name = "test-make-subvol",
    srcs = ["test_make_subvol.py"],
    needed_coverage = [(100, "//antlir/compiler/items:make_subvol")],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "test-build-appliance",
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "create_ops.sendstream",
        TEST_IMAGE_PREFIX + "create_ops.tar.gz": "create_ops.tar.gz",
    },
    deps = [
        ":common_testlib",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
        "//antlir/compiler/items:ensure_dirs_exist",
        "//antlir/compiler/items:make_subvol",
    ],
)

python_unittest(
    name = "test-items",
    srcs = [
        "test_common.py",
        "test_install_file.py",
        "test_mount.py",
        "test_remove_path.py",
        "test_tarball.py",
    ],
    needed_coverage = [
        (100, "//antlir/compiler/items:common"),
        (100, "//antlir/compiler/items:install_file"),
        (100, "//antlir/compiler/items:remove_path"),
        (100, "//antlir/compiler/items:mount_utils"),
        (100, "//antlir/compiler/items:mount"),
        (100, "//antlir/compiler/items:tarball"),
    ],
    resources = {
        TEST_IMAGE_PREFIX + "layer-with-only-one-locally-installed-rpm": "test-with-one-local-rpm",
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "test-build-appliance",
        layer_resource(
            TEST_IMAGE_PREFIX + "small-layer-with-mounts",
        ): "small-layer-with-mounts",
        layer_resource(
            TEST_IMAGE_PREFIX + "hello_world_base",
        ): "test-layer-without-mounts",
        TEST_IMAGE_PREFIX + "small-layer-with-mounts.btrfs": "small-layer-with-mounts.btrfs",
    },
    deps = [
        ":common_testlib",
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
        "//antlir/compiler/items:ensure_dirs_exist",
        "//antlir/compiler/items:install_file",
        "//antlir/compiler/items:make_subvol",
        "//antlir/compiler/items:phases_provide",  # test_mount.py uses this
        "//antlir/compiler/items:remove_path",
        "//antlir/compiler/items:symlink",
    ],
)

python_unittest(
    name = "test-user",
    srcs = ["test_user.py"],
    needed_coverage = [(100, "//antlir/compiler/items:user")],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "users-groups-from-scratch",
        ): "test-layer-users-groups-from-scratch",
    },
    deps = [
        ":common_testlib",
        "//antlir/compiler/items:user",
    ],
)

python_unittest(
    name = "user-integration-test",
    srcs = ["user_integration_test.py"],
    resources = {
        layer_resource(
            flavor_helpers.default_flavor_build_appliance,
        ): "base-layer",
        layer_resource(
            TEST_IMAGE_PREFIX + "users-added",
        ): "users-added",
    },
    deps = [
        ":common_testlib",
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/compiler/items:user",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)
