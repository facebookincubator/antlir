load("//antlir/bzl:flavor_helpers.bzl", "flavor_helpers")
load("//antlir/bzl:image_genrule_layer.bzl", "genrule_layer_t")
load("//antlir/bzl:layer_resource.bzl", "layer_resource")
load("//antlir/bzl:oss_shim.bzl", "python_library", "python_unittest", "third_party")
load("//antlir/bzl:shape.bzl", "shape")
load("//antlir/bzl/image/feature:usergroup.bzl", "group_t", "user_t")
load("//antlir/bzl/image_actions:clone.bzl", "clone_t")
load("//antlir/bzl/image_actions:ensure_dirs_exist.bzl", "ensure_subdirs_exist_t")
load("//antlir/bzl/image_actions:install.bzl", "install_files_t")
load("//antlir/bzl/image_actions:remove.bzl", "remove_paths_t")
load("//antlir/bzl/image_actions:rpms.bzl", "rpm_action_item_t")
load("//antlir/bzl/image_actions:symlink.bzl", "symlink_t")
load("//antlir/bzl/image_actions:tarball.bzl", "tarball_t")
load("//antlir/compiler:defs.bzl", "TEST_IMAGE_PREFIX")

shape.loader(
    name = "clone_t",
    shape = clone_t,
    classname = "clone_t",
)

python_library(
    name = "clone",
    srcs = ["clone.py"],
    deps = [
        ":clone_t",
        ":common",
        ":phases_provide",
    ],
)

python_unittest(
    name = "test-clone",
    srcs = ["tests/test_clone.py"],
    needed_coverage = [(100, ":clone")],
    resources = {
        layer_resource(TEST_IMAGE_PREFIX + "parent_layer"): "tests/src-layer",
        layer_resource(TEST_IMAGE_PREFIX + "create_ops"): "tests/create_ops",
    },
    deps = [
        ":clone",
        ":common_testlib",
        "//antlir:common",
        "//antlir:find_built_subvol",
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
    ],
)

# Needs dedicated test coverage. For now, is covered by `test-items`.
python_library(
    name = "common",
    srcs = ["common.py"],
    deps = [
        ":mount_utils",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/compiler:procfs_serde",
        "//antlir/rpm:yum_dnf_conf",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
    ],
)

# A helper for tests, so lacks its own tests.
python_library(
    name = "common_testlib",
    srcs = ["tests/common.py"],
    deps = [
        ":common",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
        "//antlir:testlib_subvol_helpers",
        "//antlir/compiler:requires_provides",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

shape.loader(
    name = "group_t",
    shape = group_t,
    classname = "group_t",
)

python_library(
    name = "group",
    srcs = ["group.py"],
    deps = [
        ":common",
        ":group_t",
    ],
)

python_unittest(
    name = "test-group",
    srcs = ["tests/test_group.py"],
    needed_coverage = [(100, ":group")],
    deps = [
        ":common_testlib",
        ":group",
    ],
)

python_unittest(
    name = "group-integration-test",
    srcs = ["tests/group_integration_test.py"],
    resources = {
        layer_resource(
            flavor_helpers.default_flavor_build_appliance,
        ): "tests/base-layer",
        layer_resource(
            TEST_IMAGE_PREFIX + "groups-added",
        ): "tests/groups-added",
    },
    deps = [
        ":common_testlib",
        ":group",
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
    ],
)

python_library(
    name = "phases_provide",
    srcs = ["phases_provide.py"],
    deps = [
        ":common",
        ":group",
        ":user",
    ],
)

python_unittest(
    name = "test-phases-provide",
    srcs = ["tests/test_phases_provide.py"],
    needed_coverage = [(100, ":phases_provide")],
    deps = [
        ":common_testlib",
        ":phases_provide",
    ],
)

python_library(
    name = "rpm_action",
    srcs = ["rpm_action.py"],
    deps = [
        ":common",
        ":rpm_action_item_t",
        "//antlir/nspawn_in_subvol:nspawn",
        "//antlir/nspawn_in_subvol/plugins:rpm",
        "//antlir/rpm:find_snapshot",
        "//antlir/rpm:rpm_metadata",
    ],
)

python_library(
    name = "rpm_action_base_testlib",
    srcs = ["tests/rpm_action_base.py"],
    resources = {
        TEST_IMAGE_PREFIX + "rpm-test-cheese-1-1.rpm": "tests/rpm-test-cheese-1-1.rpm",
    },
    deps = [
        ":common_testlib",
        ":rpm_action",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
    ],
)

shape.loader(
    name = "rpm_action_item_t",
    shape = rpm_action_item_t,
    classname = "rpm_action_item_t",
)

python_unittest(
    name = "test-rpm-action",
    srcs = ["tests/test_rpm_action.py"],
    needed_coverage = [(100, ":rpm_action")],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "tests/test-build-appliance",
        layer_resource(
            TEST_IMAGE_PREFIX + "layer-with-only-one-locally-installed-rpm",
        ): "tests/test-with-one-local-rpm",
        layer_resource(
            TEST_IMAGE_PREFIX + "layer-with-non-default-snapshot-no-rpms",
        ): "tests/test-with-no-rpm",
        TEST_IMAGE_PREFIX + "rpm-test-cheese-2-1.rpm": "tests/rpm-test-cheese-2-1.rpm",
    },
    deps = [
        ":rpm_action_base_testlib",
        "//antlir:find_built_subvol",
        "//antlir:testlib_layer_resource",
    ],
)

shape.loader(
    name = "genrule_layer_t",
    shape = genrule_layer_t,
    classname = "genrule_layer_t",
)

python_library(
    name = "genrule_layer",
    srcs = ["genrule_layer.py"],
    deps = [
        ":common",
        ":genrule_layer_t",
        "//antlir/nspawn_in_subvol:nspawn",
        "//antlir/nspawn_in_subvol/plugins:rpm",
    ],
)

python_unittest(
    name = "test-genrule-layer",
    srcs = ["tests/test_genrule_layer.py"],
    needed_coverage = [(100, ":genrule_layer")],
    resources = {
        layer_resource(
            # We need something with the test RPM snapshot, with a working
            # `sh`, `touch`, and `mkdir`, and `dnf`.  The former 3 could be
            # provided through a busybox binary, but `dnf` pretty much
            # presupposes a full OS, so use the test BA for now.
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "tests/genrule-layer-base",
        layer_resource(
            # Must have a `busybox` binary as `/bin/sh`.
            TEST_IMAGE_PREFIX + "validates-dnf-build-appliance",
        ): "tests/genrule-layer-busybox-base",
    },
    deps = [
        ":common_testlib",
        ":make_subvol",
        "//antlir:common",
        "//antlir:find_built_subvol",
        "//antlir:subvol_utils",
        "//antlir:testlib_layer_resource",
        "//antlir/rpm:find_snapshot",
    ],
)

shape.loader(
    name = "ensure_subdirs_exist_t",
    shape = ensure_subdirs_exist_t,
    classname = "ensure_subdirs_exist_t",
)

python_library(
    name = "ensure_dirs_exist",
    srcs = ["ensure_dirs_exist.py"],
    deps = [
        ":common",
        ":ensure_subdirs_exist_t",
        ":stat_options",
        "//antlir/compiler:requires_provides",
        "//antlir/compiler:subvolume_on_disk",
        "//antlir/nspawn_in_subvol:ba_runner",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)

python_unittest(
    name = "test-ensure-dirs-exist",
    srcs = ["tests/test_ensure_dirs_exist.py"],
    needed_coverage = [(100, ":ensure_dirs_exist")],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "tests/test-build-appliance",
    },
    deps = [
        ":common_testlib",
        "//antlir:common",
        "//antlir:find_built_subvol",
        "//antlir:subvol_utils",
    ],
)

# Covered by `test-items`. Future: separate test & coverage.
python_library(
    name = "mount_utils",
    srcs = ["mount_utils.py"],
    deps = ["//antlir:subvol_utils"],
)

python_library(
    name = "mount",
    srcs = ["mount.py"],
    visibility = [
        "//antlir/...",
        "//tupperware/cm/antlir/...",
    ],
    deps = [
        ":common",
        ":mount_utils",
        "//antlir:find_built_subvol",
        "//antlir:subvol_utils",
        "//antlir/compiler:requires_provides",
    ],
)

# Covered by `test-items`. Future: separate test & coverage.
python_library(
    name = "make_subvol",
    srcs = ["make_subvol.py"],
    deps = [
        ":common",
        ":mount_utils",
        ":tarball",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
    ],
)

python_library(
    name = "stat_options",
    srcs = ["stat_options.py"],
    deps = [
        "//antlir:subvol_utils",
        "//antlir/nspawn_in_subvol:ba_runner",
    ],
)

python_unittest(
    name = "test-stat-options",
    srcs = ["tests/test_stat_options.py"],
    deps = [":stat_options"],
)

shape.loader(
    name = "install_files_t",
    shape = install_files_t,
    classname = "install_files_t",
)

shape.loader(
    name = "remove_paths_t",
    shape = remove_paths_t,
    classname = "remove_paths_t",
)

python_library(
    name = "tarball",
    srcs = ["tarball.py"],
    deps = [
        ":tarball_t",
    ],
)

# Future: Finish splitting this library, and tests, by item.  The only
# challenge is to make sure that `common.py` gets coverage -- coverage of
# its functions is currently distributed across various items.
python_library(
    name = "items",
    srcs = [
        "install_file.py",
        "remove_path.py",
        "symlink.py",
    ],
    deps = [
        ":common",
        ":install_files_t",
        ":make_subvol",
        ":mount",
        ":mount_utils",
        ":remove_paths_t",
        ":stat_options",
        ":symlink_t",
        ":tarball",
        "//antlir/compiler:requires_provides",
        "//antlir/compiler:subvolume_on_disk",
        "//antlir/nspawn_in_subvol:ba_runner",
        "//antlir/nspawn_in_subvol:nspawn",
        third_party.library(
            "pydantic",
            platform = "python",
        ),
    ],
)

python_unittest(
    name = "test-items",
    srcs = [
        "tests/test_common.py",
        "tests/test_install_file.py",
        "tests/test_make_subvol.py",
        "tests/test_mount.py",
        "tests/test_remove_path.py",
        "tests/test_symlink.py",
        "tests/test_tarball.py",
    ],
    needed_coverage = [
        (100, ":common"),
        (100, ":items"),
        (100, ":make_subvol"),
        (100, ":mount_utils"),
        (100, ":mount"),
        (100, ":tarball"),
    ],
    resources = {
        TEST_IMAGE_PREFIX + "create_ops-original.sendstream": "tests/create_ops.sendstream",
        TEST_IMAGE_PREFIX + "layer-with-only-one-locally-installed-rpm": "tests/test-with-one-local-rpm",
        layer_resource(
            TEST_IMAGE_PREFIX + "build_appliance_testing",
        ): "tests/test-build-appliance",
        layer_resource(
            TEST_IMAGE_PREFIX + "small-layer-with-mounts",
        ): "tests/small-layer-with-mounts",
        layer_resource(
            TEST_IMAGE_PREFIX + "hello_world_base",
        ): "tests/test-layer-without-mounts",
        TEST_IMAGE_PREFIX + "small-layer-with-mounts.btrfs": "tests/small-layer-with-mounts.btrfs",
        TEST_IMAGE_PREFIX + "create_ops.tar.gz": "tests/create_ops.tar.gz",
    },
    deps = [
        ":common_testlib",
        ":ensure_dirs_exist",
        ":items",
        ":phases_provide",  # test_mount.py uses this
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/btrfs_diff:testlib_demo_sendstreams",
    ],
)

# `items_for_features` and `sample_items` always depend on ~all items.
python_library(
    name = "all-items",
    deps = [
        ":clone",
        ":ensure_dirs_exist",
        ":genrule_layer",
        ":group",
        ":items",
        ":phases_provide",
        ":rpm_action",
        ":user",
    ],
)

shape.loader(
    name = "tarball_t",
    shape = tarball_t,
    classname = "tarball_t",
)

shape.loader(
    name = "symlink_t",
    shape = symlink_t,
    classname = "symlink_t",
)

shape.loader(
    name = "user_t",
    shape = user_t,
    classname = "user_t",
)

python_library(
    name = "user",
    srcs = ["user.py"],
    deps = [
        ":common",
        ":group",
        ":user_t",
    ],
)

python_unittest(
    name = "test-user",
    srcs = ["tests/test_user.py"],
    needed_coverage = [(100, ":user")],
    resources = {
        layer_resource(
            TEST_IMAGE_PREFIX + "users-groups-from-scratch",
        ): "tests/test-layer-users-groups-from-scratch",
    },
    deps = [
        ":common_testlib",
        ":user",
    ],
)

python_unittest(
    name = "user-integration-test",
    srcs = ["tests/user_integration_test.py"],
    resources = {
        layer_resource(
            flavor_helpers.default_flavor_build_appliance,
        ): "tests/base-layer",
        layer_resource(
            TEST_IMAGE_PREFIX + "users-added",
        ): "tests/users-added",
    },
    deps = [
        ":common_testlib",
        ":user",
        "//antlir:find_built_subvol",
        "//antlir:fs_utils",
        "//antlir:subvol_utils",
        "//antlir/nspawn_in_subvol:nspawn",
    ],
)
