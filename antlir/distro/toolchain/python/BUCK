load("@fbcode//buck2/platform/python:interpreters.bzl", "python_interpreter")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/image_command_alias:image_command_alias.bzl", "image_command_alias")
load("//antlir/antlir2/os:oses.bzl", "OSES")
load("//antlir/bzl:internal_external.bzl", "internal_external")

oncall("antlir")

# Not all OSes need an interpreter defined.
_OSES_WITH_PLATFORM_TOOLCHAIN = [os for os in OSES if os.has_platform_toolchain]

[
    image_command_alias(
        name = "interpreter--{}--{}".format(
            os.name,
            os.python.interpreter,
        ),
        default_os = os.name,
        exe = os.python.interpreter,
        layer = ":layer",
        pass_env = ["PYTHONPATH"],
        rootless = True,
    )
    for os in _OSES_WITH_PLATFORM_TOOLCHAIN
]

python_interpreter(
    name = "interpreter",
    interpreter = select({
        # This is the interpreter used for the target platform, i.e. the one invoked
        # at runtime in the PAR.
        "antlir//antlir/distro:build-for-distro": select({
            os.select_key: os.python.interpreter
            for os in _OSES_WITH_PLATFORM_TOOLCHAIN
        } | {"DEFAULT": _OSES_WITH_PLATFORM_TOOLCHAIN[0].python.interpreter}),
        # This is the interpreter used for the exec platform, i.e. the one invoked
        # as part of building the PAR (used for py_compile, etc). It will have the
        # runtime:fbcode constraint, which the antlir target platform will not.
        "ovr_config//runtime/constraints:fbcode": select({
            os.select_key: "$(location :interpreter--{}--{})".format(
                os.name,
                os.python.interpreter,
            )
            for os in _OSES_WITH_PLATFORM_TOOLCHAIN
        } | {"DEFAULT": "$(location :interpreter--{}--{})".format(
            _OSES_WITH_PLATFORM_TOOLCHAIN[0].name,
            _OSES_WITH_PLATFORM_TOOLCHAIN[0].python.interpreter,
        )}),
    }),
    # This is just a string embedded into the PAR manifest.
    interpreter_for_manifest = _OSES_WITH_PLATFORM_TOOLCHAIN[0].python.interpreter,
    interpreter_home_for_manifest = "/usr",
    target_compatible_with = select({
        "DEFAULT": ["antlir//antlir/distro:incompatible"],
        "antlir//antlir/distro:build-for-distro": [],
        "ovr_config//runtime/constraints:fbcode": [],
    }),
    version = select({
        os.select_key: os.python.version_str
        for os in _OSES_WITH_PLATFORM_TOOLCHAIN
    } | {"DEFAULT": _OSES_WITH_PLATFORM_TOOLCHAIN[0].python.version_str}),
    visibility = ["PUBLIC"],
)

image.layer(
    name = "layer",
    features = [
        feature.rpms_install(rpms = ["binutils"]),
        ":pex-deps",
    ],
)

feature.new(
    name = "pex-deps",
    features = [
        feature.rpms_install(
            subjects = [
                "unzip",
                # we might not always want whatever "floating" python is used by
                # the distro, so if it is set, make sure to request the specific
                # version we want
                internal_external(
                    fb = select({
                        "DEFAULT": "python3",
                        "ovr_config//third-party/python/constraints:3.12": "python3.12",
                        "ovr_config//third-party/python/constraints:3.9": "python3.9",
                    }),
                    oss = "python3",
                ),
            ],
        ),
    ],
    visibility = ["PUBLIC"],
)
