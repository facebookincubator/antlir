load("//antlir/antlir2/bzl:configured_alias.bzl", "antlir2_configured_alias")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/bzl/package:defs.bzl", "package")
load("//antlir/antlir2/testing:image_test.bzl", "image_python_test")
load("//antlir/bzl:build_defs.bzl", "cpp_binary", "cpp_library")
load("//antlir/distro/platform:defs.bzl", "alias_for_current_image_platform", "default_image_platform")

oncall("antlir")

prelude = native

cpp_binary(
    # @autodeps-skip
    name = "main",
    srcs = ["main.cpp"],
    # This should only be built for a centos system platform, use compatibility
    # attrs to guarantee that
    compatible_with = [
        "//antlir/distro:build-for-distro",
    ],
    default_target_platform = default_image_platform("centos9"),
    deps = [
        ":dep",
        ":platform-preprocessor-flags",
        "//antlir/distro/deps/jsoncpp:jsoncpp",
        # TODO(D66893436): these will become default deps but for now need to be
        # listed explicitly
        "//antlir/distro/deps/libgcc:stdc++",
        "//antlir/distro/deps/glibc:m",
    ],
)

cpp_library(
    # @autodeps-skip
    name = "dep",
    srcs = ["dep.c"],
    headers = ["dep.h"],
    default_target_platform = default_image_platform("centos9"),
    deps = [
        "//antlir/distro/deps/rpm:librpm",
    ],
)

prelude.cxx_library(
    name = "platform-preprocessor-flags",
    exported_platform_preprocessor_flags = [
        (
            "centos9-x86_64$",
            ['-DPLATFORM_PREPROCESSOR_FLAG="centos9-x86_64"'],
        ),
        (
            "centos10-x86_64$",
            ['-DPLATFORM_PREPROCESSOR_FLAG="centos10-x86_64"'],
        ),
        (
            "centos9-aarch64$",
            ['-DPLATFORM_PREPROCESSOR_FLAG="centos9-aarch64"'],
        ),
        (
            "centos10-aarch64$",
            ['-DPLATFORM_PREPROCESSOR_FLAG="centos10-aarch64"'],
        ),
    ],
)

alias_for_current_image_platform(
    name = "main-for-os",
    actual = ":main",
)

image.layer(
    name = "main-rpm-layer",
    features = [
        feature.ensure_dirs_exist(dirs = "/test"),
        feature.install(
            src = ":main-for-os",
            dst = select({
                "//antlir/antlir2/os:centos10": "/test/main-for-centos10",
                "//antlir/antlir2/os:centos9": "/test/main-for-centos9",
            }),
            # Remove the libs symlink tree if it exists so that:
            # 1) there are no build-id conflicts
            # 2) rpm correctly identifies dependencies and does not think that
            #    this rpm provides the libs that it links against
            ignore_symlink_tree = True,
            never_use_dev_binary_symlink = True,
        ),
    ],
    target_compatible_with = select({
        "//antlir/antlir2/os:centos10": [],
        "//antlir/antlir2/os:centos9": [],
        "DEFAULT": ["antlir//antlir/distro:incompatible"],
    }),
)

# Package up the binary into an rpm so that RPM automatically finds the
# dependencies for system libraries and it can be safely installed into an image
package.rpm(
    name = "main-rpm",
    compatible_with = [
        "//antlir/antlir2/os:centos10",
        "//antlir/antlir2/os:centos9",
    ],
    layer = ":main-rpm-layer",
    license = "NONE",
    rpm_name = "main",
)

image.layer(
    name = "test-layer",
    features = [
        feature.rpms_install(rpms = [
            "binutils",
            "coreutils",
        ]),
        feature.rpms_install(rpms = [":main-rpm"]),
    ],
)

image_python_test(
    name = "test",
    srcs = ["test.py"],
    default_os = "centos10",
    env = {
        "OS": select({
            "//antlir/antlir2/os:centos10": "centos10",
            "//antlir/antlir2/os:centos9": "centos9",
            "DEFAULT": "<NEVER USED>",
        }),
    },
    layer = ":test-layer",
)

antlir2_configured_alias(
    name = "test-c9",
    actual = ":test",
    default_os = "centos9",
)
