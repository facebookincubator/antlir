load("//antlir/antlir2/bzl:hoist.bzl", "hoist")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load(":defs.bzl", "boost_system_library")

oncall("antlir")

image.layer(
    name = "layer",
    features = [
        feature.rpms_install(subjects = select({
            "//antlir/antlir2/os:centos10": ["boost-devel"],
            "//antlir/antlir2/os:centos9": ["boost1.78-devel"],
            "DEFAULT": ["boost-devel"],
        })),
    ],
)

hoist(
    name = "headers",
    out = "boost",
    dir = True,
    layer = ":layer",
    path = select({
        "//antlir/antlir2/os:centos10": "/usr/include/boost",
        "DEFAULT": "/usr/include/boost1.78/boost",
    }),
)

boost_system_library(
    name = "boost",
    header_only = True,
)

boost_system_library(
    name = "boost_thread",
    # TODO(T213442795): hardcoding this version is gross but antlir doesn't
    # understand ld scripts
    path = select({
        "//antlir/antlir2/os:centos10": "/usr/lib64/libboost_thread.so.1.83.0",
        "DEFAULT": "/usr/lib64/libboost_thread.so.1.78.0",
    }),
    exported_deps = [":boost_system"],
)

[
    boost_system_library(
        name = "boost_" + name,
        path = select({
            "//antlir/antlir2/os:centos10": "/usr/lib64/libboost_{}.so.1.83.0".format(name),
            "DEFAULT": "/usr/lib64/libboost_{}.so.1.78.0".format(name),
        }),
    )
    for name in [
        "chrono",
        "context",
        "filesystem",
        "regex",
        "serialization",
        "system",
    ]
]

[
    boost_system_library(
        name = "boost_" + name,
        header_only = True,
    )
    for name in [
        "algorithm",
        "container",
        "date_time",
        "lexical_cast",
        "multi_index",
        "preprocessor",
        "random",
        "range",
        "uuid",
        "spirit",
        "variant",
    ]
]
