load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load("//antlir/antlir2/bzl/package:defs.bzl", "package")
load("//antlir/antlir2/image_command_alias:image_command_alias.bzl", "image_command_alias")
load(":pkgconfig.bzl", "image_pkgconfig_library")

oncall("antlir")

prelude = native

image.layer(
    name = "sysroot-layer",
    features = [
        feature.rpms_install(rpms = [
            # The "main" clang is actually invoked from the layer in
            # toolchains/cxx:layer, but installing it here gives us all the deps
            # that clang will expect to find in `--sysroot`
            "clang",
        ]),
    ],
    rootless = True,
    visibility = [],
)

package.unprivileged_dir(
    name = "sysroot",
    dot_meta = False,
    layer = ":sysroot-layer",
    rootless = True,
    visibility = ["PUBLIC"],
)

prelude.prebuilt_cxx_library(
    name = "libstdc++",
    exported_linker_flags = [
        "-std=c++20",
        "-lstdc++",
    ],
    exported_preprocessor_flags = ["-std=c++20"],
    visibility = ["PUBLIC"],
)

image.layer(
    name = "base",
    features = [
        feature.rpms_install(rpms = [
            "glibc-devel",  # undeclared dep of a lot of libraries
            "rpm",
            "pkgconf-pkg-config",  # pkg-config cli
        ]),
        feature.install(
            src = "pkgconfig_action.sh",
            dst = "/usr/bin/pkgconfig-action",
            mode = "a+rx",
        ),
    ],
    rootless = True,
    visibility = ["PUBLIC"],
)

package.unprivileged_dir(
    name = "base-root-dir",
    dot_meta = False,
    layer = ":base",
    rootless = True,
    visibility = [":pkgconfig-action"],
)

image_command_alias(
    name = "pkgconfig-action",
    exe = "pkgconfig-action",
    root = ":base-root-dir",
    rootless = True,
    visibility = ["PUBLIC"],
)

image_pkgconfig_library(
    name = "rpm",
    visibility = ["PUBLIC"],
)

image_pkgconfig_library(
    name = "jsoncpp",
    visibility = ["PUBLIC"],
)
