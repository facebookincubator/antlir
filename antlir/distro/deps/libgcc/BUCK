load("//antlir/bzl:build_defs.bzl", "alias")
load("//antlir/distro/deps:prebuilt_cxx_library.bzl", "prebuilt_cxx_library")
load("//antlir/distro/deps:rpm_library.bzl", "rpm_library")
load("//antlir/distro/deps:sysroot.bzl", "sysroot_dep")

oncall("antlir")

sysroot_dep(
    name = "stdc++",
    lib = "libstdc++.so.6",
    # TODO: it would be great to use exported_lang_preprocessor_flags to set
    # -std=c++20, but the c++ ones seem to always be applied, even when
    # compiling .c sources, so instead it's attached to the toolchain
    # preprocessor flags
    visibility = ["PUBLIC"],
)

# TODO: no idea if these header-unit targets are correct, cross that bridge when
# we get there
alias(
    name = "stdc++-header-unit",
    actual = ":stdc++",
    labels = ["antlir-distro-dep"],
    visibility = ["PUBLIC"],
)

prebuilt_cxx_library(
    name = "stdc++-legacy",
    exported_preprocessor_flags = ["-I$(location //antlir/distro/deps:sysroot)/usr/include/c++/11/backward"],
    visibility = ["PUBLIC"],
)

# This is not needed as a separate library on the versions of clang that we
# support, but keep it around for the buck2 graph
prebuilt_cxx_library(
    name = "stdc++fs",
    visibility = ["PUBLIC"],
)

sysroot_dep(
    name = "gcc_s",
    lib = "libgcc_s.so.1",
)

rpm_library(
    name = "atomic",
    lib = "libatomic.so.1",
    rpm = "libatomic",
)

alias(
    name = "atomic-header-unit",
    actual = ":atomic",
    labels = ["antlir-distro-dep"],
    visibility = ["PUBLIC"],
)
