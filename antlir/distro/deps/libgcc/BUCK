load("//antlir/antlir2/bzl:platform.bzl", "arch_select")
load("//antlir/antlir2/bzl:selects.bzl", "selects")
load("//antlir/bzl:build_defs.bzl", "alias")
load("//antlir/distro/deps:prebuilt_cxx_library.bzl", "prebuilt_cxx_library")
load("//antlir/distro/deps:rpm_library.bzl", "rpm_library")
load("//antlir/distro/deps:sysroot.bzl", "export_from_sysroot", "sysroot_dep")
load(":defs.bzl", "libstdcxx_headers")

oncall("antlir")

sysroot_dep(
    name = "stdc++",
    extract_soname = False,
    header_dirs = select({
        "DEFAULT": [],
        "antlir//antlir/antlir2/os:centos10": libstdcxx_headers("14"),
        "antlir//antlir/antlir2/os:centos9": libstdcxx_headers("11"),
    }),
    lib = "libstdc++.so.6",
    provided = True,
    soname = "libstdc++.so.6",
    supports_shared_library_interface = False,
    visibility = ["PUBLIC"],
)

# TODO: no idea if these header-unit targets are correct, cross that bridge when
# we get there
alias(
    name = "stdc++-header-unit",
    actual = ":stdc++",
    labels = ["antlir-distro-dep"],
    visibility = ["PUBLIC"],
)

# This is not needed as a separate library on the versions of clang that we
# support, but keep it around for the buck2 graph
prebuilt_cxx_library(
    name = "stdc++fs",
    soname = "libstdc++.so.6",
    visibility = ["PUBLIC"],
)

sysroot_dep(
    name = "gcc_s",
    extract_soname = False,
    lib = "libgcc_s.so.1",
    link_without_soname = True,
    provided = True,
    supports_shared_library_interface = False,
)

rpm_library(
    name = "atomic",
    lib = "libatomic.so.1",
    rpm = "libatomic",
)

alias(
    name = "atomic-header-unit",
    actual = ":atomic",
    labels = ["antlir-distro-dep"],
    target_compatible_with = select({
        "DEFAULT": ["antlir//antlir/distro:incompatible"],
        "antlir//antlir/distro:build-for-distro": [],
    }),
    visibility = ["PUBLIC"],
)

export_from_sysroot(
    name = "gcc-redhat-linux",
    compatible_with = [
        "antlir//antlir/antlir2/os:centos10",
        "antlir//antlir/antlir2/os:centos9",
    ],
    dir = True,
    path = selects.apply(
        selects.join(
            arch = arch_select(
                aarch64 = "aarch64",
                x86_64 = "x86_64",
            ),
            version = select({
                "antlir//antlir/antlir2/os:centos10": "14",
                "antlir//antlir/antlir2/os:centos9": "11",
            }),
        ),
        lambda sels: "/usr/lib/gcc/{arch}-redhat-linux/{version}".format(
            arch = sels.arch,
            version = sels.version,
        ),
    ),
)
