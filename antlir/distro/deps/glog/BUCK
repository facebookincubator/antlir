load("@fbsource//tools/build_defs:fb_native_wrapper.bzl", "fb_native")
load("//antlir/bzl:build_defs.bzl", "alias")
load("//antlir/distro/deps:rpm_library.bzl", "rpm_library")

oncall("antlir")

#
# fbcode glog has customizations - additional symbols / functions or exposed priate
# symbols. To make this roughly compatible with fbcode, we expose enough of upstream
# glog and wrap it with customizations in the main :glog target below.
#

rpm_library(
    name = "_glog",
    headers = {
        "glog/_logging.h": "glog/logging.h",
        "glog/log_severity.h": "glog/log_severity.h",
        "glog/raw_logging.h": "glog/raw_logging.h",
        "glog/stl_logging.h": "glog/stl_logging.h",
        "glog/vlog_is_on.h": "glog/vlog_is_on.h",
    },
    # So we don't put this target in projects.bzl (but instead the one below).
    labels = [],
    lib = "libglog.so",
    rpm = "glog-devel",
    test_include_headers = [
        "glog/_logging.h",
    ],
    exported_deps = [
        # Needed for fbcode glog but we don't expose this functionality.
        # "//antlir/distro/deps/coredumper:coredumper",
        "//antlir/distro/deps/gflags:gflags",
        "//antlir/distro/deps/glibc:pthread",
    ],
)

fb_native.cxx_library(
    name = "glog",
    srcs = ["logging.cpp"],
    # Don't export this header since glog doesn't.
    headers = ["mutex.h"],
    header_namespace = "glog",
    exported_headers = ["logging.h"],
    compiler_flags = [
        "-Wno-header-hygiene",
        "-Wno-unused-variable",
        "-Wno-unused-const-variable",
    ],
    # This makes #include <glog/logging.h> work.
    exported_header_style = "system",
    # So antlir picks up this as the actual tp2 remap dep.
    labels = ["antlir-distro-dep"],
    preprocessor_flags = ["-DHAVE_PTHREAD"],
    visibility = ["PUBLIC"],
    # Re-export anything public that upstream glog does.
    exported_deps = [":_glog"],
)

# Copied from rpm_library so we alias the right target.
# These aliases are totally useless since CentOS has nothing to do with
# fbcode, Android or Apple platforms, but it breaks some 'buck2 uquery's and
# janky macros that append platform suffixes like this
[
    alias(
        name = "glog" + suffix,
        actual = ":" + "glog",
        target_compatible_with = select({
            "DEFAULT": ["antlir//antlir/distro:incompatible"],
            "antlir//antlir/distro:build-for-distro": [],
        }),
        visibility = ["PUBLIC"],
    )
    for suffix in [
        "Fbcode",
        "Apple",
        "Android",
    ]
]
