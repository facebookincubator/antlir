load("@prelude//:paths.bzl", "paths")
load("//antlir/antlir2/bzl/feature:defs.bzl", "feature")
load("//antlir/antlir2/bzl/image:defs.bzl", "image")
load(":defs.bzl", "cuda")

oncall("antlir")

# CUDA rpms have a POSTIN action of running useradd for some reason, but this is
# an undeclared dependency.
image.layer(
    name = "with-undeclared-deps",
    features = [
        feature.rpms_install(rpms = ["/usr/sbin/useradd"]),
    ],
    parent_layer = "antlir//antlir/distro/deps:base",
    visibility = [],
)

[
    cuda.rpm_library(
        name = name,
        dnf_additional_repos = ["nvidia"],
        header_glob = [
            ("/usr/local/cuda-{version}/targets/{arch}-linux/include", "**/*"),
        ],
        lib = paths.join("/usr/local/cuda-{version}/targets/{arch}-linux/lib", lib),
        # So this doesn't get put into the PAR (because it's a big library)
        # provided = True,
        rpm = rpm,
        test_deps_parent_layer = ":with-undeclared-deps",
        exported_deps = ["{}--actual".format(dep) for dep in exported_deps],
    )
    for (name, lib, rpm, exported_deps) in [
        (
            "cuda",
            "libcudart.so",
            [
                "cuda-cudart-devel-{version}",
                "cuda-crt-{version}",
                "cuda-nvml-devel-{version}",
                "cuda-profiler-api-{version}",
            ],
            [],
        ),
        ("cuda_driver_api", "stubs/libcuda.so", "cuda-driver-devel-{version}", []),
        (
            "cusparse",
            "libcusparse.so",
            "libcusparse-devel-{version}",
            [":cuda"],
        ),
        (
            "cusparseLt",
            "libcusparseLt.so",
            "libcusparselt-devel",
            [":cuda"],
        ),
        (
            "cufft",
            "libcufft.so",
            "libcufft-devel-{version}",
            [":cuda"],
        ),
        (
            "cufile",
            "libcufile.so",
            "libcufile-devel-{version}",
            [":cuda"],
        ),
        (
            "curand",
            "libcurand.so",
            "libcurand-devel-{version}",
            [":cuda"],
        ),
        (
            "cublas",
            "libcublas.so",
            "libcublas-devel-{version}",
            [
                ":cuda",
                ":cublasLt",
            ],
        ),
        (
            "cublasLt",
            "libcublasLt.so",
            "libcublas-devel-{version}",
            [":cuda"],
        ),
        (
            "cupti",
            "libcupti.so",
            "cuda-cupti-{version}",
            [":cuda"],
        ),
        (
            "cusolver",
            "libcusolver.so",
            "libcusolver-devel-{version}",
            [":cuda"],
        ),
        ("nvJitlink", "libnvJitLink.so", "libnvjitlink-devel-{version}", []),
        (
            "nvrtc",
            "libnvrtc.so",
            "cuda-nvrtc-devel-{version}",
            [
                ":cuda",
                ":nvrtc-builtins",
            ],
        ),
        (
            "nvrtc-builtins",
            "libnvrtc-builtins.so",
            "cuda-nvrtc-devel-{version}",
            [":cuda"],
        ),
        (
            "nvToolsExt",
            "libnvToolsExt.so",
            "cuda-nvtx-{version}",
            [":cuda"],
        ),
    ]
]
