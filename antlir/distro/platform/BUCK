load("@prelude//:rules.bzl", "platform")
load(":defs.bzl", "define_platforms")

oncall("antlir")

platform(
    name = "base",
    constraint_values = [
        # Set this constraint so that the default toolchains selected by
        # buck are the ones defined for antlir distro targets
        "antlir//antlir/distro:build-for-distro-constraint",
        # TODO: using the linker wrapper that understands these flags would
        # unblock this
        # @oss-disable
        # Basic configuration info about the platform
        "ovr_config//os/constraints:linux",
        # Compiler information; we always use clang.
        "ovr_config//compiler/constraints:clang",
        "ovr_config//compiler/constraints:gcc-or-clang",
        # TODO: figure out how to build sanitized binaries?
        # @oss-disable
        # python_binary targets are destined for an image that has no fbcode
        # repo or runtime, it must be packaged standalone
        # @oss-disable
        # There's a lot of assumptions about using custom allocators. These will
        # be redirected to antlir's jemalloc dep from centos.
        "ovr_config//build_mode/constraints:fbcode-custom-allocators-enabled",
        # configured_alias() calls seem to require this constraint in the base layer
        "ovr_config//third-party/cuda/constraints:12.8",
        "ovr_config//cpp/constraints:libstdc++",
        # Don't pull in kineto for pytorch.
        "fbcode//caffe2/fb/fbcode:disable_kineto",
        # Don't use JK for pytorch.
        "ovr_config//torch/constraints:no_knobs",
    ],
    visibility = ["//antlir/..."],
)

define_platforms()
