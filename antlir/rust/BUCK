load("//antlir/bzl:build_defs.bzl", "echo", "export_file", "python_library", "rust_binary", "rust_python_extension", "third_party")
load(":modules.bzl", "extension_modules", "extension_rust_targets")

oncall("antlir")

# Main entrypoint to the rust python extension modules
# This exists because Python import resolution is annoying and would otherwise
# make it impossible to have any python_{library,binary,unittest} targets under
# antlir/rust
python_library(
    name = "rust",
    srcs = ["__init__.py"],
    deps = [":native_antlir_impl"],
)

rust_python_extension(
    name = "native_antlir_impl",
    srcs = ["src/lib.rs"],
    compatible_with = [
        "ovr_config//os:freebsd",
        "ovr_config//os:linux",
        "ovr_config//os:macos",
    ],
    mapped_srcs = {
        ":register_modules.rs": "src/register_modules.rs",
    },
    visibility = ["//antlir/..."],
    deps = [third_party.library(
        "pyo3",
        platform = "rust",
    )] + extension_rust_targets,
)

export_file(name = "trigger_rust_module_init.py")

register_modules_src = [
    "use pyo3::prelude::*;",
    "pub(crate) fn register_modules(py: Python<'_>, m: &PyModule) -> PyResult<()> {",
]

register_modules_src.extend(["submodule!({}, \"{}\", py, m)?;".format(crate, module) for crate, module in extension_modules.items()])

register_modules_src.append("Ok(())\n}")

echo(
    name = "register_modules.rs",
    content = "\n".join(register_modules_src) + "\n",
)

rust_binary(
    name = "gen-modules-bzl",
    srcs = [
        "gen_modules_bzl.rs",
        "modules.bzl",
    ],
    crate_root = "gen_modules_bzl.rs",
    test_deps = [
        "pretty_assertions",
    ],
    deps = [
        "anyhow",
        "serde",
        "serde_json",
        "serde_starlark",
        "//antlir/buck/buck_label:buck_label",
        "//antlir/signedsource:signedsource",
    ],
)
