load("//antlir/bzl:constants.bzl", "DO_NOT_USE_BUILD_APPLIANCE")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "http_file")
load("//antlir/bzl:rpm_repo_snapshot.bzl", "default_rpm_repo_snapshot_for", "install_rpm_repo_snapshot", "set_up_rpm_repo_snapshots")

stable_build_appliance_sha = "a6c024a253199ed673b05510bff8c6a76ebd5c0491c139201450e2f088dcad6e"

http_file(
    name = "stable_build_appliance.sendstream.zst",
    sha256 = stable_build_appliance_sha,
    urls = [
        "https://antlir.s3.us-east-2.amazonaws.com/images/appliance/stable_build_appliance.sendstream.zst." + stable_build_appliance_sha,
    ],
)

image.sendstream_layer(
    name = "stable_build_appliance",
    source = ":stable_build_appliance.sendstream.zst",
    build_opts = image.opts(
        build_appliance = DO_NOT_USE_BUILD_APPLIANCE,
    ),
)

# Below are images used for rebuilding the stable build appliance
# they should not be used for normal operation for a few reasons:
# 1) building the stable BA is a ~2 minute performance hit on every cache miss
# 2) using stable BA from S3 allows non-rpm-based hosts to build images

install_snapshots = [
    set_up_rpm_repo_snapshots(),
    install_rpm_repo_snapshot("//snapshot:fedora33"),
    default_rpm_repo_snapshot_for("dnf", "//snapshot:fedora33"),
]

# This is the origin of the stable_build_appliance artifact uploaded to S3.
image.layer(
    name = "bootstrap_build_appliance",
    features = [
        # Note: need this because the yum_dnf_from_snapshot code can't deal
        # with this directory not existing.
        image.mkdir("/etc", "yum"),
        image.rpms_install([
            "bsdtar",  # For building reproducible archives
            "btrfs-progs",
            "coreutils",
            "dnf",  # For installing rpms
            "dnf-command(versionlock)",
            "dnf-utils",
            "gcc",  # build code in foreign_layers
            "iproute",
            "net-tools",
            "python3",
            "redhat-rpm-config",  # For building rpms
            "rpm",  # For manipulating rpms
            "rpm-build",  # For building rpms
            "rpm-sign",  # For signing rpms
            "sudo",
            "tar",
        ]),
    ] + install_snapshots,
    build_opts = image.opts(
        # Uncomment to rebuild using the current host (must have dnf and other
        # rpm tools) - this should (probably) never be necessary, as the stable
        # build appliance should be able to rebuild itself or any changes that
        # might have been introduced since publishing.
        # build_appliance = ":host_build_appliance",
        rpm_repo_snapshot = "//snapshot:fedora33",
    ),
    enable_boot_target = True,
)

# IMPORTANT: This should always be built with the config option
# `python.package_style=standalone`, or the resulting image will only work on
# the same host it was built on. Unfortunately there is no way to enforce this
# at build time, but any breakage will be surfaced by CI (and any automated
# build of the BA will do the right thing already).
image.package(
    name = "bootstrap_build_appliance.sendstream.zst",
)

# Host build appliance should never have to be used outside of the original
# bootstrapping process.
# It requires an rpm-based host system on which to build the bootstrapped build
# appliance, which should be used for all subsequent operations.
image.layer(
    name = "host_build_appliance",
    features = [
        image.mkdir("/", "var"),
        image.mkdir("/var", "tmp"),
        image.mkdir("/var", "log"),
        image.mkdir("/var", "cache"),
        image.mkdir("/var/cache", "dnf"),
        image.mkdir("/var", "lib"),
        image.mkdir("/var/lib", "dnf"),
        image.mkdir("/var/lib", "rpm"),
    ] + [
        image.host_dir_mount(source)
        for source in [
            "/bin",
            "/etc",
            "/lib",
            "/lib64",
            "/sbin",
            "/usr",
        ]
    ] + install_snapshots,
    build_opts = image.opts(
        build_appliance = DO_NOT_USE_BUILD_APPLIANCE,
    ),
    visibility = [],
)
