load("//antlir/bzl:constants.bzl", "DO_NOT_USE_BUILD_APPLIANCE")
load("//antlir/bzl:image.bzl", "image")
load("//antlir/bzl:oss_shim.bzl", "http_file")
load("//antlir/bzl:rpm_repo_snapshot.bzl", "add_rpm_repo_snapshots_layer")
load(":rust.bzl", "rustc")
load(":stable_appliance.bzl", "stable_build_appliance_sha")

http_file(
    name = "stable-build-appliance.sendstream.zst",
    sha256 = stable_build_appliance_sha,
    urls = [
        "https://antlir.s3.us-east-2.amazonaws.com/images/appliance/stable-build-appliance.sendstream.zst." + stable_build_appliance_sha,
    ],
)

image.sendstream_layer(
    name = "stable-build-appliance",
    source = ":stable-build-appliance.sendstream.zst",
    flavor_config_override = image.opts(
        build_appliance = DO_NOT_USE_BUILD_APPLIANCE,
    ),
    visibility = ["PUBLIC"],
)

# Below are images used for rebuilding the stable build appliance
# they should not be used for normal operation for a few reasons:
# 1) building the stable BA is a ~2 minute performance hit on every cache miss
# 2) using stable BA from S3 allows non-rpm-based hosts to build images

ba_features = [
    # Note: need this because the yum_dnf_from_snapshot code can't deal
    # with this directory not existing.
    image.ensure_subdirs_exist("/etc", "yum"),
    image.rpms_install([
        "attr",
        "bsdtar",
        "btrfs-progs",
        "coreutils",
        "dnf",  # For installing rpms
        "dnf-command(versionlock)",
        "dnf-utils",
        "gcc",  # build code in genrule_layers
        "g++",  # For c++ compilation
        "iproute",
        "net-tools",
        "python3",
        "redhat-rpm-config",  # For building rpms
        "rpm",  # For manipulating rpms
        "rpm-build",  # For building rpms
        "rpm-sign",  # For signing rpms
        "sudo",
        "tar",
        "dosfstools",  # For vfat image package support
        "mtools",  # For vfat image package support
        "gdisk",  # For GPT image support
        "e2fsprogs",  # For ext3 image package support
    ]),
]

stable_fedora_opts = image.opts(
    # Uncomment to rebuild using the current host (must have dnf and other
    # rpm tools) - this should (probably) never be necessary, as the stable
    # build appliance should be able to rebuild itself or any changes that
    # might have been introduced since publishing.
    # build_appliance = ":host_build_appliance",
    build_appliance = ":stable-build-appliance",
    rpm_repo_snapshot = "//snapshot:fedora33",
)

rc_opts = image.opts(
    build_appliance = ":rc-build-appliance.bootstrap",
)

image.layer(
    name = "rc-build-appliance.no-snapshot.bootstrap",
    features = ba_features,
    flavor_config_override = stable_fedora_opts,
    visibility = [],
)

add_rpm_repo_snapshots_layer(
    name = "rc-build-appliance.bootstrap",
    dnf_snapshot = "//snapshot:fedora33",
    flavor_config_override = stable_fedora_opts,
    parent_layer = ":rc-build-appliance.no-snapshot.bootstrap",
    visibility = [],
)

image.layer(
    name = "rc-build-appliance.base-features",
    flavor_config_override = rc_opts,
    features = ba_features,
    visibility = [],
)

# Note: This `rustc.install` macro is only used on the
# non-bootstrap build appliance because it does not
# rely on the snapshot for installation.  So while
# we *could* install this into the bootstrap version,
# it doesn't provide any value.
rustc.install(
    name = "rc-build-appliance.no-snapshot",
    parent_layer = ":rc-build-appliance.base-features",
    # We use the nightly channel because some crates we
    # depend on require features that are only available in
    # this channel.  If we could, we'd use stable or beta
    # and not be so apparently cavalier.  At least we are
    # pinning the version to mitigate surprises.
    channel = "nightly",
    # This version is used because it works, there is
    # no deep reason why this is better than some other
    # version it was just the day I set this up.
    version = "2021-04-20",
    flavor_config_override = rc_opts,
    visibility = [],
)

add_rpm_repo_snapshots_layer(
    name = "rc-build-appliance",
    dnf_snapshot = "//snapshot:fedora33",
    flavor_config_override = rc_opts,
    parent_layer = ":rc-build-appliance.no-snapshot",
    visibility = ["PUBLIC"],
)

image.python_unittest(
    name = "test-rc-build-appliance",
    srcs = [
        "test_rust.py",
    ],
    layer = ":rc-build-appliance",
)

# IMPORTANT: This should always be built with the config option
# `python.package_style=standalone`, or the resulting image will only work on
# the same host it was built on. Unfortunately there is no way to enforce this
# at build time, but any breakage will be surfaced by CI (and any automated
# build of the BA will do the right thing already).
image.package(
    name = "rc-build-appliance.sendstream.zst",
    format = "sendstream.zst",
    layer = ":rc-build-appliance",
)

# Host build appliance should never have to be used outside of the original
# bootstrapping process.
# It requires an rpm-based host system on which to build the bootstrapped build
# appliance, which should be used for all subsequent operations.
image.layer(
    name = "host-build-appliance",
    features = [
        image.ensure_subdirs_exist("/", "var"),
        image.ensure_subdirs_exist("/var", "tmp"),
        image.ensure_subdirs_exist("/var", "log"),
        image.ensure_subdirs_exist("/var", "cache"),
        image.ensure_subdirs_exist("/var/cache", "dnf"),
        image.ensure_subdirs_exist("/var", "lib"),
        image.ensure_subdirs_exist("/var/lib", "dnf"),
        image.ensure_subdirs_exist("/var/lib", "rpm"),
    ] + [
        image.host_dir_mount(source)
        for source in [
            "/bin",
            "/etc",
            "/lib",
            "/lib64",
            "/sbin",
            "/usr",
        ]
    ],
    flavor_config_override = image.opts(
        build_appliance = DO_NOT_USE_BUILD_APPLIANCE,
    ),
    visibility = [],
)
